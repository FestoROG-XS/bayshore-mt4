/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const v388 = $root.v388 = (() => {

    /**
     * Namespace v388.
     * @exports v388
     * @namespace
     */
    const v388 = {};

    v388.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof v388
         * @namespace
         */
        const protobuf = {};

        protobuf.RegisterSystemInfoRequest = (function() {

            /**
             * Properties of a RegisterSystemInfoRequest.
             * @memberof v388.protobuf
             * @interface IRegisterSystemInfoRequest
             * @property {string} pcbSerial RegisterSystemInfoRequest pcbSerial
             * @property {v388.protobuf.TerminalType} terminalType RegisterSystemInfoRequest terminalType
             * @property {number} romVersion RegisterSystemInfoRequest romVersion
             * @property {string} country RegisterSystemInfoRequest country
             * @property {v388.protobuf.LineType} lineType RegisterSystemInfoRequest lineType
             * @property {string} shopName RegisterSystemInfoRequest shopName
             * @property {string} shopNickname RegisterSystemInfoRequest shopNickname
             * @property {number|null} [allnetPlaceId] RegisterSystemInfoRequest allnetPlaceId
             * @property {number|null} [allnetRegion0] RegisterSystemInfoRequest allnetRegion0
             * @property {string|null} [muchaPlaceId] RegisterSystemInfoRequest muchaPlaceId
             * @property {number|null} [muchaPrefectureId] RegisterSystemInfoRequest muchaPrefectureId
             * @property {string} regionName0 RegisterSystemInfoRequest regionName0
             * @property {string} regionName1 RegisterSystemInfoRequest regionName1
             * @property {string} regionName2 RegisterSystemInfoRequest regionName2
             * @property {string} regionName3 RegisterSystemInfoRequest regionName3
             * @property {number} timezoneOffset RegisterSystemInfoRequest timezoneOffset
             * @property {v388.protobuf.ISystemSetting} systemSetting RegisterSystemInfoRequest systemSetting
             * @property {Array.<v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry>|null} [errorLogs] RegisterSystemInfoRequest errorLogs
             */

            /**
             * Constructs a new RegisterSystemInfoRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterSystemInfoRequest.
             * @implements IRegisterSystemInfoRequest
             * @constructor
             * @param {v388.protobuf.IRegisterSystemInfoRequest=} [properties] Properties to set
             */
            function RegisterSystemInfoRequest(properties) {
                this.errorLogs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemInfoRequest pcbSerial.
             * @member {string} pcbSerial
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.pcbSerial = "";

            /**
             * RegisterSystemInfoRequest terminalType.
             * @member {v388.protobuf.TerminalType} terminalType
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.terminalType = 0;

            /**
             * RegisterSystemInfoRequest romVersion.
             * @member {number} romVersion
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.romVersion = 0;

            /**
             * RegisterSystemInfoRequest country.
             * @member {string} country
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.country = "";

            /**
             * RegisterSystemInfoRequest lineType.
             * @member {v388.protobuf.LineType} lineType
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.lineType = 0;

            /**
             * RegisterSystemInfoRequest shopName.
             * @member {string} shopName
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.shopName = "";

            /**
             * RegisterSystemInfoRequest shopNickname.
             * @member {string} shopNickname
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.shopNickname = "";

            /**
             * RegisterSystemInfoRequest allnetPlaceId.
             * @member {number} allnetPlaceId
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.allnetPlaceId = 0;

            /**
             * RegisterSystemInfoRequest allnetRegion0.
             * @member {number} allnetRegion0
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.allnetRegion0 = 0;

            /**
             * RegisterSystemInfoRequest muchaPlaceId.
             * @member {string} muchaPlaceId
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.muchaPlaceId = "";

            /**
             * RegisterSystemInfoRequest muchaPrefectureId.
             * @member {number} muchaPrefectureId
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.muchaPrefectureId = 0;

            /**
             * RegisterSystemInfoRequest regionName0.
             * @member {string} regionName0
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName0 = "";

            /**
             * RegisterSystemInfoRequest regionName1.
             * @member {string} regionName1
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName1 = "";

            /**
             * RegisterSystemInfoRequest regionName2.
             * @member {string} regionName2
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName2 = "";

            /**
             * RegisterSystemInfoRequest regionName3.
             * @member {string} regionName3
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName3 = "";

            /**
             * RegisterSystemInfoRequest timezoneOffset.
             * @member {number} timezoneOffset
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.timezoneOffset = 0;

            /**
             * RegisterSystemInfoRequest systemSetting.
             * @member {v388.protobuf.ISystemSetting} systemSetting
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.systemSetting = null;

            /**
             * RegisterSystemInfoRequest errorLogs.
             * @member {Array.<v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry>} errorLogs
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.errorLogs = $util.emptyArray;

            /**
             * Creates a new RegisterSystemInfoRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoRequest=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest instance
             */
            RegisterSystemInfoRequest.create = function create(properties) {
                return new RegisterSystemInfoRequest(properties);
            };

            /**
             * Encodes the specified RegisterSystemInfoRequest message. Does not implicitly {@link v388.protobuf.RegisterSystemInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoRequest} message RegisterSystemInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pcbSerial);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.terminalType);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.romVersion);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.country);
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.lineType);
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.shopName);
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.shopNickname);
                if (message.allnetPlaceId != null && Object.hasOwnProperty.call(message, "allnetPlaceId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.allnetPlaceId);
                if (message.allnetRegion0 != null && Object.hasOwnProperty.call(message, "allnetRegion0"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.allnetRegion0);
                if (message.muchaPlaceId != null && Object.hasOwnProperty.call(message, "muchaPlaceId"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.muchaPlaceId);
                if (message.muchaPrefectureId != null && Object.hasOwnProperty.call(message, "muchaPrefectureId"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.muchaPrefectureId);
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.regionName0);
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.regionName1);
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.regionName2);
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.regionName3);
                writer.uint32(/* id 16, wireType 0 =*/128).sint32(message.timezoneOffset);
                $root.v388.protobuf.SystemSetting.encode(message.systemSetting, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.errorLogs != null && message.errorLogs.length)
                    for (let i = 0; i < message.errorLogs.length; ++i)
                        $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.encode(message.errorLogs[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemInfoRequest message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoRequest} message RegisterSystemInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pcbSerial = reader.string();
                            break;
                        }
                    case 2: {
                            message.terminalType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.romVersion = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.country = reader.string();
                            break;
                        }
                    case 5: {
                            message.lineType = reader.int32();
                            break;
                        }
                    case 6: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 7: {
                            message.shopNickname = reader.string();
                            break;
                        }
                    case 8: {
                            message.allnetPlaceId = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.allnetRegion0 = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.muchaPlaceId = reader.string();
                            break;
                        }
                    case 11: {
                            message.muchaPrefectureId = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.regionName0 = reader.string();
                            break;
                        }
                    case 13: {
                            message.regionName1 = reader.string();
                            break;
                        }
                    case 14: {
                            message.regionName2 = reader.string();
                            break;
                        }
                    case 15: {
                            message.regionName3 = reader.string();
                            break;
                        }
                    case 16: {
                            message.timezoneOffset = reader.sint32();
                            break;
                        }
                    case 17: {
                            message.systemSetting = $root.v388.protobuf.SystemSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            if (!(message.errorLogs && message.errorLogs.length))
                                message.errorLogs = [];
                            message.errorLogs.push($root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("pcbSerial"))
                    throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                if (!message.hasOwnProperty("terminalType"))
                    throw $util.ProtocolError("missing required 'terminalType'", { instance: message });
                if (!message.hasOwnProperty("romVersion"))
                    throw $util.ProtocolError("missing required 'romVersion'", { instance: message });
                if (!message.hasOwnProperty("country"))
                    throw $util.ProtocolError("missing required 'country'", { instance: message });
                if (!message.hasOwnProperty("lineType"))
                    throw $util.ProtocolError("missing required 'lineType'", { instance: message });
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("shopNickname"))
                    throw $util.ProtocolError("missing required 'shopNickname'", { instance: message });
                if (!message.hasOwnProperty("regionName0"))
                    throw $util.ProtocolError("missing required 'regionName0'", { instance: message });
                if (!message.hasOwnProperty("regionName1"))
                    throw $util.ProtocolError("missing required 'regionName1'", { instance: message });
                if (!message.hasOwnProperty("regionName2"))
                    throw $util.ProtocolError("missing required 'regionName2'", { instance: message });
                if (!message.hasOwnProperty("regionName3"))
                    throw $util.ProtocolError("missing required 'regionName3'", { instance: message });
                if (!message.hasOwnProperty("timezoneOffset"))
                    throw $util.ProtocolError("missing required 'timezoneOffset'", { instance: message });
                if (!message.hasOwnProperty("systemSetting"))
                    throw $util.ProtocolError("missing required 'systemSetting'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemInfoRequest message.
             * @function verify
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.pcbSerial))
                    return "pcbSerial: string expected";
                switch (message.terminalType) {
                default:
                    return "terminalType: enum value expected";
                case 0:
                case 1:
                    break;
                }
                if (!$util.isInteger(message.romVersion))
                    return "romVersion: integer expected";
                if (!$util.isString(message.country))
                    return "country: string expected";
                switch (message.lineType) {
                default:
                    return "lineType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                if (!$util.isString(message.shopNickname))
                    return "shopNickname: string expected";
                if (message.allnetPlaceId != null && message.hasOwnProperty("allnetPlaceId"))
                    if (!$util.isInteger(message.allnetPlaceId))
                        return "allnetPlaceId: integer expected";
                if (message.allnetRegion0 != null && message.hasOwnProperty("allnetRegion0"))
                    if (!$util.isInteger(message.allnetRegion0))
                        return "allnetRegion0: integer expected";
                if (message.muchaPlaceId != null && message.hasOwnProperty("muchaPlaceId"))
                    if (!$util.isString(message.muchaPlaceId))
                        return "muchaPlaceId: string expected";
                if (message.muchaPrefectureId != null && message.hasOwnProperty("muchaPrefectureId"))
                    if (!$util.isInteger(message.muchaPrefectureId))
                        return "muchaPrefectureId: integer expected";
                if (!$util.isString(message.regionName0))
                    return "regionName0: string expected";
                if (!$util.isString(message.regionName1))
                    return "regionName1: string expected";
                if (!$util.isString(message.regionName2))
                    return "regionName2: string expected";
                if (!$util.isString(message.regionName3))
                    return "regionName3: string expected";
                if (!$util.isInteger(message.timezoneOffset))
                    return "timezoneOffset: integer expected";
                {
                    let error = $root.v388.protobuf.SystemSetting.verify(message.systemSetting);
                    if (error)
                        return "systemSetting." + error;
                }
                if (message.errorLogs != null && message.hasOwnProperty("errorLogs")) {
                    if (!Array.isArray(message.errorLogs))
                        return "errorLogs: array expected";
                    for (let i = 0; i < message.errorLogs.length; ++i) {
                        let error = $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify(message.errorLogs[i]);
                        if (error)
                            return "errorLogs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RegisterSystemInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             */
            RegisterSystemInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterSystemInfoRequest)
                    return object;
                let message = new $root.v388.protobuf.RegisterSystemInfoRequest();
                if (object.pcbSerial != null)
                    message.pcbSerial = String(object.pcbSerial);
                switch (object.terminalType) {
                default:
                    if (typeof object.terminalType === "number") {
                        message.terminalType = object.terminalType;
                        break;
                    }
                    break;
                case "T_DRIVE":
                case 0:
                    message.terminalType = 0;
                    break;
                case "T_TERMINAL":
                case 1:
                    message.terminalType = 1;
                    break;
                }
                if (object.romVersion != null)
                    message.romVersion = object.romVersion >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                switch (object.lineType) {
                default:
                    if (typeof object.lineType === "number") {
                        message.lineType = object.lineType;
                        break;
                    }
                    break;
                case "L_UNKNOWN":
                case 0:
                    message.lineType = 0;
                    break;
                case "L_MOBILE":
                case 1:
                    message.lineType = 1;
                    break;
                case "L_ISDN":
                case 2:
                    message.lineType = 2;
                    break;
                case "L_BFLETS":
                case 3:
                    message.lineType = 3;
                    break;
                case "L_WIRED":
                case 4:
                    message.lineType = 4;
                    break;
                }
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.shopNickname != null)
                    message.shopNickname = String(object.shopNickname);
                if (object.allnetPlaceId != null)
                    message.allnetPlaceId = object.allnetPlaceId >>> 0;
                if (object.allnetRegion0 != null)
                    message.allnetRegion0 = object.allnetRegion0 >>> 0;
                if (object.muchaPlaceId != null)
                    message.muchaPlaceId = String(object.muchaPlaceId);
                if (object.muchaPrefectureId != null)
                    message.muchaPrefectureId = object.muchaPrefectureId >>> 0;
                if (object.regionName0 != null)
                    message.regionName0 = String(object.regionName0);
                if (object.regionName1 != null)
                    message.regionName1 = String(object.regionName1);
                if (object.regionName2 != null)
                    message.regionName2 = String(object.regionName2);
                if (object.regionName3 != null)
                    message.regionName3 = String(object.regionName3);
                if (object.timezoneOffset != null)
                    message.timezoneOffset = object.timezoneOffset | 0;
                if (object.systemSetting != null) {
                    if (typeof object.systemSetting !== "object")
                        throw TypeError(".v388.protobuf.RegisterSystemInfoRequest.systemSetting: object expected");
                    message.systemSetting = $root.v388.protobuf.SystemSetting.fromObject(object.systemSetting);
                }
                if (object.errorLogs) {
                    if (!Array.isArray(object.errorLogs))
                        throw TypeError(".v388.protobuf.RegisterSystemInfoRequest.errorLogs: array expected");
                    message.errorLogs = [];
                    for (let i = 0; i < object.errorLogs.length; ++i) {
                        if (typeof object.errorLogs[i] !== "object")
                            throw TypeError(".v388.protobuf.RegisterSystemInfoRequest.errorLogs: object expected");
                        message.errorLogs[i] = $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.fromObject(object.errorLogs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {v388.protobuf.RegisterSystemInfoRequest} message RegisterSystemInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.errorLogs = [];
                if (options.defaults) {
                    object.pcbSerial = "";
                    object.terminalType = options.enums === String ? "T_DRIVE" : 0;
                    object.romVersion = 0;
                    object.country = "";
                    object.lineType = options.enums === String ? "L_UNKNOWN" : 0;
                    object.shopName = "";
                    object.shopNickname = "";
                    object.allnetPlaceId = 0;
                    object.allnetRegion0 = 0;
                    object.muchaPlaceId = "";
                    object.muchaPrefectureId = 0;
                    object.regionName0 = "";
                    object.regionName1 = "";
                    object.regionName2 = "";
                    object.regionName3 = "";
                    object.timezoneOffset = 0;
                    object.systemSetting = null;
                }
                if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                    object.pcbSerial = message.pcbSerial;
                if (message.terminalType != null && message.hasOwnProperty("terminalType"))
                    object.terminalType = options.enums === String ? $root.v388.protobuf.TerminalType[message.terminalType] === undefined ? message.terminalType : $root.v388.protobuf.TerminalType[message.terminalType] : message.terminalType;
                if (message.romVersion != null && message.hasOwnProperty("romVersion"))
                    object.romVersion = message.romVersion;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                if (message.lineType != null && message.hasOwnProperty("lineType"))
                    object.lineType = options.enums === String ? $root.v388.protobuf.LineType[message.lineType] === undefined ? message.lineType : $root.v388.protobuf.LineType[message.lineType] : message.lineType;
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.shopNickname != null && message.hasOwnProperty("shopNickname"))
                    object.shopNickname = message.shopNickname;
                if (message.allnetPlaceId != null && message.hasOwnProperty("allnetPlaceId"))
                    object.allnetPlaceId = message.allnetPlaceId;
                if (message.allnetRegion0 != null && message.hasOwnProperty("allnetRegion0"))
                    object.allnetRegion0 = message.allnetRegion0;
                if (message.muchaPlaceId != null && message.hasOwnProperty("muchaPlaceId"))
                    object.muchaPlaceId = message.muchaPlaceId;
                if (message.muchaPrefectureId != null && message.hasOwnProperty("muchaPrefectureId"))
                    object.muchaPrefectureId = message.muchaPrefectureId;
                if (message.regionName0 != null && message.hasOwnProperty("regionName0"))
                    object.regionName0 = message.regionName0;
                if (message.regionName1 != null && message.hasOwnProperty("regionName1"))
                    object.regionName1 = message.regionName1;
                if (message.regionName2 != null && message.hasOwnProperty("regionName2"))
                    object.regionName2 = message.regionName2;
                if (message.regionName3 != null && message.hasOwnProperty("regionName3"))
                    object.regionName3 = message.regionName3;
                if (message.timezoneOffset != null && message.hasOwnProperty("timezoneOffset"))
                    object.timezoneOffset = message.timezoneOffset;
                if (message.systemSetting != null && message.hasOwnProperty("systemSetting"))
                    object.systemSetting = $root.v388.protobuf.SystemSetting.toObject(message.systemSetting, options);
                if (message.errorLogs && message.errorLogs.length) {
                    object.errorLogs = [];
                    for (let j = 0; j < message.errorLogs.length; ++j)
                        object.errorLogs[j] = $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.toObject(message.errorLogs[j], options);
                }
                return object;
            };

            /**
             * Converts this RegisterSystemInfoRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemInfoRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterSystemInfoRequest";
            };

            RegisterSystemInfoRequest.ErrorLogEntry = (function() {

                /**
                 * Properties of an ErrorLogEntry.
                 * @memberof v388.protobuf.RegisterSystemInfoRequest
                 * @interface IErrorLogEntry
                 * @property {number} datetime ErrorLogEntry datetime
                 * @property {string} message ErrorLogEntry message
                 */

                /**
                 * Constructs a new ErrorLogEntry.
                 * @memberof v388.protobuf.RegisterSystemInfoRequest
                 * @classdesc Represents an ErrorLogEntry.
                 * @implements IErrorLogEntry
                 * @constructor
                 * @param {v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry=} [properties] Properties to set
                 */
                function ErrorLogEntry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ErrorLogEntry datetime.
                 * @member {number} datetime
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 */
                ErrorLogEntry.prototype.datetime = 0;

                /**
                 * ErrorLogEntry message.
                 * @member {string} message
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 */
                ErrorLogEntry.prototype.message = "";

                /**
                 * Creates a new ErrorLogEntry instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry=} [properties] Properties to set
                 * @returns {v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry instance
                 */
                ErrorLogEntry.create = function create(properties) {
                    return new ErrorLogEntry(properties);
                };

                /**
                 * Encodes the specified ErrorLogEntry message. Does not implicitly {@link v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry} message ErrorLogEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorLogEntry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.datetime);
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    return writer;
                };

                /**
                 * Encodes the specified ErrorLogEntry message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {v388.protobuf.RegisterSystemInfoRequest.IErrorLogEntry} message ErrorLogEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorLogEntry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ErrorLogEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorLogEntry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.datetime = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("datetime"))
                        throw $util.ProtocolError("missing required 'datetime'", { instance: message });
                    if (!message.hasOwnProperty("message"))
                        throw $util.ProtocolError("missing required 'message'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an ErrorLogEntry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorLogEntry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ErrorLogEntry message.
                 * @function verify
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ErrorLogEntry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.datetime))
                        return "datetime: integer expected";
                    if (!$util.isString(message.message))
                        return "message: string expected";
                    return null;
                };

                /**
                 * Creates an ErrorLogEntry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 */
                ErrorLogEntry.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry)
                        return object;
                    let message = new $root.v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry();
                    if (object.datetime != null)
                        message.datetime = object.datetime >>> 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };

                /**
                 * Creates a plain object from an ErrorLogEntry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} message ErrorLogEntry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ErrorLogEntry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.datetime = 0;
                        object.message = "";
                    }
                    if (message.datetime != null && message.hasOwnProperty("datetime"))
                        object.datetime = message.datetime;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };

                /**
                 * Converts this ErrorLogEntry to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ErrorLogEntry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ErrorLogEntry
                 * @function getTypeUrl
                 * @memberof v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ErrorLogEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.RegisterSystemInfoRequest.ErrorLogEntry";
                };

                return ErrorLogEntry;
            })();

            return RegisterSystemInfoRequest;
        })();

        protobuf.RegisterSystemInfoResponse = (function() {

            /**
             * Properties of a RegisterSystemInfoResponse.
             * @memberof v388.protobuf
             * @interface IRegisterSystemInfoResponse
             * @property {v388.protobuf.ErrorCode} error RegisterSystemInfoResponse error
             * @property {number} regionId RegisterSystemInfoResponse regionId
             * @property {string} placeId RegisterSystemInfoResponse placeId
             * @property {number} pajeroDiscloseAt RegisterSystemInfoResponse pajeroDiscloseAt
             * @property {number} carCampaignStartAt RegisterSystemInfoResponse carCampaignStartAt
             * @property {number} carCampaignEndAt RegisterSystemInfoResponse carCampaignEndAt
             * @property {number} teamSuspensionAnnouncementStartAt RegisterSystemInfoResponse teamSuspensionAnnouncementStartAt
             * @property {number} teamSuspensionStartAt RegisterSystemInfoResponse teamSuspensionStartAt
             * @property {number} successionCloseAnnouncementStartAt RegisterSystemInfoResponse successionCloseAnnouncementStartAt
             * @property {number} successionCloseAt RegisterSystemInfoResponse successionCloseAt
             * @property {number} successionCloseAnnouncementEndAt RegisterSystemInfoResponse successionCloseAnnouncementEndAt
             * @property {boolean} faceRecognitionPermitted RegisterSystemInfoResponse faceRecognitionPermitted
             * @property {number|null} [latestCompetitionId] RegisterSystemInfoResponse latestCompetitionId
             * @property {v388.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] RegisterSystemInfoResponse competitionSchedule
             */

            /**
             * Constructs a new RegisterSystemInfoResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterSystemInfoResponse.
             * @implements IRegisterSystemInfoResponse
             * @constructor
             * @param {v388.protobuf.IRegisterSystemInfoResponse=} [properties] Properties to set
             */
            function RegisterSystemInfoResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemInfoResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.error = 0;

            /**
             * RegisterSystemInfoResponse regionId.
             * @member {number} regionId
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.regionId = 0;

            /**
             * RegisterSystemInfoResponse placeId.
             * @member {string} placeId
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.placeId = "";

            /**
             * RegisterSystemInfoResponse pajeroDiscloseAt.
             * @member {number} pajeroDiscloseAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.pajeroDiscloseAt = 0;

            /**
             * RegisterSystemInfoResponse carCampaignStartAt.
             * @member {number} carCampaignStartAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.carCampaignStartAt = 0;

            /**
             * RegisterSystemInfoResponse carCampaignEndAt.
             * @member {number} carCampaignEndAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.carCampaignEndAt = 0;

            /**
             * RegisterSystemInfoResponse teamSuspensionAnnouncementStartAt.
             * @member {number} teamSuspensionAnnouncementStartAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.teamSuspensionAnnouncementStartAt = 0;

            /**
             * RegisterSystemInfoResponse teamSuspensionStartAt.
             * @member {number} teamSuspensionStartAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.teamSuspensionStartAt = 0;

            /**
             * RegisterSystemInfoResponse successionCloseAnnouncementStartAt.
             * @member {number} successionCloseAnnouncementStartAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.successionCloseAnnouncementStartAt = 0;

            /**
             * RegisterSystemInfoResponse successionCloseAt.
             * @member {number} successionCloseAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.successionCloseAt = 0;

            /**
             * RegisterSystemInfoResponse successionCloseAnnouncementEndAt.
             * @member {number} successionCloseAnnouncementEndAt
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.successionCloseAnnouncementEndAt = 0;

            /**
             * RegisterSystemInfoResponse faceRecognitionPermitted.
             * @member {boolean} faceRecognitionPermitted
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.faceRecognitionPermitted = false;

            /**
             * RegisterSystemInfoResponse latestCompetitionId.
             * @member {number} latestCompetitionId
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.latestCompetitionId = 0;

            /**
             * RegisterSystemInfoResponse competitionSchedule.
             * @member {v388.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.competitionSchedule = null;

            /**
             * Creates a new RegisterSystemInfoResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoResponse=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse instance
             */
            RegisterSystemInfoResponse.create = function create(properties) {
                return new RegisterSystemInfoResponse(properties);
            };

            /**
             * Encodes the specified RegisterSystemInfoResponse message. Does not implicitly {@link v388.protobuf.RegisterSystemInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoResponse} message RegisterSystemInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.regionId);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pajeroDiscloseAt);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.carCampaignStartAt);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.carCampaignEndAt);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.teamSuspensionAnnouncementStartAt);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.teamSuspensionStartAt);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.successionCloseAnnouncementStartAt);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.successionCloseAt);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.successionCloseAnnouncementEndAt);
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.faceRecognitionPermitted);
                if (message.latestCompetitionId != null && Object.hasOwnProperty.call(message, "latestCompetitionId"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.latestCompetitionId);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.v388.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemInfoResponse message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemInfoResponse} message RegisterSystemInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 4: {
                            message.pajeroDiscloseAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.carCampaignStartAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.carCampaignEndAt = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.teamSuspensionAnnouncementStartAt = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.teamSuspensionStartAt = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.successionCloseAnnouncementStartAt = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.successionCloseAt = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.successionCloseAnnouncementEndAt = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.faceRecognitionPermitted = reader.bool();
                            break;
                        }
                    case 13: {
                            message.latestCompetitionId = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("regionId"))
                    throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("pajeroDiscloseAt"))
                    throw $util.ProtocolError("missing required 'pajeroDiscloseAt'", { instance: message });
                if (!message.hasOwnProperty("carCampaignStartAt"))
                    throw $util.ProtocolError("missing required 'carCampaignStartAt'", { instance: message });
                if (!message.hasOwnProperty("carCampaignEndAt"))
                    throw $util.ProtocolError("missing required 'carCampaignEndAt'", { instance: message });
                if (!message.hasOwnProperty("teamSuspensionAnnouncementStartAt"))
                    throw $util.ProtocolError("missing required 'teamSuspensionAnnouncementStartAt'", { instance: message });
                if (!message.hasOwnProperty("teamSuspensionStartAt"))
                    throw $util.ProtocolError("missing required 'teamSuspensionStartAt'", { instance: message });
                if (!message.hasOwnProperty("successionCloseAnnouncementStartAt"))
                    throw $util.ProtocolError("missing required 'successionCloseAnnouncementStartAt'", { instance: message });
                if (!message.hasOwnProperty("successionCloseAt"))
                    throw $util.ProtocolError("missing required 'successionCloseAt'", { instance: message });
                if (!message.hasOwnProperty("successionCloseAnnouncementEndAt"))
                    throw $util.ProtocolError("missing required 'successionCloseAnnouncementEndAt'", { instance: message });
                if (!message.hasOwnProperty("faceRecognitionPermitted"))
                    throw $util.ProtocolError("missing required 'faceRecognitionPermitted'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemInfoResponse message.
             * @function verify
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.regionId))
                    return "regionId: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (!$util.isInteger(message.pajeroDiscloseAt))
                    return "pajeroDiscloseAt: integer expected";
                if (!$util.isInteger(message.carCampaignStartAt))
                    return "carCampaignStartAt: integer expected";
                if (!$util.isInteger(message.carCampaignEndAt))
                    return "carCampaignEndAt: integer expected";
                if (!$util.isInteger(message.teamSuspensionAnnouncementStartAt))
                    return "teamSuspensionAnnouncementStartAt: integer expected";
                if (!$util.isInteger(message.teamSuspensionStartAt))
                    return "teamSuspensionStartAt: integer expected";
                if (!$util.isInteger(message.successionCloseAnnouncementStartAt))
                    return "successionCloseAnnouncementStartAt: integer expected";
                if (!$util.isInteger(message.successionCloseAt))
                    return "successionCloseAt: integer expected";
                if (!$util.isInteger(message.successionCloseAnnouncementEndAt))
                    return "successionCloseAnnouncementEndAt: integer expected";
                if (typeof message.faceRecognitionPermitted !== "boolean")
                    return "faceRecognitionPermitted: boolean expected";
                if (message.latestCompetitionId != null && message.hasOwnProperty("latestCompetitionId"))
                    if (!$util.isInteger(message.latestCompetitionId))
                        return "latestCompetitionId: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.v388.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             */
            RegisterSystemInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterSystemInfoResponse)
                    return object;
                let message = new $root.v388.protobuf.RegisterSystemInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.pajeroDiscloseAt != null)
                    message.pajeroDiscloseAt = object.pajeroDiscloseAt >>> 0;
                if (object.carCampaignStartAt != null)
                    message.carCampaignStartAt = object.carCampaignStartAt >>> 0;
                if (object.carCampaignEndAt != null)
                    message.carCampaignEndAt = object.carCampaignEndAt >>> 0;
                if (object.teamSuspensionAnnouncementStartAt != null)
                    message.teamSuspensionAnnouncementStartAt = object.teamSuspensionAnnouncementStartAt >>> 0;
                if (object.teamSuspensionStartAt != null)
                    message.teamSuspensionStartAt = object.teamSuspensionStartAt >>> 0;
                if (object.successionCloseAnnouncementStartAt != null)
                    message.successionCloseAnnouncementStartAt = object.successionCloseAnnouncementStartAt >>> 0;
                if (object.successionCloseAt != null)
                    message.successionCloseAt = object.successionCloseAt >>> 0;
                if (object.successionCloseAnnouncementEndAt != null)
                    message.successionCloseAnnouncementEndAt = object.successionCloseAnnouncementEndAt >>> 0;
                if (object.faceRecognitionPermitted != null)
                    message.faceRecognitionPermitted = Boolean(object.faceRecognitionPermitted);
                if (object.latestCompetitionId != null)
                    message.latestCompetitionId = object.latestCompetitionId >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".v388.protobuf.RegisterSystemInfoResponse.competitionSchedule: object expected");
                    message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {v388.protobuf.RegisterSystemInfoResponse} message RegisterSystemInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.regionId = 0;
                    object.placeId = "";
                    object.pajeroDiscloseAt = 0;
                    object.carCampaignStartAt = 0;
                    object.carCampaignEndAt = 0;
                    object.teamSuspensionAnnouncementStartAt = 0;
                    object.teamSuspensionStartAt = 0;
                    object.successionCloseAnnouncementStartAt = 0;
                    object.successionCloseAt = 0;
                    object.successionCloseAnnouncementEndAt = 0;
                    object.faceRecognitionPermitted = false;
                    object.latestCompetitionId = 0;
                    object.competitionSchedule = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.pajeroDiscloseAt != null && message.hasOwnProperty("pajeroDiscloseAt"))
                    object.pajeroDiscloseAt = message.pajeroDiscloseAt;
                if (message.carCampaignStartAt != null && message.hasOwnProperty("carCampaignStartAt"))
                    object.carCampaignStartAt = message.carCampaignStartAt;
                if (message.carCampaignEndAt != null && message.hasOwnProperty("carCampaignEndAt"))
                    object.carCampaignEndAt = message.carCampaignEndAt;
                if (message.teamSuspensionAnnouncementStartAt != null && message.hasOwnProperty("teamSuspensionAnnouncementStartAt"))
                    object.teamSuspensionAnnouncementStartAt = message.teamSuspensionAnnouncementStartAt;
                if (message.teamSuspensionStartAt != null && message.hasOwnProperty("teamSuspensionStartAt"))
                    object.teamSuspensionStartAt = message.teamSuspensionStartAt;
                if (message.successionCloseAnnouncementStartAt != null && message.hasOwnProperty("successionCloseAnnouncementStartAt"))
                    object.successionCloseAnnouncementStartAt = message.successionCloseAnnouncementStartAt;
                if (message.successionCloseAt != null && message.hasOwnProperty("successionCloseAt"))
                    object.successionCloseAt = message.successionCloseAt;
                if (message.successionCloseAnnouncementEndAt != null && message.hasOwnProperty("successionCloseAnnouncementEndAt"))
                    object.successionCloseAnnouncementEndAt = message.successionCloseAnnouncementEndAt;
                if (message.faceRecognitionPermitted != null && message.hasOwnProperty("faceRecognitionPermitted"))
                    object.faceRecognitionPermitted = message.faceRecognitionPermitted;
                if (message.latestCompetitionId != null && message.hasOwnProperty("latestCompetitionId"))
                    object.latestCompetitionId = message.latestCompetitionId;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                return object;
            };

            /**
             * Converts this RegisterSystemInfoResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemInfoResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterSystemInfoResponse";
            };

            return RegisterSystemInfoResponse;
        })();

        protobuf.RegisterSystemStatsRequest = (function() {

            /**
             * Properties of a RegisterSystemStatsRequest.
             * @memberof v388.protobuf
             * @interface IRegisterSystemStatsRequest
             * @property {string} pcbSerial RegisterSystemStatsRequest pcbSerial
             * @property {v388.protobuf.RegisterSystemStatsRequest.IDriveStats|null} [driveStats] RegisterSystemStatsRequest driveStats
             * @property {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats|null} [terminalStats] RegisterSystemStatsRequest terminalStats
             */

            /**
             * Constructs a new RegisterSystemStatsRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterSystemStatsRequest.
             * @implements IRegisterSystemStatsRequest
             * @constructor
             * @param {v388.protobuf.IRegisterSystemStatsRequest=} [properties] Properties to set
             */
            function RegisterSystemStatsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemStatsRequest pcbSerial.
             * @member {string} pcbSerial
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.pcbSerial = "";

            /**
             * RegisterSystemStatsRequest driveStats.
             * @member {v388.protobuf.RegisterSystemStatsRequest.IDriveStats|null|undefined} driveStats
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.driveStats = null;

            /**
             * RegisterSystemStatsRequest terminalStats.
             * @member {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats|null|undefined} terminalStats
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.terminalStats = null;

            /**
             * Creates a new RegisterSystemStatsRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsRequest=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest instance
             */
            RegisterSystemStatsRequest.create = function create(properties) {
                return new RegisterSystemStatsRequest(properties);
            };

            /**
             * Encodes the specified RegisterSystemStatsRequest message. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsRequest} message RegisterSystemStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pcbSerial);
                if (message.driveStats != null && Object.hasOwnProperty.call(message, "driveStats"))
                    $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats.encode(message.driveStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.terminalStats != null && Object.hasOwnProperty.call(message, "terminalStats"))
                    $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats.encode(message.terminalStats, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemStatsRequest message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsRequest} message RegisterSystemStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemStatsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemStatsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pcbSerial = reader.string();
                            break;
                        }
                    case 2: {
                            message.driveStats = $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.terminalStats = $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("pcbSerial"))
                    throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemStatsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemStatsRequest message.
             * @function verify
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemStatsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.pcbSerial))
                    return "pcbSerial: string expected";
                if (message.driveStats != null && message.hasOwnProperty("driveStats")) {
                    let error = $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats.verify(message.driveStats);
                    if (error)
                        return "driveStats." + error;
                }
                if (message.terminalStats != null && message.hasOwnProperty("terminalStats")) {
                    let error = $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats.verify(message.terminalStats);
                    if (error)
                        return "terminalStats." + error;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemStatsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             */
            RegisterSystemStatsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterSystemStatsRequest)
                    return object;
                let message = new $root.v388.protobuf.RegisterSystemStatsRequest();
                if (object.pcbSerial != null)
                    message.pcbSerial = String(object.pcbSerial);
                if (object.driveStats != null) {
                    if (typeof object.driveStats !== "object")
                        throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.driveStats: object expected");
                    message.driveStats = $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats.fromObject(object.driveStats);
                }
                if (object.terminalStats != null) {
                    if (typeof object.terminalStats !== "object")
                        throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.terminalStats: object expected");
                    message.terminalStats = $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats.fromObject(object.terminalStats);
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemStatsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {v388.protobuf.RegisterSystemStatsRequest} message RegisterSystemStatsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemStatsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pcbSerial = "";
                    object.driveStats = null;
                    object.terminalStats = null;
                }
                if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                    object.pcbSerial = message.pcbSerial;
                if (message.driveStats != null && message.hasOwnProperty("driveStats"))
                    object.driveStats = $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats.toObject(message.driveStats, options);
                if (message.terminalStats != null && message.hasOwnProperty("terminalStats"))
                    object.terminalStats = $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats.toObject(message.terminalStats, options);
                return object;
            };

            /**
             * Converts this RegisterSystemStatsRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemStatsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemStatsRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemStatsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterSystemStatsRequest";
            };

            RegisterSystemStatsRequest.DriveStats = (function() {

                /**
                 * Properties of a DriveStats.
                 * @memberof v388.protobuf.RegisterSystemStatsRequest
                 * @interface IDriveStats
                 * @property {Array.<number>|null} [operation] DriveStats operation
                 * @property {Array.<number>|null} [story] DriveStats story
                 * @property {Array.<number>|null} [versus] DriveStats versus
                 * @property {Array.<number>|null} [ghost] DriveStats ghost
                 * @property {Array.<number>|null} [timeAttack] DriveStats timeAttack
                 * @property {Array.<number>|null} [event] DriveStats event
                 * @property {Array.<number>|null} [ghostSelection] DriveStats ghostSelection
                 */

                /**
                 * Constructs a new DriveStats.
                 * @memberof v388.protobuf.RegisterSystemStatsRequest
                 * @classdesc Represents a DriveStats.
                 * @implements IDriveStats
                 * @constructor
                 * @param {v388.protobuf.RegisterSystemStatsRequest.IDriveStats=} [properties] Properties to set
                 */
                function DriveStats(properties) {
                    this.operation = [];
                    this.story = [];
                    this.versus = [];
                    this.ghost = [];
                    this.timeAttack = [];
                    this.event = [];
                    this.ghostSelection = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DriveStats operation.
                 * @member {Array.<number>} operation
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.operation = $util.emptyArray;

                /**
                 * DriveStats story.
                 * @member {Array.<number>} story
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.story = $util.emptyArray;

                /**
                 * DriveStats versus.
                 * @member {Array.<number>} versus
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.versus = $util.emptyArray;

                /**
                 * DriveStats ghost.
                 * @member {Array.<number>} ghost
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.ghost = $util.emptyArray;

                /**
                 * DriveStats timeAttack.
                 * @member {Array.<number>} timeAttack
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.timeAttack = $util.emptyArray;

                /**
                 * DriveStats event.
                 * @member {Array.<number>} event
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.event = $util.emptyArray;

                /**
                 * DriveStats ghostSelection.
                 * @member {Array.<number>} ghostSelection
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.ghostSelection = $util.emptyArray;

                /**
                 * Creates a new DriveStats instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.IDriveStats=} [properties] Properties to set
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats instance
                 */
                DriveStats.create = function create(properties) {
                    return new DriveStats(properties);
                };

                /**
                 * Encodes the specified DriveStats message. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.DriveStats.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.IDriveStats} message DriveStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DriveStats.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operation != null && message.operation.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.operation.length; ++i)
                            writer.uint32(message.operation[i]);
                        writer.ldelim();
                    }
                    if (message.story != null && message.story.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.story.length; ++i)
                            writer.uint32(message.story[i]);
                        writer.ldelim();
                    }
                    if (message.versus != null && message.versus.length) {
                        writer.uint32(/* id 3, wireType 2 =*/26).fork();
                        for (let i = 0; i < message.versus.length; ++i)
                            writer.uint32(message.versus[i]);
                        writer.ldelim();
                    }
                    if (message.ghost != null && message.ghost.length) {
                        writer.uint32(/* id 4, wireType 2 =*/34).fork();
                        for (let i = 0; i < message.ghost.length; ++i)
                            writer.uint32(message.ghost[i]);
                        writer.ldelim();
                    }
                    if (message.timeAttack != null && message.timeAttack.length) {
                        writer.uint32(/* id 5, wireType 2 =*/42).fork();
                        for (let i = 0; i < message.timeAttack.length; ++i)
                            writer.uint32(message.timeAttack[i]);
                        writer.ldelim();
                    }
                    if (message.event != null && message.event.length) {
                        writer.uint32(/* id 6, wireType 2 =*/50).fork();
                        for (let i = 0; i < message.event.length; ++i)
                            writer.uint32(message.event[i]);
                        writer.ldelim();
                    }
                    if (message.ghostSelection != null && message.ghostSelection.length) {
                        writer.uint32(/* id 7, wireType 2 =*/58).fork();
                        for (let i = 0; i < message.ghostSelection.length; ++i)
                            writer.uint32(message.ghostSelection[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified DriveStats message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.DriveStats.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.IDriveStats} message DriveStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DriveStats.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DriveStats message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DriveStats.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operation && message.operation.length))
                                    message.operation = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.operation.push(reader.uint32());
                                } else
                                    message.operation.push(reader.uint32());
                                break;
                            }
                        case 2: {
                                if (!(message.story && message.story.length))
                                    message.story = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.story.push(reader.uint32());
                                } else
                                    message.story.push(reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.versus && message.versus.length))
                                    message.versus = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.versus.push(reader.uint32());
                                } else
                                    message.versus.push(reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.ghost && message.ghost.length))
                                    message.ghost = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.ghost.push(reader.uint32());
                                } else
                                    message.ghost.push(reader.uint32());
                                break;
                            }
                        case 5: {
                                if (!(message.timeAttack && message.timeAttack.length))
                                    message.timeAttack = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.timeAttack.push(reader.uint32());
                                } else
                                    message.timeAttack.push(reader.uint32());
                                break;
                            }
                        case 6: {
                                if (!(message.event && message.event.length))
                                    message.event = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.event.push(reader.uint32());
                                } else
                                    message.event.push(reader.uint32());
                                break;
                            }
                        case 7: {
                                if (!(message.ghostSelection && message.ghostSelection.length))
                                    message.ghostSelection = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.ghostSelection.push(reader.uint32());
                                } else
                                    message.ghostSelection.push(reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DriveStats message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DriveStats.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DriveStats message.
                 * @function verify
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DriveStats.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operation != null && message.hasOwnProperty("operation")) {
                        if (!Array.isArray(message.operation))
                            return "operation: array expected";
                        for (let i = 0; i < message.operation.length; ++i)
                            if (!$util.isInteger(message.operation[i]))
                                return "operation: integer[] expected";
                    }
                    if (message.story != null && message.hasOwnProperty("story")) {
                        if (!Array.isArray(message.story))
                            return "story: array expected";
                        for (let i = 0; i < message.story.length; ++i)
                            if (!$util.isInteger(message.story[i]))
                                return "story: integer[] expected";
                    }
                    if (message.versus != null && message.hasOwnProperty("versus")) {
                        if (!Array.isArray(message.versus))
                            return "versus: array expected";
                        for (let i = 0; i < message.versus.length; ++i)
                            if (!$util.isInteger(message.versus[i]))
                                return "versus: integer[] expected";
                    }
                    if (message.ghost != null && message.hasOwnProperty("ghost")) {
                        if (!Array.isArray(message.ghost))
                            return "ghost: array expected";
                        for (let i = 0; i < message.ghost.length; ++i)
                            if (!$util.isInteger(message.ghost[i]))
                                return "ghost: integer[] expected";
                    }
                    if (message.timeAttack != null && message.hasOwnProperty("timeAttack")) {
                        if (!Array.isArray(message.timeAttack))
                            return "timeAttack: array expected";
                        for (let i = 0; i < message.timeAttack.length; ++i)
                            if (!$util.isInteger(message.timeAttack[i]))
                                return "timeAttack: integer[] expected";
                    }
                    if (message.event != null && message.hasOwnProperty("event")) {
                        if (!Array.isArray(message.event))
                            return "event: array expected";
                        for (let i = 0; i < message.event.length; ++i)
                            if (!$util.isInteger(message.event[i]))
                                return "event: integer[] expected";
                    }
                    if (message.ghostSelection != null && message.hasOwnProperty("ghostSelection")) {
                        if (!Array.isArray(message.ghostSelection))
                            return "ghostSelection: array expected";
                        for (let i = 0; i < message.ghostSelection.length; ++i)
                            if (!$util.isInteger(message.ghostSelection[i]))
                                return "ghostSelection: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DriveStats message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 */
                DriveStats.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats)
                        return object;
                    let message = new $root.v388.protobuf.RegisterSystemStatsRequest.DriveStats();
                    if (object.operation) {
                        if (!Array.isArray(object.operation))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.operation: array expected");
                        message.operation = [];
                        for (let i = 0; i < object.operation.length; ++i)
                            message.operation[i] = object.operation[i] >>> 0;
                    }
                    if (object.story) {
                        if (!Array.isArray(object.story))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.story: array expected");
                        message.story = [];
                        for (let i = 0; i < object.story.length; ++i)
                            message.story[i] = object.story[i] >>> 0;
                    }
                    if (object.versus) {
                        if (!Array.isArray(object.versus))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.versus: array expected");
                        message.versus = [];
                        for (let i = 0; i < object.versus.length; ++i)
                            message.versus[i] = object.versus[i] >>> 0;
                    }
                    if (object.ghost) {
                        if (!Array.isArray(object.ghost))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.ghost: array expected");
                        message.ghost = [];
                        for (let i = 0; i < object.ghost.length; ++i)
                            message.ghost[i] = object.ghost[i] >>> 0;
                    }
                    if (object.timeAttack) {
                        if (!Array.isArray(object.timeAttack))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.timeAttack: array expected");
                        message.timeAttack = [];
                        for (let i = 0; i < object.timeAttack.length; ++i)
                            message.timeAttack[i] = object.timeAttack[i] >>> 0;
                    }
                    if (object.event) {
                        if (!Array.isArray(object.event))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.event: array expected");
                        message.event = [];
                        for (let i = 0; i < object.event.length; ++i)
                            message.event[i] = object.event[i] >>> 0;
                    }
                    if (object.ghostSelection) {
                        if (!Array.isArray(object.ghostSelection))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.DriveStats.ghostSelection: array expected");
                        message.ghostSelection = [];
                        for (let i = 0; i < object.ghostSelection.length; ++i)
                            message.ghostSelection[i] = object.ghostSelection[i] >>> 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DriveStats message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.DriveStats} message DriveStats
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DriveStats.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.operation = [];
                        object.story = [];
                        object.versus = [];
                        object.ghost = [];
                        object.timeAttack = [];
                        object.event = [];
                        object.ghostSelection = [];
                    }
                    if (message.operation && message.operation.length) {
                        object.operation = [];
                        for (let j = 0; j < message.operation.length; ++j)
                            object.operation[j] = message.operation[j];
                    }
                    if (message.story && message.story.length) {
                        object.story = [];
                        for (let j = 0; j < message.story.length; ++j)
                            object.story[j] = message.story[j];
                    }
                    if (message.versus && message.versus.length) {
                        object.versus = [];
                        for (let j = 0; j < message.versus.length; ++j)
                            object.versus[j] = message.versus[j];
                    }
                    if (message.ghost && message.ghost.length) {
                        object.ghost = [];
                        for (let j = 0; j < message.ghost.length; ++j)
                            object.ghost[j] = message.ghost[j];
                    }
                    if (message.timeAttack && message.timeAttack.length) {
                        object.timeAttack = [];
                        for (let j = 0; j < message.timeAttack.length; ++j)
                            object.timeAttack[j] = message.timeAttack[j];
                    }
                    if (message.event && message.event.length) {
                        object.event = [];
                        for (let j = 0; j < message.event.length; ++j)
                            object.event[j] = message.event[j];
                    }
                    if (message.ghostSelection && message.ghostSelection.length) {
                        object.ghostSelection = [];
                        for (let j = 0; j < message.ghostSelection.length; ++j)
                            object.ghostSelection[j] = message.ghostSelection[j];
                    }
                    return object;
                };

                /**
                 * Converts this DriveStats to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DriveStats.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for DriveStats
                 * @function getTypeUrl
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DriveStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.RegisterSystemStatsRequest.DriveStats";
                };

                return DriveStats;
            })();

            RegisterSystemStatsRequest.TerminalStats = (function() {

                /**
                 * Properties of a TerminalStats.
                 * @memberof v388.protobuf.RegisterSystemStatsRequest
                 * @interface ITerminalStats
                 * @property {Array.<number>|null} [operation] TerminalStats operation
                 */

                /**
                 * Constructs a new TerminalStats.
                 * @memberof v388.protobuf.RegisterSystemStatsRequest
                 * @classdesc Represents a TerminalStats.
                 * @implements ITerminalStats
                 * @constructor
                 * @param {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats=} [properties] Properties to set
                 */
                function TerminalStats(properties) {
                    this.operation = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TerminalStats operation.
                 * @member {Array.<number>} operation
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @instance
                 */
                TerminalStats.prototype.operation = $util.emptyArray;

                /**
                 * Creates a new TerminalStats instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats=} [properties] Properties to set
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats instance
                 */
                TerminalStats.create = function create(properties) {
                    return new TerminalStats(properties);
                };

                /**
                 * Encodes the specified TerminalStats message. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.TerminalStats.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats} message TerminalStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalStats.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operation != null && message.operation.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.operation.length; ++i)
                            writer.uint32(message.operation[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified TerminalStats message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemStatsRequest.TerminalStats.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.ITerminalStats} message TerminalStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalStats.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TerminalStats message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalStats.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operation && message.operation.length))
                                    message.operation = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.operation.push(reader.uint32());
                                } else
                                    message.operation.push(reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TerminalStats message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalStats.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TerminalStats message.
                 * @function verify
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TerminalStats.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operation != null && message.hasOwnProperty("operation")) {
                        if (!Array.isArray(message.operation))
                            return "operation: array expected";
                        for (let i = 0; i < message.operation.length; ++i)
                            if (!$util.isInteger(message.operation[i]))
                                return "operation: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a TerminalStats message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 */
                TerminalStats.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats)
                        return object;
                    let message = new $root.v388.protobuf.RegisterSystemStatsRequest.TerminalStats();
                    if (object.operation) {
                        if (!Array.isArray(object.operation))
                            throw TypeError(".v388.protobuf.RegisterSystemStatsRequest.TerminalStats.operation: array expected");
                        message.operation = [];
                        for (let i = 0; i < object.operation.length; ++i)
                            message.operation[i] = object.operation[i] >>> 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a TerminalStats message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {v388.protobuf.RegisterSystemStatsRequest.TerminalStats} message TerminalStats
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TerminalStats.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.operation = [];
                    if (message.operation && message.operation.length) {
                        object.operation = [];
                        for (let j = 0; j < message.operation.length; ++j)
                            object.operation[j] = message.operation[j];
                    }
                    return object;
                };

                /**
                 * Converts this TerminalStats to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TerminalStats.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TerminalStats
                 * @function getTypeUrl
                 * @memberof v388.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TerminalStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.RegisterSystemStatsRequest.TerminalStats";
                };

                return TerminalStats;
            })();

            return RegisterSystemStatsRequest;
        })();

        protobuf.RegisterSystemStatsResponse = (function() {

            /**
             * Properties of a RegisterSystemStatsResponse.
             * @memberof v388.protobuf
             * @interface IRegisterSystemStatsResponse
             * @property {v388.protobuf.ErrorCode} error RegisterSystemStatsResponse error
             */

            /**
             * Constructs a new RegisterSystemStatsResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterSystemStatsResponse.
             * @implements IRegisterSystemStatsResponse
             * @constructor
             * @param {v388.protobuf.IRegisterSystemStatsResponse=} [properties] Properties to set
             */
            function RegisterSystemStatsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemStatsResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @instance
             */
            RegisterSystemStatsResponse.prototype.error = 0;

            /**
             * Creates a new RegisterSystemStatsResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsResponse=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse instance
             */
            RegisterSystemStatsResponse.create = function create(properties) {
                return new RegisterSystemStatsResponse(properties);
            };

            /**
             * Encodes the specified RegisterSystemStatsResponse message. Does not implicitly {@link v388.protobuf.RegisterSystemStatsResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsResponse} message RegisterSystemStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemStatsResponse message, length delimited. Does not implicitly {@link v388.protobuf.RegisterSystemStatsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {v388.protobuf.IRegisterSystemStatsResponse} message RegisterSystemStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemStatsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterSystemStatsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemStatsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemStatsResponse message.
             * @function verify
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemStatsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemStatsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             */
            RegisterSystemStatsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterSystemStatsResponse)
                    return object;
                let message = new $root.v388.protobuf.RegisterSystemStatsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemStatsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {v388.protobuf.RegisterSystemStatsResponse} message RegisterSystemStatsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemStatsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterSystemStatsResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemStatsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemStatsResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemStatsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterSystemStatsResponse";
            };

            return RegisterSystemStatsResponse;
        })();

        protobuf.RegisterGhostTrailRequest = (function() {

            /**
             * Properties of a RegisterGhostTrailRequest.
             * @memberof v388.protobuf
             * @interface IRegisterGhostTrailRequest
             * @property {number|Long} ghostSessionId RegisterGhostTrailRequest ghostSessionId
             * @property {v388.protobuf.IGhostCar} ghost RegisterGhostTrailRequest ghost
             * @property {Uint8Array} trail RegisterGhostTrailRequest trail
             */

            /**
             * Constructs a new RegisterGhostTrailRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterGhostTrailRequest.
             * @implements IRegisterGhostTrailRequest
             * @constructor
             * @param {v388.protobuf.IRegisterGhostTrailRequest=} [properties] Properties to set
             */
            function RegisterGhostTrailRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterGhostTrailRequest ghostSessionId.
             * @member {number|Long} ghostSessionId
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.ghostSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RegisterGhostTrailRequest ghost.
             * @member {v388.protobuf.IGhostCar} ghost
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.ghost = null;

            /**
             * RegisterGhostTrailRequest trail.
             * @member {Uint8Array} trail
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.trail = $util.newBuffer([]);

            /**
             * Creates a new RegisterGhostTrailRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailRequest=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest instance
             */
            RegisterGhostTrailRequest.create = function create(properties) {
                return new RegisterGhostTrailRequest(properties);
            };

            /**
             * Encodes the specified RegisterGhostTrailRequest message. Does not implicitly {@link v388.protobuf.RegisterGhostTrailRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailRequest} message RegisterGhostTrailRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ghostSessionId);
                $root.v388.protobuf.GhostCar.encode(message.ghost, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.trail);
                return writer;
            };

            /**
             * Encodes the specified RegisterGhostTrailRequest message, length delimited. Does not implicitly {@link v388.protobuf.RegisterGhostTrailRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailRequest} message RegisterGhostTrailRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterGhostTrailRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterGhostTrailRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostSessionId = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.ghost = $root.v388.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.trail = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostSessionId"))
                    throw $util.ProtocolError("missing required 'ghostSessionId'", { instance: message });
                if (!message.hasOwnProperty("ghost"))
                    throw $util.ProtocolError("missing required 'ghost'", { instance: message });
                if (!message.hasOwnProperty("trail"))
                    throw $util.ProtocolError("missing required 'trail'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterGhostTrailRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterGhostTrailRequest message.
             * @function verify
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterGhostTrailRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostSessionId) && !(message.ghostSessionId && $util.isInteger(message.ghostSessionId.low) && $util.isInteger(message.ghostSessionId.high)))
                    return "ghostSessionId: integer|Long expected";
                {
                    let error = $root.v388.protobuf.GhostCar.verify(message.ghost);
                    if (error)
                        return "ghost." + error;
                }
                if (!(message.trail && typeof message.trail.length === "number" || $util.isString(message.trail)))
                    return "trail: buffer expected";
                return null;
            };

            /**
             * Creates a RegisterGhostTrailRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             */
            RegisterGhostTrailRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterGhostTrailRequest)
                    return object;
                let message = new $root.v388.protobuf.RegisterGhostTrailRequest();
                if (object.ghostSessionId != null)
                    if ($util.Long)
                        (message.ghostSessionId = $util.Long.fromValue(object.ghostSessionId)).unsigned = true;
                    else if (typeof object.ghostSessionId === "string")
                        message.ghostSessionId = parseInt(object.ghostSessionId, 10);
                    else if (typeof object.ghostSessionId === "number")
                        message.ghostSessionId = object.ghostSessionId;
                    else if (typeof object.ghostSessionId === "object")
                        message.ghostSessionId = new $util.LongBits(object.ghostSessionId.low >>> 0, object.ghostSessionId.high >>> 0).toNumber(true);
                if (object.ghost != null) {
                    if (typeof object.ghost !== "object")
                        throw TypeError(".v388.protobuf.RegisterGhostTrailRequest.ghost: object expected");
                    message.ghost = $root.v388.protobuf.GhostCar.fromObject(object.ghost);
                }
                if (object.trail != null)
                    if (typeof object.trail === "string")
                        $util.base64.decode(object.trail, message.trail = $util.newBuffer($util.base64.length(object.trail)), 0);
                    else if (object.trail.length >= 0)
                        message.trail = object.trail;
                return message;
            };

            /**
             * Creates a plain object from a RegisterGhostTrailRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {v388.protobuf.RegisterGhostTrailRequest} message RegisterGhostTrailRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterGhostTrailRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.ghostSessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ghostSessionId = options.longs === String ? "0" : 0;
                    object.ghost = null;
                    if (options.bytes === String)
                        object.trail = "";
                    else {
                        object.trail = [];
                        if (options.bytes !== Array)
                            object.trail = $util.newBuffer(object.trail);
                    }
                }
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (typeof message.ghostSessionId === "number")
                        object.ghostSessionId = options.longs === String ? String(message.ghostSessionId) : message.ghostSessionId;
                    else
                        object.ghostSessionId = options.longs === String ? $util.Long.prototype.toString.call(message.ghostSessionId) : options.longs === Number ? new $util.LongBits(message.ghostSessionId.low >>> 0, message.ghostSessionId.high >>> 0).toNumber(true) : message.ghostSessionId;
                if (message.ghost != null && message.hasOwnProperty("ghost"))
                    object.ghost = $root.v388.protobuf.GhostCar.toObject(message.ghost, options);
                if (message.trail != null && message.hasOwnProperty("trail"))
                    object.trail = options.bytes === String ? $util.base64.encode(message.trail, 0, message.trail.length) : options.bytes === Array ? Array.prototype.slice.call(message.trail) : message.trail;
                return object;
            };

            /**
             * Converts this RegisterGhostTrailRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterGhostTrailRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterGhostTrailRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterGhostTrailRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterGhostTrailRequest";
            };

            return RegisterGhostTrailRequest;
        })();

        protobuf.RegisterGhostTrailResponse = (function() {

            /**
             * Properties of a RegisterGhostTrailResponse.
             * @memberof v388.protobuf
             * @interface IRegisterGhostTrailResponse
             * @property {v388.protobuf.ErrorCode} error RegisterGhostTrailResponse error
             */

            /**
             * Constructs a new RegisterGhostTrailResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterGhostTrailResponse.
             * @implements IRegisterGhostTrailResponse
             * @constructor
             * @param {v388.protobuf.IRegisterGhostTrailResponse=} [properties] Properties to set
             */
            function RegisterGhostTrailResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterGhostTrailResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @instance
             */
            RegisterGhostTrailResponse.prototype.error = 0;

            /**
             * Creates a new RegisterGhostTrailResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailResponse=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse instance
             */
            RegisterGhostTrailResponse.create = function create(properties) {
                return new RegisterGhostTrailResponse(properties);
            };

            /**
             * Encodes the specified RegisterGhostTrailResponse message. Does not implicitly {@link v388.protobuf.RegisterGhostTrailResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailResponse} message RegisterGhostTrailResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterGhostTrailResponse message, length delimited. Does not implicitly {@link v388.protobuf.RegisterGhostTrailResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {v388.protobuf.IRegisterGhostTrailResponse} message RegisterGhostTrailResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterGhostTrailResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterGhostTrailResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterGhostTrailResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterGhostTrailResponse message.
             * @function verify
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterGhostTrailResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterGhostTrailResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             */
            RegisterGhostTrailResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterGhostTrailResponse)
                    return object;
                let message = new $root.v388.protobuf.RegisterGhostTrailResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterGhostTrailResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {v388.protobuf.RegisterGhostTrailResponse} message RegisterGhostTrailResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterGhostTrailResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterGhostTrailResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterGhostTrailResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterGhostTrailResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterGhostTrailResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterGhostTrailResponse";
            };

            return RegisterGhostTrailResponse;
        })();

        protobuf.LoadUserRequest = (function() {

            /**
             * Properties of a LoadUserRequest.
             * @memberof v388.protobuf
             * @interface ILoadUserRequest
             * @property {string} cardChipId LoadUserRequest cardChipId
             * @property {string|null} [accessCode] LoadUserRequest accessCode
             * @property {number|null} [cardTypeCode] LoadUserRequest cardTypeCode
             * @property {number|null} [cardRegionCode] LoadUserRequest cardRegionCode
             * @property {v388.protobuf.DeviceType} device LoadUserRequest device
             * @property {number} romVersion LoadUserRequest romVersion
             * @property {number} maxCars LoadUserRequest maxCars
             * @property {boolean|null} [createUser] LoadUserRequest createUser
             */

            /**
             * Constructs a new LoadUserRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadUserRequest.
             * @implements ILoadUserRequest
             * @constructor
             * @param {v388.protobuf.ILoadUserRequest=} [properties] Properties to set
             */
            function LoadUserRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUserRequest cardChipId.
             * @member {string} cardChipId
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardChipId = "";

            /**
             * LoadUserRequest accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.accessCode = "";

            /**
             * LoadUserRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardTypeCode = 0;

            /**
             * LoadUserRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardRegionCode = 0;

            /**
             * LoadUserRequest device.
             * @member {v388.protobuf.DeviceType} device
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.device = 0;

            /**
             * LoadUserRequest romVersion.
             * @member {number} romVersion
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.romVersion = 0;

            /**
             * LoadUserRequest maxCars.
             * @member {number} maxCars
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.maxCars = 0;

            /**
             * LoadUserRequest createUser.
             * @member {boolean} createUser
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.createUser = false;

            /**
             * Creates a new LoadUserRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {v388.protobuf.ILoadUserRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadUserRequest} LoadUserRequest instance
             */
            LoadUserRequest.create = function create(properties) {
                return new LoadUserRequest(properties);
            };

            /**
             * Encodes the specified LoadUserRequest message. Does not implicitly {@link v388.protobuf.LoadUserRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {v388.protobuf.ILoadUserRequest} message LoadUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardRegionCode);
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.device);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.romVersion);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.maxCars);
                if (message.createUser != null && Object.hasOwnProperty.call(message, "createUser"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.createUser);
                return writer;
            };

            /**
             * Encodes the specified LoadUserRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadUserRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {v388.protobuf.ILoadUserRequest} message LoadUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUserRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadUserRequest} LoadUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadUserRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.device = reader.int32();
                            break;
                        }
                    case 6: {
                            message.romVersion = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.maxCars = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.createUser = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("cardChipId"))
                    throw $util.ProtocolError("missing required 'cardChipId'", { instance: message });
                if (!message.hasOwnProperty("device"))
                    throw $util.ProtocolError("missing required 'device'", { instance: message });
                if (!message.hasOwnProperty("romVersion"))
                    throw $util.ProtocolError("missing required 'romVersion'", { instance: message });
                if (!message.hasOwnProperty("maxCars"))
                    throw $util.ProtocolError("missing required 'maxCars'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUserRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadUserRequest} LoadUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUserRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUserRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.cardChipId))
                    return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                switch (message.device) {
                default:
                    return "device: enum value expected";
                case 0:
                case 1:
                    break;
                }
                if (!$util.isInteger(message.romVersion))
                    return "romVersion: integer expected";
                if (!$util.isInteger(message.maxCars))
                    return "maxCars: integer expected";
                if (message.createUser != null && message.hasOwnProperty("createUser"))
                    if (typeof message.createUser !== "boolean")
                        return "createUser: boolean expected";
                return null;
            };

            /**
             * Creates a LoadUserRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadUserRequest} LoadUserRequest
             */
            LoadUserRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadUserRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadUserRequest();
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.romVersion != null)
                    message.romVersion = object.romVersion >>> 0;
                if (object.maxCars != null)
                    message.maxCars = object.maxCars >>> 0;
                if (object.createUser != null)
                    message.createUser = Boolean(object.createUser);
                return message;
            };

            /**
             * Creates a plain object from a LoadUserRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {v388.protobuf.LoadUserRequest} message LoadUserRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUserRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.romVersion = 0;
                    object.maxCars = 0;
                    object.createUser = false;
                }
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.v388.protobuf.DeviceType[message.device] === undefined ? message.device : $root.v388.protobuf.DeviceType[message.device] : message.device;
                if (message.romVersion != null && message.hasOwnProperty("romVersion"))
                    object.romVersion = message.romVersion;
                if (message.maxCars != null && message.hasOwnProperty("maxCars"))
                    object.maxCars = message.maxCars;
                if (message.createUser != null && message.hasOwnProperty("createUser"))
                    object.createUser = message.createUser;
                return object;
            };

            /**
             * Converts this LoadUserRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadUserRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUserRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUserRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadUserRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUserRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadUserRequest";
            };

            return LoadUserRequest;
        })();

        protobuf.LoadUserResponse = (function() {

            /**
             * Properties of a LoadUserResponse.
             * @memberof v388.protobuf
             * @interface ILoadUserResponse
             * @property {v388.protobuf.ErrorCode} error LoadUserResponse error
             * @property {number|null} [unlockAt] LoadUserResponse unlockAt
             * @property {string|null} [accessCode] LoadUserResponse accessCode
             * @property {number|null} [banapassportAmId] LoadUserResponse banapassportAmId
             * @property {number|null} [personalId] LoadUserResponse personalId
             * @property {number|null} [userId] LoadUserResponse userId
             * @property {number} numOfOwnedCars LoadUserResponse numOfOwnedCars
             * @property {Array.<v388.protobuf.ICar>|null} [cars] LoadUserResponse cars
             * @property {Array.<v388.protobuf.LoadUserResponse.ICarState>|null} [carStates] LoadUserResponse carStates
             * @property {boolean} hasHp600Car LoadUserResponse hasHp600Car
             * @property {number} hp600Count LoadUserResponse hp600Count
             * @property {number} tutorials LoadUserResponse tutorials
             * @property {v388.protobuf.CarCampaignUserState|null} [carCampaignUserState] LoadUserResponse carCampaignUserState
             * @property {v388.protobuf.GhostCompetitionParticipantState|null} [competitionUserState] LoadUserResponse competitionUserState
             * @property {number|null} [teamId] LoadUserResponse teamId
             * @property {string|null} [teamName] LoadUserResponse teamName
             * @property {number|null} [teamStickerFont] LoadUserResponse teamStickerFont
             */

            /**
             * Constructs a new LoadUserResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadUserResponse.
             * @implements ILoadUserResponse
             * @constructor
             * @param {v388.protobuf.ILoadUserResponse=} [properties] Properties to set
             */
            function LoadUserResponse(properties) {
                this.cars = [];
                this.carStates = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUserResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.error = 0;

            /**
             * LoadUserResponse unlockAt.
             * @member {number} unlockAt
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.unlockAt = 0;

            /**
             * LoadUserResponse accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.accessCode = "";

            /**
             * LoadUserResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.banapassportAmId = 0;

            /**
             * LoadUserResponse personalId.
             * @member {number} personalId
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.personalId = 0;

            /**
             * LoadUserResponse userId.
             * @member {number} userId
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.userId = 0;

            /**
             * LoadUserResponse numOfOwnedCars.
             * @member {number} numOfOwnedCars
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.numOfOwnedCars = 0;

            /**
             * LoadUserResponse cars.
             * @member {Array.<v388.protobuf.ICar>} cars
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.cars = $util.emptyArray;

            /**
             * LoadUserResponse carStates.
             * @member {Array.<v388.protobuf.LoadUserResponse.ICarState>} carStates
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.carStates = $util.emptyArray;

            /**
             * LoadUserResponse hasHp600Car.
             * @member {boolean} hasHp600Car
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.hasHp600Car = false;

            /**
             * LoadUserResponse hp600Count.
             * @member {number} hp600Count
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.hp600Count = 0;

            /**
             * LoadUserResponse tutorials.
             * @member {number} tutorials
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.tutorials = 0;

            /**
             * LoadUserResponse carCampaignUserState.
             * @member {v388.protobuf.CarCampaignUserState} carCampaignUserState
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.carCampaignUserState = 1;

            /**
             * LoadUserResponse competitionUserState.
             * @member {v388.protobuf.GhostCompetitionParticipantState} competitionUserState
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.competitionUserState = 1;

            /**
             * LoadUserResponse teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.teamId = 0;

            /**
             * LoadUserResponse teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.teamName = "";

            /**
             * LoadUserResponse teamStickerFont.
             * @member {number} teamStickerFont
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.teamStickerFont = 0;

            /**
             * Creates a new LoadUserResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {v388.protobuf.ILoadUserResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadUserResponse} LoadUserResponse instance
             */
            LoadUserResponse.create = function create(properties) {
                return new LoadUserResponse(properties);
            };

            /**
             * Encodes the specified LoadUserResponse message. Does not implicitly {@link v388.protobuf.LoadUserResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {v388.protobuf.ILoadUserResponse} message LoadUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.unlockAt != null && Object.hasOwnProperty.call(message, "unlockAt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.unlockAt);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.banapassportAmId);
                if (message.personalId != null && Object.hasOwnProperty.call(message, "personalId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.personalId);
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.userId);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.numOfOwnedCars);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.v388.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.carStates != null && message.carStates.length)
                    for (let i = 0; i < message.carStates.length; ++i)
                        $root.v388.protobuf.LoadUserResponse.CarState.encode(message.carStates[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.hasHp600Car);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.hp600Count);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.tutorials);
                if (message.carCampaignUserState != null && Object.hasOwnProperty.call(message, "carCampaignUserState"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int32(message.carCampaignUserState);
                if (message.competitionUserState != null && Object.hasOwnProperty.call(message, "competitionUserState"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int32(message.competitionUserState);
                if (message.teamId != null && Object.hasOwnProperty.call(message, "teamId"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.teamId);
                if (message.teamName != null && Object.hasOwnProperty.call(message, "teamName"))
                    writer.uint32(/* id 16, wireType 2 =*/130).string(message.teamName);
                if (message.teamStickerFont != null && Object.hasOwnProperty.call(message, "teamStickerFont"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.teamStickerFont);
                return writer;
            };

            /**
             * Encodes the specified LoadUserResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadUserResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {v388.protobuf.ILoadUserResponse} message LoadUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUserResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadUserResponse} LoadUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadUserResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.unlockAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.personalId = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.numOfOwnedCars = reader.uint32();
                            break;
                        }
                    case 8: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.v388.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    case 9: {
                            if (!(message.carStates && message.carStates.length))
                                message.carStates = [];
                            message.carStates.push($root.v388.protobuf.LoadUserResponse.CarState.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            message.hasHp600Car = reader.bool();
                            break;
                        }
                    case 11: {
                            message.hp600Count = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.tutorials = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.carCampaignUserState = reader.int32();
                            break;
                        }
                    case 14: {
                            message.competitionUserState = reader.int32();
                            break;
                        }
                    case 15: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.teamName = reader.string();
                            break;
                        }
                    case 17: {
                            message.teamStickerFont = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfOwnedCars"))
                    throw $util.ProtocolError("missing required 'numOfOwnedCars'", { instance: message });
                if (!message.hasOwnProperty("hasHp600Car"))
                    throw $util.ProtocolError("missing required 'hasHp600Car'", { instance: message });
                if (!message.hasOwnProperty("hp600Count"))
                    throw $util.ProtocolError("missing required 'hp600Count'", { instance: message });
                if (!message.hasOwnProperty("tutorials"))
                    throw $util.ProtocolError("missing required 'tutorials'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUserResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadUserResponse} LoadUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUserResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUserResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    if (!$util.isInteger(message.unlockAt))
                        return "unlockAt: integer expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    if (!$util.isInteger(message.personalId))
                        return "personalId: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (!$util.isInteger(message.numOfOwnedCars))
                    return "numOfOwnedCars: integer expected";
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.v388.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                if (message.carStates != null && message.hasOwnProperty("carStates")) {
                    if (!Array.isArray(message.carStates))
                        return "carStates: array expected";
                    for (let i = 0; i < message.carStates.length; ++i) {
                        let error = $root.v388.protobuf.LoadUserResponse.CarState.verify(message.carStates[i]);
                        if (error)
                            return "carStates." + error;
                    }
                }
                if (typeof message.hasHp600Car !== "boolean")
                    return "hasHp600Car: boolean expected";
                if (!$util.isInteger(message.hp600Count))
                    return "hp600Count: integer expected";
                if (!$util.isInteger(message.tutorials))
                    return "tutorials: integer expected";
                if (message.carCampaignUserState != null && message.hasOwnProperty("carCampaignUserState"))
                    switch (message.carCampaignUserState) {
                    default:
                        return "carCampaignUserState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.competitionUserState != null && message.hasOwnProperty("competitionUserState"))
                    switch (message.competitionUserState) {
                    default:
                        return "competitionUserState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    if (!$util.isInteger(message.teamId))
                        return "teamId: integer expected";
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    if (!$util.isString(message.teamName))
                        return "teamName: string expected";
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    if (!$util.isInteger(message.teamStickerFont))
                        return "teamStickerFont: integer expected";
                return null;
            };

            /**
             * Creates a LoadUserResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadUserResponse} LoadUserResponse
             */
            LoadUserResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadUserResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadUserResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.unlockAt != null)
                    message.unlockAt = object.unlockAt >>> 0;
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.personalId != null)
                    message.personalId = object.personalId >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.numOfOwnedCars != null)
                    message.numOfOwnedCars = object.numOfOwnedCars >>> 0;
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".v388.protobuf.LoadUserResponse.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadUserResponse.cars: object expected");
                        message.cars[i] = $root.v388.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                if (object.carStates) {
                    if (!Array.isArray(object.carStates))
                        throw TypeError(".v388.protobuf.LoadUserResponse.carStates: array expected");
                    message.carStates = [];
                    for (let i = 0; i < object.carStates.length; ++i) {
                        if (typeof object.carStates[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadUserResponse.carStates: object expected");
                        message.carStates[i] = $root.v388.protobuf.LoadUserResponse.CarState.fromObject(object.carStates[i]);
                    }
                }
                if (object.hasHp600Car != null)
                    message.hasHp600Car = Boolean(object.hasHp600Car);
                if (object.hp600Count != null)
                    message.hp600Count = object.hp600Count >>> 0;
                if (object.tutorials != null)
                    message.tutorials = object.tutorials >>> 0;
                switch (object.carCampaignUserState) {
                default:
                    if (typeof object.carCampaignUserState === "number") {
                        message.carCampaignUserState = object.carCampaignUserState;
                        break;
                    }
                    break;
                case "CAR_CAMPAIGN_NOT_ACCEPTED":
                case 1:
                    message.carCampaignUserState = 1;
                    break;
                case "CAR_CAMPAIGN_ACCEPTED":
                case 2:
                    message.carCampaignUserState = 2;
                    break;
                case "CAR_CAMPAIGN_FINISHED":
                case 3:
                    message.carCampaignUserState = 3;
                    break;
                }
                switch (object.competitionUserState) {
                default:
                    if (typeof object.competitionUserState === "number") {
                        message.competitionUserState = object.competitionUserState;
                        break;
                    }
                    break;
                case "COMPETITION_NOT_PARTICIPATED":
                case 1:
                    message.competitionUserState = 1;
                    break;
                case "COMPETITION_QUALIFIED":
                case 2:
                    message.competitionUserState = 2;
                    break;
                case "COMPETITION_PARTICIPATED":
                case 3:
                    message.competitionUserState = 3;
                    break;
                case "COMPETITION_WON":
                case 4:
                    message.competitionUserState = 4;
                    break;
                }
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                if (object.teamStickerFont != null)
                    message.teamStickerFont = object.teamStickerFont >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadUserResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {v388.protobuf.LoadUserResponse} message LoadUserResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUserResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.cars = [];
                    object.carStates = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.unlockAt = 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.personalId = 0;
                    object.userId = 0;
                    object.numOfOwnedCars = 0;
                    object.hasHp600Car = false;
                    object.hp600Count = 0;
                    object.tutorials = 0;
                    object.carCampaignUserState = options.enums === String ? "CAR_CAMPAIGN_NOT_ACCEPTED" : 1;
                    object.competitionUserState = options.enums === String ? "COMPETITION_NOT_PARTICIPATED" : 1;
                    object.teamId = 0;
                    object.teamName = "";
                    object.teamStickerFont = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    object.unlockAt = message.unlockAt;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    object.personalId = message.personalId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.numOfOwnedCars != null && message.hasOwnProperty("numOfOwnedCars"))
                    object.numOfOwnedCars = message.numOfOwnedCars;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.v388.protobuf.Car.toObject(message.cars[j], options);
                }
                if (message.carStates && message.carStates.length) {
                    object.carStates = [];
                    for (let j = 0; j < message.carStates.length; ++j)
                        object.carStates[j] = $root.v388.protobuf.LoadUserResponse.CarState.toObject(message.carStates[j], options);
                }
                if (message.hasHp600Car != null && message.hasOwnProperty("hasHp600Car"))
                    object.hasHp600Car = message.hasHp600Car;
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    object.hp600Count = message.hp600Count;
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    object.tutorials = message.tutorials;
                if (message.carCampaignUserState != null && message.hasOwnProperty("carCampaignUserState"))
                    object.carCampaignUserState = options.enums === String ? $root.v388.protobuf.CarCampaignUserState[message.carCampaignUserState] === undefined ? message.carCampaignUserState : $root.v388.protobuf.CarCampaignUserState[message.carCampaignUserState] : message.carCampaignUserState;
                if (message.competitionUserState != null && message.hasOwnProperty("competitionUserState"))
                    object.competitionUserState = options.enums === String ? $root.v388.protobuf.GhostCompetitionParticipantState[message.competitionUserState] === undefined ? message.competitionUserState : $root.v388.protobuf.GhostCompetitionParticipantState[message.competitionUserState] : message.competitionUserState;
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    object.teamStickerFont = message.teamStickerFont;
                return object;
            };

            /**
             * Converts this LoadUserResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadUserResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUserResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUserResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadUserResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUserResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadUserResponse";
            };

            LoadUserResponse.CarState = (function() {

                /**
                 * Properties of a CarState.
                 * @memberof v388.protobuf.LoadUserResponse
                 * @interface ICarState
                 * @property {boolean} hasOpponentGhost CarState hasOpponentGhost
                 * @property {v388.protobuf.GhostCompetitionParticipantState|null} [competitionState] CarState competitionState
                 */

                /**
                 * Constructs a new CarState.
                 * @memberof v388.protobuf.LoadUserResponse
                 * @classdesc Represents a CarState.
                 * @implements ICarState
                 * @constructor
                 * @param {v388.protobuf.LoadUserResponse.ICarState=} [properties] Properties to set
                 */
                function CarState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CarState hasOpponentGhost.
                 * @member {boolean} hasOpponentGhost
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.hasOpponentGhost = false;

                /**
                 * CarState competitionState.
                 * @member {v388.protobuf.GhostCompetitionParticipantState} competitionState
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.competitionState = 1;

                /**
                 * Creates a new CarState instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {v388.protobuf.LoadUserResponse.ICarState=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadUserResponse.CarState} CarState instance
                 */
                CarState.create = function create(properties) {
                    return new CarState(properties);
                };

                /**
                 * Encodes the specified CarState message. Does not implicitly {@link v388.protobuf.LoadUserResponse.CarState.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {v388.protobuf.LoadUserResponse.ICarState} message CarState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.hasOpponentGhost);
                    if (message.competitionState != null && Object.hasOwnProperty.call(message, "competitionState"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.competitionState);
                    return writer;
                };

                /**
                 * Encodes the specified CarState message, length delimited. Does not implicitly {@link v388.protobuf.LoadUserResponse.CarState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {v388.protobuf.LoadUserResponse.ICarState} message CarState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CarState message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadUserResponse.CarState} CarState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadUserResponse.CarState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.hasOpponentGhost = reader.bool();
                                break;
                            }
                        case 2: {
                                message.competitionState = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("hasOpponentGhost"))
                        throw $util.ProtocolError("missing required 'hasOpponentGhost'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a CarState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadUserResponse.CarState} CarState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CarState message.
                 * @function verify
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CarState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (typeof message.hasOpponentGhost !== "boolean")
                        return "hasOpponentGhost: boolean expected";
                    if (message.competitionState != null && message.hasOwnProperty("competitionState"))
                        switch (message.competitionState) {
                        default:
                            return "competitionState: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a CarState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadUserResponse.CarState} CarState
                 */
                CarState.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadUserResponse.CarState)
                        return object;
                    let message = new $root.v388.protobuf.LoadUserResponse.CarState();
                    if (object.hasOpponentGhost != null)
                        message.hasOpponentGhost = Boolean(object.hasOpponentGhost);
                    switch (object.competitionState) {
                    default:
                        if (typeof object.competitionState === "number") {
                            message.competitionState = object.competitionState;
                            break;
                        }
                        break;
                    case "COMPETITION_NOT_PARTICIPATED":
                    case 1:
                        message.competitionState = 1;
                        break;
                    case "COMPETITION_QUALIFIED":
                    case 2:
                        message.competitionState = 2;
                        break;
                    case "COMPETITION_PARTICIPATED":
                    case 3:
                        message.competitionState = 3;
                        break;
                    case "COMPETITION_WON":
                    case 4:
                        message.competitionState = 4;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CarState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {v388.protobuf.LoadUserResponse.CarState} message CarState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CarState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.hasOpponentGhost = false;
                        object.competitionState = options.enums === String ? "COMPETITION_NOT_PARTICIPATED" : 1;
                    }
                    if (message.hasOpponentGhost != null && message.hasOwnProperty("hasOpponentGhost"))
                        object.hasOpponentGhost = message.hasOpponentGhost;
                    if (message.competitionState != null && message.hasOwnProperty("competitionState"))
                        object.competitionState = options.enums === String ? $root.v388.protobuf.GhostCompetitionParticipantState[message.competitionState] === undefined ? message.competitionState : $root.v388.protobuf.GhostCompetitionParticipantState[message.competitionState] : message.competitionState;
                    return object;
                };

                /**
                 * Converts this CarState to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CarState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CarState
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CarState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadUserResponse.CarState";
                };

                return CarState;
            })();

            return LoadUserResponse;
        })();

        protobuf.UpdateUserLockRequest = (function() {

            /**
             * Properties of an UpdateUserLockRequest.
             * @memberof v388.protobuf
             * @interface IUpdateUserLockRequest
             * @property {number|null} [userId] UpdateUserLockRequest userId
             * @property {string|null} [cardChipId] UpdateUserLockRequest cardChipId
             * @property {string|null} [accessCode] UpdateUserLockRequest accessCode
             * @property {number|null} [cardTypeCode] UpdateUserLockRequest cardTypeCode
             * @property {number|null} [cardRegionCode] UpdateUserLockRequest cardRegionCode
             * @property {v388.protobuf.DeviceType|null} [device] UpdateUserLockRequest device
             * @property {number} unlockAt UpdateUserLockRequest unlockAt
             */

            /**
             * Constructs a new UpdateUserLockRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateUserLockRequest.
             * @implements IUpdateUserLockRequest
             * @constructor
             * @param {v388.protobuf.IUpdateUserLockRequest=} [properties] Properties to set
             */
            function UpdateUserLockRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserLockRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.userId = 0;

            /**
             * UpdateUserLockRequest cardChipId.
             * @member {string} cardChipId
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.cardChipId = "";

            /**
             * UpdateUserLockRequest accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.accessCode = "";

            /**
             * UpdateUserLockRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.cardTypeCode = 0;

            /**
             * UpdateUserLockRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.cardRegionCode = 0;

            /**
             * UpdateUserLockRequest device.
             * @member {v388.protobuf.DeviceType} device
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.device = 0;

            /**
             * UpdateUserLockRequest unlockAt.
             * @member {number} unlockAt
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             */
            UpdateUserLockRequest.prototype.unlockAt = 0;

            /**
             * Creates a new UpdateUserLockRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {v388.protobuf.IUpdateUserLockRequest=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateUserLockRequest} UpdateUserLockRequest instance
             */
            UpdateUserLockRequest.create = function create(properties) {
                return new UpdateUserLockRequest(properties);
            };

            /**
             * Encodes the specified UpdateUserLockRequest message. Does not implicitly {@link v388.protobuf.UpdateUserLockRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {v388.protobuf.IUpdateUserLockRequest} message UpdateUserLockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserLockRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.device);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.unlockAt);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserLockRequest message, length delimited. Does not implicitly {@link v388.protobuf.UpdateUserLockRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {v388.protobuf.IUpdateUserLockRequest} message UpdateUserLockRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserLockRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserLockRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateUserLockRequest} UpdateUserLockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserLockRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateUserLockRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.device = reader.int32();
                            break;
                        }
                    case 7: {
                            message.unlockAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("unlockAt"))
                    throw $util.ProtocolError("missing required 'unlockAt'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateUserLockRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateUserLockRequest} UpdateUserLockRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserLockRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserLockRequest message.
             * @function verify
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserLockRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (!$util.isInteger(message.unlockAt))
                    return "unlockAt: integer expected";
                return null;
            };

            /**
             * Creates an UpdateUserLockRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateUserLockRequest} UpdateUserLockRequest
             */
            UpdateUserLockRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateUserLockRequest)
                    return object;
                let message = new $root.v388.protobuf.UpdateUserLockRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.unlockAt != null)
                    message.unlockAt = object.unlockAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserLockRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {v388.protobuf.UpdateUserLockRequest} message UpdateUserLockRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserLockRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.unlockAt = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.v388.protobuf.DeviceType[message.device] === undefined ? message.device : $root.v388.protobuf.DeviceType[message.device] : message.device;
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    object.unlockAt = message.unlockAt;
                return object;
            };

            /**
             * Converts this UpdateUserLockRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserLockRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateUserLockRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateUserLockRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateUserLockRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateUserLockRequest";
            };

            return UpdateUserLockRequest;
        })();

        protobuf.UpdateUserLockResponse = (function() {

            /**
             * Properties of an UpdateUserLockResponse.
             * @memberof v388.protobuf
             * @interface IUpdateUserLockResponse
             * @property {v388.protobuf.ErrorCode} error UpdateUserLockResponse error
             */

            /**
             * Constructs a new UpdateUserLockResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateUserLockResponse.
             * @implements IUpdateUserLockResponse
             * @constructor
             * @param {v388.protobuf.IUpdateUserLockResponse=} [properties] Properties to set
             */
            function UpdateUserLockResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserLockResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @instance
             */
            UpdateUserLockResponse.prototype.error = 0;

            /**
             * Creates a new UpdateUserLockResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {v388.protobuf.IUpdateUserLockResponse=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateUserLockResponse} UpdateUserLockResponse instance
             */
            UpdateUserLockResponse.create = function create(properties) {
                return new UpdateUserLockResponse(properties);
            };

            /**
             * Encodes the specified UpdateUserLockResponse message. Does not implicitly {@link v388.protobuf.UpdateUserLockResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {v388.protobuf.IUpdateUserLockResponse} message UpdateUserLockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserLockResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserLockResponse message, length delimited. Does not implicitly {@link v388.protobuf.UpdateUserLockResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {v388.protobuf.IUpdateUserLockResponse} message UpdateUserLockResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserLockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserLockResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateUserLockResponse} UpdateUserLockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserLockResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateUserLockResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateUserLockResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateUserLockResponse} UpdateUserLockResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserLockResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserLockResponse message.
             * @function verify
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserLockResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates an UpdateUserLockResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateUserLockResponse} UpdateUserLockResponse
             */
            UpdateUserLockResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateUserLockResponse)
                    return object;
                let message = new $root.v388.protobuf.UpdateUserLockResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserLockResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {v388.protobuf.UpdateUserLockResponse} message UpdateUserLockResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserLockResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this UpdateUserLockResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserLockResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateUserLockResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateUserLockResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateUserLockResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateUserLockResponse";
            };

            return UpdateUserLockResponse;
        })();

        protobuf.LoadCarRequest = (function() {

            /**
             * Properties of a LoadCarRequest.
             * @memberof v388.protobuf
             * @interface ILoadCarRequest
             * @property {number} carId LoadCarRequest carId
             */

            /**
             * Constructs a new LoadCarRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadCarRequest.
             * @implements ILoadCarRequest
             * @constructor
             * @param {v388.protobuf.ILoadCarRequest=} [properties] Properties to set
             */
            function LoadCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadCarRequest
             * @instance
             */
            LoadCarRequest.prototype.carId = 0;

            /**
             * Creates a new LoadCarRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {v388.protobuf.ILoadCarRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadCarRequest} LoadCarRequest instance
             */
            LoadCarRequest.create = function create(properties) {
                return new LoadCarRequest(properties);
            };

            /**
             * Encodes the specified LoadCarRequest message. Does not implicitly {@link v388.protobuf.LoadCarRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {v388.protobuf.ILoadCarRequest} message LoadCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadCarRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {v388.protobuf.ILoadCarRequest} message LoadCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadCarRequest} LoadCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadCarRequest} LoadCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadCarRequest} LoadCarRequest
             */
            LoadCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadCarRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadCarRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {v388.protobuf.LoadCarRequest} message LoadCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadCarRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadCarRequest";
            };

            return LoadCarRequest;
        })();

        protobuf.LoadCarResponse = (function() {

            /**
             * Properties of a LoadCarResponse.
             * @memberof v388.protobuf
             * @interface ILoadCarResponse
             * @property {v388.protobuf.ErrorCode} error LoadCarResponse error
             * @property {v388.protobuf.ICar} car LoadCarResponse car
             * @property {number} tuningPoint LoadCarResponse tuningPoint
             * @property {number} dressupPoint LoadCarResponse dressupPoint
             * @property {number} dressupLevel LoadCarResponse dressupLevel
             * @property {number} odometer LoadCarResponse odometer
             * @property {number} playCount LoadCarResponse playCount
             * @property {boolean} earnedCustomColor LoadCarResponse earnedCustomColor
             * @property {number} ownedCustomColors LoadCarResponse ownedCustomColors
             * @property {number} ownedDressupParts LoadCarResponse ownedDressupParts
             * @property {v388.protobuf.ICarSetting} setting LoadCarResponse setting
             * @property {number} vsPlayCount LoadCarResponse vsPlayCount
             * @property {number} vsBurstCount LoadCarResponse vsBurstCount
             * @property {number} vsStarCount LoadCarResponse vsStarCount
             * @property {number} vsStarCountMax LoadCarResponse vsStarCountMax
             * @property {number} vsCoolOrWild LoadCarResponse vsCoolOrWild
             * @property {number} vsSmoothOrRough LoadCarResponse vsSmoothOrRough
             * @property {number} rgPlayCount LoadCarResponse rgPlayCount
             * @property {number} rgWinCount LoadCarResponse rgWinCount
             * @property {number} maxiCoin LoadCarResponse maxiCoin
             * @property {number} rgBlock LoadCarResponse rgBlock
             * @property {Array.<number>|null} [rgProgress] LoadCarResponse rgProgress
             * @property {number} rgClearCount LoadCarResponse rgClearCount
             * @property {number} rgConsecutiveLosses LoadCarResponse rgConsecutiveLosses
             * @property {number} stPlayCount LoadCarResponse stPlayCount
             * @property {number} stClearBits LoadCarResponse stClearBits
             * @property {number} stClearDivCount LoadCarResponse stClearDivCount
             * @property {number} stClearCount LoadCarResponse stClearCount
             * @property {number|Long} stLoseBits LoadCarResponse stLoseBits
             * @property {boolean} stLose LoadCarResponse stLose
             * @property {number} stConsecutiveWins LoadCarResponse stConsecutiveWins
             * @property {number} stConsecutiveWinsMax LoadCarResponse stConsecutiveWinsMax
             * @property {number} ownedMeters LoadCarResponse ownedMeters
             * @property {number} ownedBgm LoadCarResponse ownedBgm
             * @property {v388.protobuf.IGhostCar|null} [challenger] LoadCarResponse challenger
             * @property {v388.protobuf.IGhostCar|null} [opponentGhost] LoadCarResponse opponentGhost
             * @property {number|Long|null} [opponentTrailId] LoadCarResponse opponentTrailId
             * @property {number|null} [opponentCompetitionId] LoadCarResponse opponentCompetitionId
             * @property {v388.protobuf.IGhostCompetitionParameter|null} [competitionParameter] LoadCarResponse competitionParameter
             * @property {number} ownedNameplates LoadCarResponse ownedNameplates
             * @property {number|null} [specialTitle] LoadCarResponse specialTitle
             * @property {number|null} [earnedTitle] LoadCarResponse earnedTitle
             */

            /**
             * Constructs a new LoadCarResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadCarResponse.
             * @implements ILoadCarResponse
             * @constructor
             * @param {v388.protobuf.ILoadCarResponse=} [properties] Properties to set
             */
            function LoadCarResponse(properties) {
                this.rgProgress = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.error = 0;

            /**
             * LoadCarResponse car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.car = null;

            /**
             * LoadCarResponse tuningPoint.
             * @member {number} tuningPoint
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.tuningPoint = 0;

            /**
             * LoadCarResponse dressupPoint.
             * @member {number} dressupPoint
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.dressupPoint = 0;

            /**
             * LoadCarResponse dressupLevel.
             * @member {number} dressupLevel
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.dressupLevel = 0;

            /**
             * LoadCarResponse odometer.
             * @member {number} odometer
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.odometer = 0;

            /**
             * LoadCarResponse playCount.
             * @member {number} playCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.playCount = 0;

            /**
             * LoadCarResponse earnedCustomColor.
             * @member {boolean} earnedCustomColor
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.earnedCustomColor = false;

            /**
             * LoadCarResponse ownedCustomColors.
             * @member {number} ownedCustomColors
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedCustomColors = 0;

            /**
             * LoadCarResponse ownedDressupParts.
             * @member {number} ownedDressupParts
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedDressupParts = 0;

            /**
             * LoadCarResponse setting.
             * @member {v388.protobuf.ICarSetting} setting
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.setting = null;

            /**
             * LoadCarResponse vsPlayCount.
             * @member {number} vsPlayCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsPlayCount = 0;

            /**
             * LoadCarResponse vsBurstCount.
             * @member {number} vsBurstCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsBurstCount = 0;

            /**
             * LoadCarResponse vsStarCount.
             * @member {number} vsStarCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsStarCount = 0;

            /**
             * LoadCarResponse vsStarCountMax.
             * @member {number} vsStarCountMax
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsStarCountMax = 0;

            /**
             * LoadCarResponse vsCoolOrWild.
             * @member {number} vsCoolOrWild
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsCoolOrWild = 0;

            /**
             * LoadCarResponse vsSmoothOrRough.
             * @member {number} vsSmoothOrRough
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsSmoothOrRough = 0;

            /**
             * LoadCarResponse rgPlayCount.
             * @member {number} rgPlayCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgPlayCount = 0;

            /**
             * LoadCarResponse rgWinCount.
             * @member {number} rgWinCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgWinCount = 0;

            /**
             * LoadCarResponse maxiCoin.
             * @member {number} maxiCoin
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.maxiCoin = 0;

            /**
             * LoadCarResponse rgBlock.
             * @member {number} rgBlock
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgBlock = 0;

            /**
             * LoadCarResponse rgProgress.
             * @member {Array.<number>} rgProgress
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgProgress = $util.emptyArray;

            /**
             * LoadCarResponse rgClearCount.
             * @member {number} rgClearCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgClearCount = 0;

            /**
             * LoadCarResponse rgConsecutiveLosses.
             * @member {number} rgConsecutiveLosses
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgConsecutiveLosses = 0;

            /**
             * LoadCarResponse stPlayCount.
             * @member {number} stPlayCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stPlayCount = 0;

            /**
             * LoadCarResponse stClearBits.
             * @member {number} stClearBits
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearBits = 0;

            /**
             * LoadCarResponse stClearDivCount.
             * @member {number} stClearDivCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearDivCount = 0;

            /**
             * LoadCarResponse stClearCount.
             * @member {number} stClearCount
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearCount = 0;

            /**
             * LoadCarResponse stLoseBits.
             * @member {number|Long} stLoseBits
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * LoadCarResponse stLose.
             * @member {boolean} stLose
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stLose = false;

            /**
             * LoadCarResponse stConsecutiveWins.
             * @member {number} stConsecutiveWins
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stConsecutiveWins = 0;

            /**
             * LoadCarResponse stConsecutiveWinsMax.
             * @member {number} stConsecutiveWinsMax
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stConsecutiveWinsMax = 0;

            /**
             * LoadCarResponse ownedMeters.
             * @member {number} ownedMeters
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedMeters = 0;

            /**
             * LoadCarResponse ownedBgm.
             * @member {number} ownedBgm
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedBgm = 0;

            /**
             * LoadCarResponse challenger.
             * @member {v388.protobuf.IGhostCar|null|undefined} challenger
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.challenger = null;

            /**
             * LoadCarResponse opponentGhost.
             * @member {v388.protobuf.IGhostCar|null|undefined} opponentGhost
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentGhost = null;

            /**
             * LoadCarResponse opponentTrailId.
             * @member {number|Long} opponentTrailId
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentTrailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * LoadCarResponse opponentCompetitionId.
             * @member {number} opponentCompetitionId
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentCompetitionId = 0;

            /**
             * LoadCarResponse competitionParameter.
             * @member {v388.protobuf.IGhostCompetitionParameter|null|undefined} competitionParameter
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.competitionParameter = null;

            /**
             * LoadCarResponse ownedNameplates.
             * @member {number} ownedNameplates
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedNameplates = 0;

            /**
             * LoadCarResponse specialTitle.
             * @member {number} specialTitle
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.specialTitle = 0;

            /**
             * LoadCarResponse earnedTitle.
             * @member {number} earnedTitle
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.earnedTitle = 0;

            /**
             * Creates a new LoadCarResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {v388.protobuf.ILoadCarResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadCarResponse} LoadCarResponse instance
             */
            LoadCarResponse.create = function create(properties) {
                return new LoadCarResponse(properties);
            };

            /**
             * Encodes the specified LoadCarResponse message. Does not implicitly {@link v388.protobuf.LoadCarResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {v388.protobuf.ILoadCarResponse} message LoadCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tuningPoint);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.dressupPoint);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.dressupLevel);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.odometer);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.playCount);
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.earnedCustomColor);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.ownedCustomColors);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ownedDressupParts);
                $root.v388.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.vsPlayCount);
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.vsBurstCount);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.vsStarCount);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.vsStarCountMax);
                writer.uint32(/* id 17, wireType 0 =*/136).sint32(message.vsCoolOrWild);
                writer.uint32(/* id 18, wireType 0 =*/144).sint32(message.vsSmoothOrRough);
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.rgPlayCount);
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.rgWinCount);
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.maxiCoin);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.rgBlock);
                if (message.rgProgress != null && message.rgProgress.length) {
                    writer.uint32(/* id 23, wireType 2 =*/186).fork();
                    for (let i = 0; i < message.rgProgress.length; ++i)
                        writer.uint32(message.rgProgress[i]);
                    writer.ldelim();
                }
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.rgClearCount);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.rgConsecutiveLosses);
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.stPlayCount);
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.stClearBits);
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.stClearDivCount);
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.stClearCount);
                writer.uint32(/* id 30, wireType 0 =*/240).uint64(message.stLoseBits);
                writer.uint32(/* id 31, wireType 0 =*/248).bool(message.stLose);
                writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.stConsecutiveWins);
                writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.stConsecutiveWinsMax);
                writer.uint32(/* id 34, wireType 0 =*/272).uint32(message.ownedMeters);
                writer.uint32(/* id 35, wireType 0 =*/280).uint32(message.ownedBgm);
                if (message.challenger != null && Object.hasOwnProperty.call(message, "challenger"))
                    $root.v388.protobuf.GhostCar.encode(message.challenger, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
                if (message.opponentGhost != null && Object.hasOwnProperty.call(message, "opponentGhost"))
                    $root.v388.protobuf.GhostCar.encode(message.opponentGhost, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
                if (message.opponentTrailId != null && Object.hasOwnProperty.call(message, "opponentTrailId"))
                    writer.uint32(/* id 38, wireType 0 =*/304).uint64(message.opponentTrailId);
                if (message.opponentCompetitionId != null && Object.hasOwnProperty.call(message, "opponentCompetitionId"))
                    writer.uint32(/* id 39, wireType 0 =*/312).uint32(message.opponentCompetitionId);
                if (message.competitionParameter != null && Object.hasOwnProperty.call(message, "competitionParameter"))
                    $root.v388.protobuf.GhostCompetitionParameter.encode(message.competitionParameter, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
                writer.uint32(/* id 41, wireType 0 =*/328).uint32(message.ownedNameplates);
                if (message.specialTitle != null && Object.hasOwnProperty.call(message, "specialTitle"))
                    writer.uint32(/* id 42, wireType 0 =*/336).uint32(message.specialTitle);
                if (message.earnedTitle != null && Object.hasOwnProperty.call(message, "earnedTitle"))
                    writer.uint32(/* id 43, wireType 0 =*/344).uint32(message.earnedTitle);
                return writer;
            };

            /**
             * Encodes the specified LoadCarResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {v388.protobuf.ILoadCarResponse} message LoadCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadCarResponse} LoadCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.tuningPoint = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.dressupPoint = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.dressupLevel = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.odometer = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.playCount = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.earnedCustomColor = reader.bool();
                            break;
                        }
                    case 9: {
                            message.ownedCustomColors = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.ownedDressupParts = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.setting = $root.v388.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.vsPlayCount = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.vsBurstCount = reader.uint32();
                            break;
                        }
                    case 15: {
                            message.vsStarCount = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.vsStarCountMax = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.vsCoolOrWild = reader.sint32();
                            break;
                        }
                    case 18: {
                            message.vsSmoothOrRough = reader.sint32();
                            break;
                        }
                    case 19: {
                            message.rgPlayCount = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.rgWinCount = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.maxiCoin = reader.uint32();
                            break;
                        }
                    case 22: {
                            message.rgBlock = reader.uint32();
                            break;
                        }
                    case 23: {
                            if (!(message.rgProgress && message.rgProgress.length))
                                message.rgProgress = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.rgProgress.push(reader.uint32());
                            } else
                                message.rgProgress.push(reader.uint32());
                            break;
                        }
                    case 24: {
                            message.rgClearCount = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.rgConsecutiveLosses = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.stPlayCount = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.stClearBits = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.stClearDivCount = reader.uint32();
                            break;
                        }
                    case 29: {
                            message.stClearCount = reader.uint32();
                            break;
                        }
                    case 30: {
                            message.stLoseBits = reader.uint64();
                            break;
                        }
                    case 31: {
                            message.stLose = reader.bool();
                            break;
                        }
                    case 32: {
                            message.stConsecutiveWins = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.stConsecutiveWinsMax = reader.uint32();
                            break;
                        }
                    case 34: {
                            message.ownedMeters = reader.uint32();
                            break;
                        }
                    case 35: {
                            message.ownedBgm = reader.uint32();
                            break;
                        }
                    case 36: {
                            message.challenger = $root.v388.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 37: {
                            message.opponentGhost = $root.v388.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 38: {
                            message.opponentTrailId = reader.uint64();
                            break;
                        }
                    case 39: {
                            message.opponentCompetitionId = reader.uint32();
                            break;
                        }
                    case 40: {
                            message.competitionParameter = $root.v388.protobuf.GhostCompetitionParameter.decode(reader, reader.uint32());
                            break;
                        }
                    case 41: {
                            message.ownedNameplates = reader.uint32();
                            break;
                        }
                    case 42: {
                            message.specialTitle = reader.uint32();
                            break;
                        }
                    case 43: {
                            message.earnedTitle = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("tuningPoint"))
                    throw $util.ProtocolError("missing required 'tuningPoint'", { instance: message });
                if (!message.hasOwnProperty("dressupPoint"))
                    throw $util.ProtocolError("missing required 'dressupPoint'", { instance: message });
                if (!message.hasOwnProperty("dressupLevel"))
                    throw $util.ProtocolError("missing required 'dressupLevel'", { instance: message });
                if (!message.hasOwnProperty("odometer"))
                    throw $util.ProtocolError("missing required 'odometer'", { instance: message });
                if (!message.hasOwnProperty("playCount"))
                    throw $util.ProtocolError("missing required 'playCount'", { instance: message });
                if (!message.hasOwnProperty("earnedCustomColor"))
                    throw $util.ProtocolError("missing required 'earnedCustomColor'", { instance: message });
                if (!message.hasOwnProperty("ownedCustomColors"))
                    throw $util.ProtocolError("missing required 'ownedCustomColors'", { instance: message });
                if (!message.hasOwnProperty("ownedDressupParts"))
                    throw $util.ProtocolError("missing required 'ownedDressupParts'", { instance: message });
                if (!message.hasOwnProperty("setting"))
                    throw $util.ProtocolError("missing required 'setting'", { instance: message });
                if (!message.hasOwnProperty("vsPlayCount"))
                    throw $util.ProtocolError("missing required 'vsPlayCount'", { instance: message });
                if (!message.hasOwnProperty("vsBurstCount"))
                    throw $util.ProtocolError("missing required 'vsBurstCount'", { instance: message });
                if (!message.hasOwnProperty("vsStarCount"))
                    throw $util.ProtocolError("missing required 'vsStarCount'", { instance: message });
                if (!message.hasOwnProperty("vsStarCountMax"))
                    throw $util.ProtocolError("missing required 'vsStarCountMax'", { instance: message });
                if (!message.hasOwnProperty("vsCoolOrWild"))
                    throw $util.ProtocolError("missing required 'vsCoolOrWild'", { instance: message });
                if (!message.hasOwnProperty("vsSmoothOrRough"))
                    throw $util.ProtocolError("missing required 'vsSmoothOrRough'", { instance: message });
                if (!message.hasOwnProperty("rgPlayCount"))
                    throw $util.ProtocolError("missing required 'rgPlayCount'", { instance: message });
                if (!message.hasOwnProperty("rgWinCount"))
                    throw $util.ProtocolError("missing required 'rgWinCount'", { instance: message });
                if (!message.hasOwnProperty("maxiCoin"))
                    throw $util.ProtocolError("missing required 'maxiCoin'", { instance: message });
                if (!message.hasOwnProperty("rgBlock"))
                    throw $util.ProtocolError("missing required 'rgBlock'", { instance: message });
                if (!message.hasOwnProperty("rgClearCount"))
                    throw $util.ProtocolError("missing required 'rgClearCount'", { instance: message });
                if (!message.hasOwnProperty("rgConsecutiveLosses"))
                    throw $util.ProtocolError("missing required 'rgConsecutiveLosses'", { instance: message });
                if (!message.hasOwnProperty("stPlayCount"))
                    throw $util.ProtocolError("missing required 'stPlayCount'", { instance: message });
                if (!message.hasOwnProperty("stClearBits"))
                    throw $util.ProtocolError("missing required 'stClearBits'", { instance: message });
                if (!message.hasOwnProperty("stClearDivCount"))
                    throw $util.ProtocolError("missing required 'stClearDivCount'", { instance: message });
                if (!message.hasOwnProperty("stClearCount"))
                    throw $util.ProtocolError("missing required 'stClearCount'", { instance: message });
                if (!message.hasOwnProperty("stLoseBits"))
                    throw $util.ProtocolError("missing required 'stLoseBits'", { instance: message });
                if (!message.hasOwnProperty("stLose"))
                    throw $util.ProtocolError("missing required 'stLose'", { instance: message });
                if (!message.hasOwnProperty("stConsecutiveWins"))
                    throw $util.ProtocolError("missing required 'stConsecutiveWins'", { instance: message });
                if (!message.hasOwnProperty("stConsecutiveWinsMax"))
                    throw $util.ProtocolError("missing required 'stConsecutiveWinsMax'", { instance: message });
                if (!message.hasOwnProperty("ownedMeters"))
                    throw $util.ProtocolError("missing required 'ownedMeters'", { instance: message });
                if (!message.hasOwnProperty("ownedBgm"))
                    throw $util.ProtocolError("missing required 'ownedBgm'", { instance: message });
                if (!message.hasOwnProperty("ownedNameplates"))
                    throw $util.ProtocolError("missing required 'ownedNameplates'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadCarResponse} LoadCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.tuningPoint))
                    return "tuningPoint: integer expected";
                if (!$util.isInteger(message.dressupPoint))
                    return "dressupPoint: integer expected";
                if (!$util.isInteger(message.dressupLevel))
                    return "dressupLevel: integer expected";
                if (!$util.isInteger(message.odometer))
                    return "odometer: integer expected";
                if (!$util.isInteger(message.playCount))
                    return "playCount: integer expected";
                if (typeof message.earnedCustomColor !== "boolean")
                    return "earnedCustomColor: boolean expected";
                if (!$util.isInteger(message.ownedCustomColors))
                    return "ownedCustomColors: integer expected";
                if (!$util.isInteger(message.ownedDressupParts))
                    return "ownedDressupParts: integer expected";
                {
                    let error = $root.v388.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (!$util.isInteger(message.vsPlayCount))
                    return "vsPlayCount: integer expected";
                if (!$util.isInteger(message.vsBurstCount))
                    return "vsBurstCount: integer expected";
                if (!$util.isInteger(message.vsStarCount))
                    return "vsStarCount: integer expected";
                if (!$util.isInteger(message.vsStarCountMax))
                    return "vsStarCountMax: integer expected";
                if (!$util.isInteger(message.vsCoolOrWild))
                    return "vsCoolOrWild: integer expected";
                if (!$util.isInteger(message.vsSmoothOrRough))
                    return "vsSmoothOrRough: integer expected";
                if (!$util.isInteger(message.rgPlayCount))
                    return "rgPlayCount: integer expected";
                if (!$util.isInteger(message.rgWinCount))
                    return "rgWinCount: integer expected";
                if (!$util.isInteger(message.maxiCoin))
                    return "maxiCoin: integer expected";
                if (!$util.isInteger(message.rgBlock))
                    return "rgBlock: integer expected";
                if (message.rgProgress != null && message.hasOwnProperty("rgProgress")) {
                    if (!Array.isArray(message.rgProgress))
                        return "rgProgress: array expected";
                    for (let i = 0; i < message.rgProgress.length; ++i)
                        if (!$util.isInteger(message.rgProgress[i]))
                            return "rgProgress: integer[] expected";
                }
                if (!$util.isInteger(message.rgClearCount))
                    return "rgClearCount: integer expected";
                if (!$util.isInteger(message.rgConsecutiveLosses))
                    return "rgConsecutiveLosses: integer expected";
                if (!$util.isInteger(message.stPlayCount))
                    return "stPlayCount: integer expected";
                if (!$util.isInteger(message.stClearBits))
                    return "stClearBits: integer expected";
                if (!$util.isInteger(message.stClearDivCount))
                    return "stClearDivCount: integer expected";
                if (!$util.isInteger(message.stClearCount))
                    return "stClearCount: integer expected";
                if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                    return "stLoseBits: integer|Long expected";
                if (typeof message.stLose !== "boolean")
                    return "stLose: boolean expected";
                if (!$util.isInteger(message.stConsecutiveWins))
                    return "stConsecutiveWins: integer expected";
                if (!$util.isInteger(message.stConsecutiveWinsMax))
                    return "stConsecutiveWinsMax: integer expected";
                if (!$util.isInteger(message.ownedMeters))
                    return "ownedMeters: integer expected";
                if (!$util.isInteger(message.ownedBgm))
                    return "ownedBgm: integer expected";
                if (message.challenger != null && message.hasOwnProperty("challenger")) {
                    let error = $root.v388.protobuf.GhostCar.verify(message.challenger);
                    if (error)
                        return "challenger." + error;
                }
                if (message.opponentGhost != null && message.hasOwnProperty("opponentGhost")) {
                    let error = $root.v388.protobuf.GhostCar.verify(message.opponentGhost);
                    if (error)
                        return "opponentGhost." + error;
                }
                if (message.opponentTrailId != null && message.hasOwnProperty("opponentTrailId"))
                    if (!$util.isInteger(message.opponentTrailId) && !(message.opponentTrailId && $util.isInteger(message.opponentTrailId.low) && $util.isInteger(message.opponentTrailId.high)))
                        return "opponentTrailId: integer|Long expected";
                if (message.opponentCompetitionId != null && message.hasOwnProperty("opponentCompetitionId"))
                    if (!$util.isInteger(message.opponentCompetitionId))
                        return "opponentCompetitionId: integer expected";
                if (message.competitionParameter != null && message.hasOwnProperty("competitionParameter")) {
                    let error = $root.v388.protobuf.GhostCompetitionParameter.verify(message.competitionParameter);
                    if (error)
                        return "competitionParameter." + error;
                }
                if (!$util.isInteger(message.ownedNameplates))
                    return "ownedNameplates: integer expected";
                if (message.specialTitle != null && message.hasOwnProperty("specialTitle"))
                    if (!$util.isInteger(message.specialTitle))
                        return "specialTitle: integer expected";
                if (message.earnedTitle != null && message.hasOwnProperty("earnedTitle"))
                    if (!$util.isInteger(message.earnedTitle))
                        return "earnedTitle: integer expected";
                return null;
            };

            /**
             * Creates a LoadCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadCarResponse} LoadCarResponse
             */
            LoadCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadCarResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.LoadCarResponse.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.tuningPoint != null)
                    message.tuningPoint = object.tuningPoint >>> 0;
                if (object.dressupPoint != null)
                    message.dressupPoint = object.dressupPoint >>> 0;
                if (object.dressupLevel != null)
                    message.dressupLevel = object.dressupLevel >>> 0;
                if (object.odometer != null)
                    message.odometer = object.odometer >>> 0;
                if (object.playCount != null)
                    message.playCount = object.playCount >>> 0;
                if (object.earnedCustomColor != null)
                    message.earnedCustomColor = Boolean(object.earnedCustomColor);
                if (object.ownedCustomColors != null)
                    message.ownedCustomColors = object.ownedCustomColors >>> 0;
                if (object.ownedDressupParts != null)
                    message.ownedDressupParts = object.ownedDressupParts >>> 0;
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".v388.protobuf.LoadCarResponse.setting: object expected");
                    message.setting = $root.v388.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.vsPlayCount != null)
                    message.vsPlayCount = object.vsPlayCount >>> 0;
                if (object.vsBurstCount != null)
                    message.vsBurstCount = object.vsBurstCount >>> 0;
                if (object.vsStarCount != null)
                    message.vsStarCount = object.vsStarCount >>> 0;
                if (object.vsStarCountMax != null)
                    message.vsStarCountMax = object.vsStarCountMax >>> 0;
                if (object.vsCoolOrWild != null)
                    message.vsCoolOrWild = object.vsCoolOrWild | 0;
                if (object.vsSmoothOrRough != null)
                    message.vsSmoothOrRough = object.vsSmoothOrRough | 0;
                if (object.rgPlayCount != null)
                    message.rgPlayCount = object.rgPlayCount >>> 0;
                if (object.rgWinCount != null)
                    message.rgWinCount = object.rgWinCount >>> 0;
                if (object.maxiCoin != null)
                    message.maxiCoin = object.maxiCoin >>> 0;
                if (object.rgBlock != null)
                    message.rgBlock = object.rgBlock >>> 0;
                if (object.rgProgress) {
                    if (!Array.isArray(object.rgProgress))
                        throw TypeError(".v388.protobuf.LoadCarResponse.rgProgress: array expected");
                    message.rgProgress = [];
                    for (let i = 0; i < object.rgProgress.length; ++i)
                        message.rgProgress[i] = object.rgProgress[i] >>> 0;
                }
                if (object.rgClearCount != null)
                    message.rgClearCount = object.rgClearCount >>> 0;
                if (object.rgConsecutiveLosses != null)
                    message.rgConsecutiveLosses = object.rgConsecutiveLosses >>> 0;
                if (object.stPlayCount != null)
                    message.stPlayCount = object.stPlayCount >>> 0;
                if (object.stClearBits != null)
                    message.stClearBits = object.stClearBits >>> 0;
                if (object.stClearDivCount != null)
                    message.stClearDivCount = object.stClearDivCount >>> 0;
                if (object.stClearCount != null)
                    message.stClearCount = object.stClearCount >>> 0;
                if (object.stLoseBits != null)
                    if ($util.Long)
                        (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                    else if (typeof object.stLoseBits === "string")
                        message.stLoseBits = parseInt(object.stLoseBits, 10);
                    else if (typeof object.stLoseBits === "number")
                        message.stLoseBits = object.stLoseBits;
                    else if (typeof object.stLoseBits === "object")
                        message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                if (object.stLose != null)
                    message.stLose = Boolean(object.stLose);
                if (object.stConsecutiveWins != null)
                    message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                if (object.stConsecutiveWinsMax != null)
                    message.stConsecutiveWinsMax = object.stConsecutiveWinsMax >>> 0;
                if (object.ownedMeters != null)
                    message.ownedMeters = object.ownedMeters >>> 0;
                if (object.ownedBgm != null)
                    message.ownedBgm = object.ownedBgm >>> 0;
                if (object.challenger != null) {
                    if (typeof object.challenger !== "object")
                        throw TypeError(".v388.protobuf.LoadCarResponse.challenger: object expected");
                    message.challenger = $root.v388.protobuf.GhostCar.fromObject(object.challenger);
                }
                if (object.opponentGhost != null) {
                    if (typeof object.opponentGhost !== "object")
                        throw TypeError(".v388.protobuf.LoadCarResponse.opponentGhost: object expected");
                    message.opponentGhost = $root.v388.protobuf.GhostCar.fromObject(object.opponentGhost);
                }
                if (object.opponentTrailId != null)
                    if ($util.Long)
                        (message.opponentTrailId = $util.Long.fromValue(object.opponentTrailId)).unsigned = true;
                    else if (typeof object.opponentTrailId === "string")
                        message.opponentTrailId = parseInt(object.opponentTrailId, 10);
                    else if (typeof object.opponentTrailId === "number")
                        message.opponentTrailId = object.opponentTrailId;
                    else if (typeof object.opponentTrailId === "object")
                        message.opponentTrailId = new $util.LongBits(object.opponentTrailId.low >>> 0, object.opponentTrailId.high >>> 0).toNumber(true);
                if (object.opponentCompetitionId != null)
                    message.opponentCompetitionId = object.opponentCompetitionId >>> 0;
                if (object.competitionParameter != null) {
                    if (typeof object.competitionParameter !== "object")
                        throw TypeError(".v388.protobuf.LoadCarResponse.competitionParameter: object expected");
                    message.competitionParameter = $root.v388.protobuf.GhostCompetitionParameter.fromObject(object.competitionParameter);
                }
                if (object.ownedNameplates != null)
                    message.ownedNameplates = object.ownedNameplates >>> 0;
                if (object.specialTitle != null)
                    message.specialTitle = object.specialTitle >>> 0;
                if (object.earnedTitle != null)
                    message.earnedTitle = object.earnedTitle >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {v388.protobuf.LoadCarResponse} message LoadCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rgProgress = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.car = null;
                    object.tuningPoint = 0;
                    object.dressupPoint = 0;
                    object.dressupLevel = 0;
                    object.odometer = 0;
                    object.playCount = 0;
                    object.earnedCustomColor = false;
                    object.ownedCustomColors = 0;
                    object.ownedDressupParts = 0;
                    object.setting = null;
                    object.vsPlayCount = 0;
                    object.vsBurstCount = 0;
                    object.vsStarCount = 0;
                    object.vsStarCountMax = 0;
                    object.vsCoolOrWild = 0;
                    object.vsSmoothOrRough = 0;
                    object.rgPlayCount = 0;
                    object.rgWinCount = 0;
                    object.maxiCoin = 0;
                    object.rgBlock = 0;
                    object.rgClearCount = 0;
                    object.rgConsecutiveLosses = 0;
                    object.stPlayCount = 0;
                    object.stClearBits = 0;
                    object.stClearDivCount = 0;
                    object.stClearCount = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stLoseBits = options.longs === String ? "0" : 0;
                    object.stLose = false;
                    object.stConsecutiveWins = 0;
                    object.stConsecutiveWinsMax = 0;
                    object.ownedMeters = 0;
                    object.ownedBgm = 0;
                    object.challenger = null;
                    object.opponentGhost = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.opponentTrailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.opponentTrailId = options.longs === String ? "0" : 0;
                    object.opponentCompetitionId = 0;
                    object.competitionParameter = null;
                    object.ownedNameplates = 0;
                    object.specialTitle = 0;
                    object.earnedTitle = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                    object.tuningPoint = message.tuningPoint;
                if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                    object.dressupPoint = message.dressupPoint;
                if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                    object.dressupLevel = message.dressupLevel;
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    object.odometer = message.odometer;
                if (message.playCount != null && message.hasOwnProperty("playCount"))
                    object.playCount = message.playCount;
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    object.earnedCustomColor = message.earnedCustomColor;
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    object.ownedCustomColors = message.ownedCustomColors;
                if (message.ownedDressupParts != null && message.hasOwnProperty("ownedDressupParts"))
                    object.ownedDressupParts = message.ownedDressupParts;
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.v388.protobuf.CarSetting.toObject(message.setting, options);
                if (message.vsPlayCount != null && message.hasOwnProperty("vsPlayCount"))
                    object.vsPlayCount = message.vsPlayCount;
                if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                    object.vsBurstCount = message.vsBurstCount;
                if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                    object.vsStarCount = message.vsStarCount;
                if (message.vsStarCountMax != null && message.hasOwnProperty("vsStarCountMax"))
                    object.vsStarCountMax = message.vsStarCountMax;
                if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                    object.vsCoolOrWild = message.vsCoolOrWild;
                if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                    object.vsSmoothOrRough = message.vsSmoothOrRough;
                if (message.rgPlayCount != null && message.hasOwnProperty("rgPlayCount"))
                    object.rgPlayCount = message.rgPlayCount;
                if (message.rgWinCount != null && message.hasOwnProperty("rgWinCount"))
                    object.rgWinCount = message.rgWinCount;
                if (message.maxiCoin != null && message.hasOwnProperty("maxiCoin"))
                    object.maxiCoin = message.maxiCoin;
                if (message.rgBlock != null && message.hasOwnProperty("rgBlock"))
                    object.rgBlock = message.rgBlock;
                if (message.rgProgress && message.rgProgress.length) {
                    object.rgProgress = [];
                    for (let j = 0; j < message.rgProgress.length; ++j)
                        object.rgProgress[j] = message.rgProgress[j];
                }
                if (message.rgClearCount != null && message.hasOwnProperty("rgClearCount"))
                    object.rgClearCount = message.rgClearCount;
                if (message.rgConsecutiveLosses != null && message.hasOwnProperty("rgConsecutiveLosses"))
                    object.rgConsecutiveLosses = message.rgConsecutiveLosses;
                if (message.stPlayCount != null && message.hasOwnProperty("stPlayCount"))
                    object.stPlayCount = message.stPlayCount;
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    object.stClearBits = message.stClearBits;
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    object.stClearDivCount = message.stClearDivCount;
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    object.stClearCount = message.stClearCount;
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (typeof message.stLoseBits === "number")
                        object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                    else
                        object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                if (message.stLose != null && message.hasOwnProperty("stLose"))
                    object.stLose = message.stLose;
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    object.stConsecutiveWins = message.stConsecutiveWins;
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    object.stConsecutiveWinsMax = message.stConsecutiveWinsMax;
                if (message.ownedMeters != null && message.hasOwnProperty("ownedMeters"))
                    object.ownedMeters = message.ownedMeters;
                if (message.ownedBgm != null && message.hasOwnProperty("ownedBgm"))
                    object.ownedBgm = message.ownedBgm;
                if (message.challenger != null && message.hasOwnProperty("challenger"))
                    object.challenger = $root.v388.protobuf.GhostCar.toObject(message.challenger, options);
                if (message.opponentGhost != null && message.hasOwnProperty("opponentGhost"))
                    object.opponentGhost = $root.v388.protobuf.GhostCar.toObject(message.opponentGhost, options);
                if (message.opponentTrailId != null && message.hasOwnProperty("opponentTrailId"))
                    if (typeof message.opponentTrailId === "number")
                        object.opponentTrailId = options.longs === String ? String(message.opponentTrailId) : message.opponentTrailId;
                    else
                        object.opponentTrailId = options.longs === String ? $util.Long.prototype.toString.call(message.opponentTrailId) : options.longs === Number ? new $util.LongBits(message.opponentTrailId.low >>> 0, message.opponentTrailId.high >>> 0).toNumber(true) : message.opponentTrailId;
                if (message.opponentCompetitionId != null && message.hasOwnProperty("opponentCompetitionId"))
                    object.opponentCompetitionId = message.opponentCompetitionId;
                if (message.competitionParameter != null && message.hasOwnProperty("competitionParameter"))
                    object.competitionParameter = $root.v388.protobuf.GhostCompetitionParameter.toObject(message.competitionParameter, options);
                if (message.ownedNameplates != null && message.hasOwnProperty("ownedNameplates"))
                    object.ownedNameplates = message.ownedNameplates;
                if (message.specialTitle != null && message.hasOwnProperty("specialTitle"))
                    object.specialTitle = message.specialTitle;
                if (message.earnedTitle != null && message.hasOwnProperty("earnedTitle"))
                    object.earnedTitle = message.earnedTitle;
                return object;
            };

            /**
             * Converts this LoadCarResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadCarResponse";
            };

            return LoadCarResponse;
        })();

        protobuf.CreateCarRequest = (function() {

            /**
             * Properties of a CreateCarRequest.
             * @memberof v388.protobuf
             * @interface ICreateCarRequest
             * @property {number|null} [userId] CreateCarRequest userId
             * @property {number|null} [banapassportAmId] CreateCarRequest banapassportAmId
             * @property {string|null} [cardChipId] CreateCarRequest cardChipId
             * @property {string|null} [accessCode] CreateCarRequest accessCode
             * @property {number|null} [cardTypeCode] CreateCarRequest cardTypeCode
             * @property {number|null} [cardRegionCode] CreateCarRequest cardRegionCode
             * @property {v388.protobuf.DeviceType|null} [device] CreateCarRequest device
             * @property {v388.protobuf.ICar} car CreateCarRequest car
             * @property {boolean} transmission CreateCarRequest transmission
             * @property {v388.protobuf.CarCreationMethod} method CreateCarRequest method
             * @property {number} timestamp CreateCarRequest timestamp
             */

            /**
             * Constructs a new CreateCarRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateCarRequest.
             * @implements ICreateCarRequest
             * @constructor
             * @param {v388.protobuf.ICreateCarRequest=} [properties] Properties to set
             */
            function CreateCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateCarRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.userId = 0;

            /**
             * CreateCarRequest banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.banapassportAmId = 0;

            /**
             * CreateCarRequest cardChipId.
             * @member {string} cardChipId
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardChipId = "";

            /**
             * CreateCarRequest accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.accessCode = "";

            /**
             * CreateCarRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardTypeCode = 0;

            /**
             * CreateCarRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardRegionCode = 0;

            /**
             * CreateCarRequest device.
             * @member {v388.protobuf.DeviceType} device
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.device = 0;

            /**
             * CreateCarRequest car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.car = null;

            /**
             * CreateCarRequest transmission.
             * @member {boolean} transmission
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.transmission = false;

            /**
             * CreateCarRequest method.
             * @member {v388.protobuf.CarCreationMethod} method
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.method = 0;

            /**
             * CreateCarRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.timestamp = 0;

            /**
             * Creates a new CreateCarRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {v388.protobuf.ICreateCarRequest=} [properties] Properties to set
             * @returns {v388.protobuf.CreateCarRequest} CreateCarRequest instance
             */
            CreateCarRequest.create = function create(properties) {
                return new CreateCarRequest(properties);
            };

            /**
             * Encodes the specified CreateCarRequest message. Does not implicitly {@link v388.protobuf.CreateCarRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {v388.protobuf.ICreateCarRequest} message CreateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.banapassportAmId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.device);
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.transmission);
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.method);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified CreateCarRequest message, length delimited. Does not implicitly {@link v388.protobuf.CreateCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {v388.protobuf.ICreateCarRequest} message CreateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateCarRequest} CreateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 4: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 5: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.device = reader.int32();
                            break;
                        }
                    case 8: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.transmission = reader.bool();
                            break;
                        }
                    case 10: {
                            message.method = reader.int32();
                            break;
                        }
                    case 11: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("transmission"))
                    throw $util.ProtocolError("missing required 'transmission'", { instance: message });
                if (!message.hasOwnProperty("method"))
                    throw $util.ProtocolError("missing required 'method'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateCarRequest} CreateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateCarRequest message.
             * @function verify
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (typeof message.transmission !== "boolean")
                    return "transmission: boolean expected";
                switch (message.method) {
                default:
                    return "method: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a CreateCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateCarRequest} CreateCarRequest
             */
            CreateCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateCarRequest)
                    return object;
                let message = new $root.v388.protobuf.CreateCarRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.CreateCarRequest.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.transmission != null)
                    message.transmission = Boolean(object.transmission);
                switch (object.method) {
                default:
                    if (typeof object.method === "number") {
                        message.method = object.method;
                        break;
                    }
                    break;
                case "CAR_NEW":
                case 0:
                    message.method = 0;
                    break;
                case "CAR_INHERITED":
                case 1:
                    message.method = 1;
                    break;
                case "CAR_HP600":
                case 2:
                    message.method = 2;
                    break;
                case "CAR_PROMOTION":
                case 3:
                    message.method = 3;
                    break;
                case "CAR_CAMPAIGN":
                case 4:
                    message.method = 4;
                    break;
                }
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {v388.protobuf.CreateCarRequest} message CreateCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.banapassportAmId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.car = null;
                    object.transmission = false;
                    object.method = options.enums === String ? "CAR_NEW" : 0;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.v388.protobuf.DeviceType[message.device] === undefined ? message.device : $root.v388.protobuf.DeviceType[message.device] : message.device;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.transmission != null && message.hasOwnProperty("transmission"))
                    object.transmission = message.transmission;
                if (message.method != null && message.hasOwnProperty("method"))
                    object.method = options.enums === String ? $root.v388.protobuf.CarCreationMethod[message.method] === undefined ? message.method : $root.v388.protobuf.CarCreationMethod[message.method] : message.method;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this CreateCarRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateCarRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateCarRequest";
            };

            return CreateCarRequest;
        })();

        protobuf.CreateCarResponse = (function() {

            /**
             * Properties of a CreateCarResponse.
             * @memberof v388.protobuf
             * @interface ICreateCarResponse
             * @property {v388.protobuf.ErrorCode} error CreateCarResponse error
             * @property {string|null} [accessCode] CreateCarResponse accessCode
             * @property {number|null} [banapassportAmId] CreateCarResponse banapassportAmId
             * @property {number|null} [personalId] CreateCarResponse personalId
             * @property {number} userId CreateCarResponse userId
             * @property {number} carId CreateCarResponse carId
             * @property {string} searchCode CreateCarResponse searchCode
             * @property {number|null} [stClearBits] CreateCarResponse stClearBits
             * @property {number|null} [stClearDivCount] CreateCarResponse stClearDivCount
             * @property {number|null} [stClearCount] CreateCarResponse stClearCount
             * @property {number|Long|null} [stLoseBits] CreateCarResponse stLoseBits
             * @property {boolean|null} [stLose] CreateCarResponse stLose
             * @property {number|null} [stConsecutiveWins] CreateCarResponse stConsecutiveWins
             * @property {number|null} [stConsecutiveWinsMax] CreateCarResponse stConsecutiveWinsMax
             */

            /**
             * Constructs a new CreateCarResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateCarResponse.
             * @implements ICreateCarResponse
             * @constructor
             * @param {v388.protobuf.ICreateCarResponse=} [properties] Properties to set
             */
            function CreateCarResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateCarResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.error = 0;

            /**
             * CreateCarResponse accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.accessCode = "";

            /**
             * CreateCarResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.banapassportAmId = 0;

            /**
             * CreateCarResponse personalId.
             * @member {number} personalId
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.personalId = 0;

            /**
             * CreateCarResponse userId.
             * @member {number} userId
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.userId = 0;

            /**
             * CreateCarResponse carId.
             * @member {number} carId
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.carId = 0;

            /**
             * CreateCarResponse searchCode.
             * @member {string} searchCode
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.searchCode = "";

            /**
             * CreateCarResponse stClearBits.
             * @member {number} stClearBits
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearBits = 0;

            /**
             * CreateCarResponse stClearDivCount.
             * @member {number} stClearDivCount
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearDivCount = 0;

            /**
             * CreateCarResponse stClearCount.
             * @member {number} stClearCount
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearCount = 0;

            /**
             * CreateCarResponse stLoseBits.
             * @member {number|Long} stLoseBits
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CreateCarResponse stLose.
             * @member {boolean} stLose
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stLose = false;

            /**
             * CreateCarResponse stConsecutiveWins.
             * @member {number} stConsecutiveWins
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stConsecutiveWins = 0;

            /**
             * CreateCarResponse stConsecutiveWinsMax.
             * @member {number} stConsecutiveWinsMax
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stConsecutiveWinsMax = 0;

            /**
             * Creates a new CreateCarResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {v388.protobuf.ICreateCarResponse=} [properties] Properties to set
             * @returns {v388.protobuf.CreateCarResponse} CreateCarResponse instance
             */
            CreateCarResponse.create = function create(properties) {
                return new CreateCarResponse(properties);
            };

            /**
             * Encodes the specified CreateCarResponse message. Does not implicitly {@link v388.protobuf.CreateCarResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {v388.protobuf.ICreateCarResponse} message CreateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.banapassportAmId);
                if (message.personalId != null && Object.hasOwnProperty.call(message, "personalId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.personalId);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.userId);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.carId);
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.searchCode);
                if (message.stClearBits != null && Object.hasOwnProperty.call(message, "stClearBits"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stClearBits);
                if (message.stClearDivCount != null && Object.hasOwnProperty.call(message, "stClearDivCount"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.stClearDivCount);
                if (message.stClearCount != null && Object.hasOwnProperty.call(message, "stClearCount"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.stClearCount);
                if (message.stLoseBits != null && Object.hasOwnProperty.call(message, "stLoseBits"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.stLoseBits);
                if (message.stLose != null && Object.hasOwnProperty.call(message, "stLose"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.stLose);
                if (message.stConsecutiveWins != null && Object.hasOwnProperty.call(message, "stConsecutiveWins"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.stConsecutiveWins);
                if (message.stConsecutiveWinsMax != null && Object.hasOwnProperty.call(message, "stConsecutiveWinsMax"))
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.stConsecutiveWinsMax);
                return writer;
            };

            /**
             * Encodes the specified CreateCarResponse message, length delimited. Does not implicitly {@link v388.protobuf.CreateCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {v388.protobuf.ICreateCarResponse} message CreateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateCarResponse} CreateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.personalId = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.searchCode = reader.string();
                            break;
                        }
                    case 8: {
                            message.stClearBits = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.stClearDivCount = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.stClearCount = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.stLoseBits = reader.uint64();
                            break;
                        }
                    case 12: {
                            message.stLose = reader.bool();
                            break;
                        }
                    case 13: {
                            message.stConsecutiveWins = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.stConsecutiveWinsMax = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("searchCode"))
                    throw $util.ProtocolError("missing required 'searchCode'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateCarResponse} CreateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateCarResponse message.
             * @function verify
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    if (!$util.isInteger(message.personalId))
                        return "personalId: integer expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isString(message.searchCode))
                    return "searchCode: string expected";
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    if (!$util.isInteger(message.stClearBits))
                        return "stClearBits: integer expected";
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    if (!$util.isInteger(message.stClearDivCount))
                        return "stClearDivCount: integer expected";
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    if (!$util.isInteger(message.stClearCount))
                        return "stClearCount: integer expected";
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                        return "stLoseBits: integer|Long expected";
                if (message.stLose != null && message.hasOwnProperty("stLose"))
                    if (typeof message.stLose !== "boolean")
                        return "stLose: boolean expected";
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    if (!$util.isInteger(message.stConsecutiveWins))
                        return "stConsecutiveWins: integer expected";
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    if (!$util.isInteger(message.stConsecutiveWinsMax))
                        return "stConsecutiveWinsMax: integer expected";
                return null;
            };

            /**
             * Creates a CreateCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateCarResponse} CreateCarResponse
             */
            CreateCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateCarResponse)
                    return object;
                let message = new $root.v388.protobuf.CreateCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.personalId != null)
                    message.personalId = object.personalId >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.searchCode != null)
                    message.searchCode = String(object.searchCode);
                if (object.stClearBits != null)
                    message.stClearBits = object.stClearBits >>> 0;
                if (object.stClearDivCount != null)
                    message.stClearDivCount = object.stClearDivCount >>> 0;
                if (object.stClearCount != null)
                    message.stClearCount = object.stClearCount >>> 0;
                if (object.stLoseBits != null)
                    if ($util.Long)
                        (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                    else if (typeof object.stLoseBits === "string")
                        message.stLoseBits = parseInt(object.stLoseBits, 10);
                    else if (typeof object.stLoseBits === "number")
                        message.stLoseBits = object.stLoseBits;
                    else if (typeof object.stLoseBits === "object")
                        message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                if (object.stLose != null)
                    message.stLose = Boolean(object.stLose);
                if (object.stConsecutiveWins != null)
                    message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                if (object.stConsecutiveWinsMax != null)
                    message.stConsecutiveWinsMax = object.stConsecutiveWinsMax >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {v388.protobuf.CreateCarResponse} message CreateCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.personalId = 0;
                    object.userId = 0;
                    object.carId = 0;
                    object.searchCode = "";
                    object.stClearBits = 0;
                    object.stClearDivCount = 0;
                    object.stClearCount = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stLoseBits = options.longs === String ? "0" : 0;
                    object.stLose = false;
                    object.stConsecutiveWins = 0;
                    object.stConsecutiveWinsMax = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    object.personalId = message.personalId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    object.searchCode = message.searchCode;
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    object.stClearBits = message.stClearBits;
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    object.stClearDivCount = message.stClearDivCount;
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    object.stClearCount = message.stClearCount;
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (typeof message.stLoseBits === "number")
                        object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                    else
                        object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                if (message.stLose != null && message.hasOwnProperty("stLose"))
                    object.stLose = message.stLose;
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    object.stConsecutiveWins = message.stConsecutiveWins;
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    object.stConsecutiveWinsMax = message.stConsecutiveWinsMax;
                return object;
            };

            /**
             * Converts this CreateCarResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateCarResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateCarResponse";
            };

            return CreateCarResponse;
        })();

        protobuf.LoadGameHistoryRequest = (function() {

            /**
             * Properties of a LoadGameHistoryRequest.
             * @memberof v388.protobuf
             * @interface ILoadGameHistoryRequest
             * @property {number} carId LoadGameHistoryRequest carId
             */

            /**
             * Constructs a new LoadGameHistoryRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGameHistoryRequest.
             * @implements ILoadGameHistoryRequest
             * @constructor
             * @param {v388.protobuf.ILoadGameHistoryRequest=} [properties] Properties to set
             */
            function LoadGameHistoryRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGameHistoryRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @instance
             */
            LoadGameHistoryRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGameHistoryRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGameHistoryRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest instance
             */
            LoadGameHistoryRequest.create = function create(properties) {
                return new LoadGameHistoryRequest(properties);
            };

            /**
             * Encodes the specified LoadGameHistoryRequest message. Does not implicitly {@link v388.protobuf.LoadGameHistoryRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGameHistoryRequest} message LoadGameHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGameHistoryRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadGameHistoryRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGameHistoryRequest} message LoadGameHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGameHistoryRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGameHistoryRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGameHistoryRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGameHistoryRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGameHistoryRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGameHistoryRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             */
            LoadGameHistoryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGameHistoryRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadGameHistoryRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGameHistoryRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {v388.protobuf.LoadGameHistoryRequest} message LoadGameHistoryRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGameHistoryRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGameHistoryRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGameHistoryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGameHistoryRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGameHistoryRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGameHistoryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGameHistoryRequest";
            };

            return LoadGameHistoryRequest;
        })();

        protobuf.LoadGameHistoryResponse = (function() {

            /**
             * Properties of a LoadGameHistoryResponse.
             * @memberof v388.protobuf
             * @interface ILoadGameHistoryResponse
             * @property {v388.protobuf.ErrorCode} error LoadGameHistoryResponse error
             * @property {Array.<v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord>|null} [taRecords] LoadGameHistoryResponse taRecords
             * @property {number} taRankingUpdatedAt LoadGameHistoryResponse taRankingUpdatedAt
             * @property {Array.<v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord>|null} [ghostHistory] LoadGameHistoryResponse ghostHistory
             * @property {number} ghostBattleCount LoadGameHistoryResponse ghostBattleCount
             * @property {number} ghostBattleWinCount LoadGameHistoryResponse ghostBattleWinCount
             */

            /**
             * Constructs a new LoadGameHistoryResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGameHistoryResponse.
             * @implements ILoadGameHistoryResponse
             * @constructor
             * @param {v388.protobuf.ILoadGameHistoryResponse=} [properties] Properties to set
             */
            function LoadGameHistoryResponse(properties) {
                this.taRecords = [];
                this.ghostHistory = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGameHistoryResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.error = 0;

            /**
             * LoadGameHistoryResponse taRecords.
             * @member {Array.<v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord>} taRecords
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.taRecords = $util.emptyArray;

            /**
             * LoadGameHistoryResponse taRankingUpdatedAt.
             * @member {number} taRankingUpdatedAt
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.taRankingUpdatedAt = 0;

            /**
             * LoadGameHistoryResponse ghostHistory.
             * @member {Array.<v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord>} ghostHistory
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostHistory = $util.emptyArray;

            /**
             * LoadGameHistoryResponse ghostBattleCount.
             * @member {number} ghostBattleCount
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostBattleCount = 0;

            /**
             * LoadGameHistoryResponse ghostBattleWinCount.
             * @member {number} ghostBattleWinCount
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostBattleWinCount = 0;

            /**
             * Creates a new LoadGameHistoryResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGameHistoryResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse instance
             */
            LoadGameHistoryResponse.create = function create(properties) {
                return new LoadGameHistoryResponse(properties);
            };

            /**
             * Encodes the specified LoadGameHistoryResponse message. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGameHistoryResponse} message LoadGameHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.taRecords != null && message.taRecords.length)
                    for (let i = 0; i < message.taRecords.length; ++i)
                        $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.encode(message.taRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.taRankingUpdatedAt);
                if (message.ghostHistory != null && message.ghostHistory.length)
                    for (let i = 0; i < message.ghostHistory.length; ++i)
                        $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.encode(message.ghostHistory[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ghostBattleCount);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ghostBattleWinCount);
                return writer;
            };

            /**
             * Encodes the specified LoadGameHistoryResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGameHistoryResponse} message LoadGameHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGameHistoryResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGameHistoryResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.taRecords && message.taRecords.length))
                                message.taRecords = [];
                            message.taRecords.push($root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.taRankingUpdatedAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            if (!(message.ghostHistory && message.ghostHistory.length))
                                message.ghostHistory = [];
                            message.ghostHistory.push($root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            message.ghostBattleCount = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.ghostBattleWinCount = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("taRankingUpdatedAt"))
                    throw $util.ProtocolError("missing required 'taRankingUpdatedAt'", { instance: message });
                if (!message.hasOwnProperty("ghostBattleCount"))
                    throw $util.ProtocolError("missing required 'ghostBattleCount'", { instance: message });
                if (!message.hasOwnProperty("ghostBattleWinCount"))
                    throw $util.ProtocolError("missing required 'ghostBattleWinCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGameHistoryResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGameHistoryResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGameHistoryResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.taRecords != null && message.hasOwnProperty("taRecords")) {
                    if (!Array.isArray(message.taRecords))
                        return "taRecords: array expected";
                    for (let i = 0; i < message.taRecords.length; ++i) {
                        let error = $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify(message.taRecords[i]);
                        if (error)
                            return "taRecords." + error;
                    }
                }
                if (!$util.isInteger(message.taRankingUpdatedAt))
                    return "taRankingUpdatedAt: integer expected";
                if (message.ghostHistory != null && message.hasOwnProperty("ghostHistory")) {
                    if (!Array.isArray(message.ghostHistory))
                        return "ghostHistory: array expected";
                    for (let i = 0; i < message.ghostHistory.length; ++i) {
                        let error = $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify(message.ghostHistory[i]);
                        if (error)
                            return "ghostHistory." + error;
                    }
                }
                if (!$util.isInteger(message.ghostBattleCount))
                    return "ghostBattleCount: integer expected";
                if (!$util.isInteger(message.ghostBattleWinCount))
                    return "ghostBattleWinCount: integer expected";
                return null;
            };

            /**
             * Creates a LoadGameHistoryResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             */
            LoadGameHistoryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGameHistoryResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadGameHistoryResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.taRecords) {
                    if (!Array.isArray(object.taRecords))
                        throw TypeError(".v388.protobuf.LoadGameHistoryResponse.taRecords: array expected");
                    message.taRecords = [];
                    for (let i = 0; i < object.taRecords.length; ++i) {
                        if (typeof object.taRecords[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGameHistoryResponse.taRecords: object expected");
                        message.taRecords[i] = $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.fromObject(object.taRecords[i]);
                    }
                }
                if (object.taRankingUpdatedAt != null)
                    message.taRankingUpdatedAt = object.taRankingUpdatedAt >>> 0;
                if (object.ghostHistory) {
                    if (!Array.isArray(object.ghostHistory))
                        throw TypeError(".v388.protobuf.LoadGameHistoryResponse.ghostHistory: array expected");
                    message.ghostHistory = [];
                    for (let i = 0; i < object.ghostHistory.length; ++i) {
                        if (typeof object.ghostHistory[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGameHistoryResponse.ghostHistory: object expected");
                        message.ghostHistory[i] = $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.fromObject(object.ghostHistory[i]);
                    }
                }
                if (object.ghostBattleCount != null)
                    message.ghostBattleCount = object.ghostBattleCount >>> 0;
                if (object.ghostBattleWinCount != null)
                    message.ghostBattleWinCount = object.ghostBattleWinCount >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGameHistoryResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {v388.protobuf.LoadGameHistoryResponse} message LoadGameHistoryResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGameHistoryResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.taRecords = [];
                    object.ghostHistory = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.taRankingUpdatedAt = 0;
                    object.ghostBattleCount = 0;
                    object.ghostBattleWinCount = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.taRecords && message.taRecords.length) {
                    object.taRecords = [];
                    for (let j = 0; j < message.taRecords.length; ++j)
                        object.taRecords[j] = $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.toObject(message.taRecords[j], options);
                }
                if (message.taRankingUpdatedAt != null && message.hasOwnProperty("taRankingUpdatedAt"))
                    object.taRankingUpdatedAt = message.taRankingUpdatedAt;
                if (message.ghostHistory && message.ghostHistory.length) {
                    object.ghostHistory = [];
                    for (let j = 0; j < message.ghostHistory.length; ++j)
                        object.ghostHistory[j] = $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.toObject(message.ghostHistory[j], options);
                }
                if (message.ghostBattleCount != null && message.hasOwnProperty("ghostBattleCount"))
                    object.ghostBattleCount = message.ghostBattleCount;
                if (message.ghostBattleWinCount != null && message.hasOwnProperty("ghostBattleWinCount"))
                    object.ghostBattleWinCount = message.ghostBattleWinCount;
                return object;
            };

            /**
             * Converts this LoadGameHistoryResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGameHistoryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGameHistoryResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGameHistoryResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGameHistoryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGameHistoryResponse";
            };

            LoadGameHistoryResponse.TimeAttackRecord = (function() {

                /**
                 * Properties of a TimeAttackRecord.
                 * @memberof v388.protobuf.LoadGameHistoryResponse
                 * @interface ITimeAttackRecord
                 * @property {number} course TimeAttackRecord course
                 * @property {number|null} [time] TimeAttackRecord time
                 * @property {number|null} [tunePower] TimeAttackRecord tunePower
                 * @property {number|null} [tuneHandling] TimeAttackRecord tuneHandling
                 * @property {number|null} [wholeRank] TimeAttackRecord wholeRank
                 * @property {number} wholeParticipants TimeAttackRecord wholeParticipants
                 * @property {number|null} [modelRank] TimeAttackRecord modelRank
                 * @property {number} modelParticipants TimeAttackRecord modelParticipants
                 */

                /**
                 * Constructs a new TimeAttackRecord.
                 * @memberof v388.protobuf.LoadGameHistoryResponse
                 * @classdesc Represents a TimeAttackRecord.
                 * @implements ITimeAttackRecord
                 * @constructor
                 * @param {v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord=} [properties] Properties to set
                 */
                function TimeAttackRecord(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TimeAttackRecord course.
                 * @member {number} course
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.course = 0;

                /**
                 * TimeAttackRecord time.
                 * @member {number} time
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.time = 0;

                /**
                 * TimeAttackRecord tunePower.
                 * @member {number} tunePower
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.tunePower = 0;

                /**
                 * TimeAttackRecord tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.tuneHandling = 0;

                /**
                 * TimeAttackRecord wholeRank.
                 * @member {number} wholeRank
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.wholeRank = 0;

                /**
                 * TimeAttackRecord wholeParticipants.
                 * @member {number} wholeParticipants
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.wholeParticipants = 0;

                /**
                 * TimeAttackRecord modelRank.
                 * @member {number} modelRank
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.modelRank = 0;

                /**
                 * TimeAttackRecord modelParticipants.
                 * @member {number} modelParticipants
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.modelParticipants = 0;

                /**
                 * Creates a new TimeAttackRecord instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord instance
                 */
                TimeAttackRecord.create = function create(properties) {
                    return new TimeAttackRecord(properties);
                };

                /**
                 * Encodes the specified TimeAttackRecord message. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord} message TimeAttackRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.course);
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                    if (message.tunePower != null && Object.hasOwnProperty.call(message, "tunePower"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tunePower);
                    if (message.tuneHandling != null && Object.hasOwnProperty.call(message, "tuneHandling"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tuneHandling);
                    if (message.wholeRank != null && Object.hasOwnProperty.call(message, "wholeRank"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wholeRank);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.wholeParticipants);
                    if (message.modelRank != null && Object.hasOwnProperty.call(message, "modelRank"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.modelRank);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.modelParticipants);
                    return writer;
                };

                /**
                 * Encodes the specified TimeAttackRecord message, length delimited. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.ITimeAttackRecord} message TimeAttackRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TimeAttackRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.course = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.time = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.wholeRank = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.wholeParticipants = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.modelRank = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.modelParticipants = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("course"))
                        throw $util.ProtocolError("missing required 'course'", { instance: message });
                    if (!message.hasOwnProperty("wholeParticipants"))
                        throw $util.ProtocolError("missing required 'wholeParticipants'", { instance: message });
                    if (!message.hasOwnProperty("modelParticipants"))
                        throw $util.ProtocolError("missing required 'modelParticipants'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TimeAttackRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TimeAttackRecord message.
                 * @function verify
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeAttackRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.course))
                        return "course: integer expected";
                    if (message.time != null && message.hasOwnProperty("time"))
                        if (!$util.isInteger(message.time))
                            return "time: integer expected";
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        if (!$util.isInteger(message.tunePower))
                            return "tunePower: integer expected";
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        if (!$util.isInteger(message.tuneHandling))
                            return "tuneHandling: integer expected";
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        if (!$util.isInteger(message.wholeRank))
                            return "wholeRank: integer expected";
                    if (!$util.isInteger(message.wholeParticipants))
                        return "wholeParticipants: integer expected";
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        if (!$util.isInteger(message.modelRank))
                            return "modelRank: integer expected";
                    if (!$util.isInteger(message.modelParticipants))
                        return "modelParticipants: integer expected";
                    return null;
                };

                /**
                 * Creates a TimeAttackRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 */
                TimeAttackRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord)
                        return object;
                    let message = new $root.v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord();
                    if (object.course != null)
                        message.course = object.course >>> 0;
                    if (object.time != null)
                        message.time = object.time >>> 0;
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.wholeRank != null)
                        message.wholeRank = object.wholeRank >>> 0;
                    if (object.wholeParticipants != null)
                        message.wholeParticipants = object.wholeParticipants >>> 0;
                    if (object.modelRank != null)
                        message.modelRank = object.modelRank >>> 0;
                    if (object.modelParticipants != null)
                        message.modelParticipants = object.modelParticipants >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TimeAttackRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord} message TimeAttackRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeAttackRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.course = 0;
                        object.time = 0;
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.wholeRank = 0;
                        object.wholeParticipants = 0;
                        object.modelRank = 0;
                        object.modelParticipants = 0;
                    }
                    if (message.course != null && message.hasOwnProperty("course"))
                        object.course = message.course;
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = message.time;
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        object.wholeRank = message.wholeRank;
                    if (message.wholeParticipants != null && message.hasOwnProperty("wholeParticipants"))
                        object.wholeParticipants = message.wholeParticipants;
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        object.modelRank = message.modelRank;
                    if (message.modelParticipants != null && message.hasOwnProperty("modelParticipants"))
                        object.modelParticipants = message.modelParticipants;
                    return object;
                };

                /**
                 * Converts this TimeAttackRecord to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeAttackRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TimeAttackRecord
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TimeAttackRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadGameHistoryResponse.TimeAttackRecord";
                };

                return TimeAttackRecord;
            })();

            LoadGameHistoryResponse.GhostBattleRecord = (function() {

                /**
                 * Properties of a GhostBattleRecord.
                 * @memberof v388.protobuf.LoadGameHistoryResponse
                 * @interface IGhostBattleRecord
                 * @property {string} opponentName GhostBattleRecord opponentName
                 * @property {number} opponentModel GhostBattleRecord opponentModel
                 * @property {number} opponentVisualModel GhostBattleRecord opponentVisualModel
                 * @property {number} opponentDefaultColor GhostBattleRecord opponentDefaultColor
                 * @property {number} opponentRegionId GhostBattleRecord opponentRegionId
                 * @property {number} opponentTunePower GhostBattleRecord opponentTunePower
                 * @property {number} opponentTuneHandling GhostBattleRecord opponentTuneHandling
                 * @property {number} area GhostBattleRecord area
                 * @property {number} result GhostBattleRecord result
                 * @property {number} playedAt GhostBattleRecord playedAt
                 * @property {string} playedShopName GhostBattleRecord playedShopName
                 */

                /**
                 * Constructs a new GhostBattleRecord.
                 * @memberof v388.protobuf.LoadGameHistoryResponse
                 * @classdesc Represents a GhostBattleRecord.
                 * @implements IGhostBattleRecord
                 * @constructor
                 * @param {v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord=} [properties] Properties to set
                 */
                function GhostBattleRecord(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostBattleRecord opponentName.
                 * @member {string} opponentName
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentName = "";

                /**
                 * GhostBattleRecord opponentModel.
                 * @member {number} opponentModel
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentModel = 0;

                /**
                 * GhostBattleRecord opponentVisualModel.
                 * @member {number} opponentVisualModel
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentVisualModel = 0;

                /**
                 * GhostBattleRecord opponentDefaultColor.
                 * @member {number} opponentDefaultColor
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentDefaultColor = 0;

                /**
                 * GhostBattleRecord opponentRegionId.
                 * @member {number} opponentRegionId
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentRegionId = 0;

                /**
                 * GhostBattleRecord opponentTunePower.
                 * @member {number} opponentTunePower
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentTunePower = 0;

                /**
                 * GhostBattleRecord opponentTuneHandling.
                 * @member {number} opponentTuneHandling
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponentTuneHandling = 0;

                /**
                 * GhostBattleRecord area.
                 * @member {number} area
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.area = 0;

                /**
                 * GhostBattleRecord result.
                 * @member {number} result
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.result = 0;

                /**
                 * GhostBattleRecord playedAt.
                 * @member {number} playedAt
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.playedAt = 0;

                /**
                 * GhostBattleRecord playedShopName.
                 * @member {string} playedShopName
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.playedShopName = "";

                /**
                 * Creates a new GhostBattleRecord instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord instance
                 */
                GhostBattleRecord.create = function create(properties) {
                    return new GhostBattleRecord(properties);
                };

                /**
                 * Encodes the specified GhostBattleRecord message. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord} message GhostBattleRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.opponentName);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.opponentModel);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opponentVisualModel);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.opponentDefaultColor);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.opponentRegionId);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.opponentTunePower);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.opponentTuneHandling);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.area);
                    writer.uint32(/* id 9, wireType 0 =*/72).sint32(message.result);
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.playedAt);
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.playedShopName);
                    return writer;
                };

                /**
                 * Encodes the specified GhostBattleRecord message, length delimited. Does not implicitly {@link v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.IGhostBattleRecord} message GhostBattleRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostBattleRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.opponentName = reader.string();
                                break;
                            }
                        case 2: {
                                message.opponentModel = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.opponentVisualModel = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.opponentDefaultColor = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.opponentRegionId = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.opponentTunePower = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.opponentTuneHandling = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 10: {
                                message.playedAt = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.playedShopName = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("opponentName"))
                        throw $util.ProtocolError("missing required 'opponentName'", { instance: message });
                    if (!message.hasOwnProperty("opponentModel"))
                        throw $util.ProtocolError("missing required 'opponentModel'", { instance: message });
                    if (!message.hasOwnProperty("opponentVisualModel"))
                        throw $util.ProtocolError("missing required 'opponentVisualModel'", { instance: message });
                    if (!message.hasOwnProperty("opponentDefaultColor"))
                        throw $util.ProtocolError("missing required 'opponentDefaultColor'", { instance: message });
                    if (!message.hasOwnProperty("opponentRegionId"))
                        throw $util.ProtocolError("missing required 'opponentRegionId'", { instance: message });
                    if (!message.hasOwnProperty("opponentTunePower"))
                        throw $util.ProtocolError("missing required 'opponentTunePower'", { instance: message });
                    if (!message.hasOwnProperty("opponentTuneHandling"))
                        throw $util.ProtocolError("missing required 'opponentTuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("playedAt"))
                        throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                    if (!message.hasOwnProperty("playedShopName"))
                        throw $util.ProtocolError("missing required 'playedShopName'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostBattleRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostBattleRecord message.
                 * @function verify
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostBattleRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.opponentName))
                        return "opponentName: string expected";
                    if (!$util.isInteger(message.opponentModel))
                        return "opponentModel: integer expected";
                    if (!$util.isInteger(message.opponentVisualModel))
                        return "opponentVisualModel: integer expected";
                    if (!$util.isInteger(message.opponentDefaultColor))
                        return "opponentDefaultColor: integer expected";
                    if (!$util.isInteger(message.opponentRegionId))
                        return "opponentRegionId: integer expected";
                    if (!$util.isInteger(message.opponentTunePower))
                        return "opponentTunePower: integer expected";
                    if (!$util.isInteger(message.opponentTuneHandling))
                        return "opponentTuneHandling: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                    if (!$util.isString(message.playedShopName))
                        return "playedShopName: string expected";
                    return null;
                };

                /**
                 * Creates a GhostBattleRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 */
                GhostBattleRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord)
                        return object;
                    let message = new $root.v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord();
                    if (object.opponentName != null)
                        message.opponentName = String(object.opponentName);
                    if (object.opponentModel != null)
                        message.opponentModel = object.opponentModel >>> 0;
                    if (object.opponentVisualModel != null)
                        message.opponentVisualModel = object.opponentVisualModel >>> 0;
                    if (object.opponentDefaultColor != null)
                        message.opponentDefaultColor = object.opponentDefaultColor >>> 0;
                    if (object.opponentRegionId != null)
                        message.opponentRegionId = object.opponentRegionId >>> 0;
                    if (object.opponentTunePower != null)
                        message.opponentTunePower = object.opponentTunePower >>> 0;
                    if (object.opponentTuneHandling != null)
                        message.opponentTuneHandling = object.opponentTuneHandling >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.playedAt != null)
                        message.playedAt = object.playedAt >>> 0;
                    if (object.playedShopName != null)
                        message.playedShopName = String(object.playedShopName);
                    return message;
                };

                /**
                 * Creates a plain object from a GhostBattleRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord} message GhostBattleRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostBattleRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.opponentName = "";
                        object.opponentModel = 0;
                        object.opponentVisualModel = 0;
                        object.opponentDefaultColor = 0;
                        object.opponentRegionId = 0;
                        object.opponentTunePower = 0;
                        object.opponentTuneHandling = 0;
                        object.area = 0;
                        object.result = 0;
                        object.playedAt = 0;
                        object.playedShopName = "";
                    }
                    if (message.opponentName != null && message.hasOwnProperty("opponentName"))
                        object.opponentName = message.opponentName;
                    if (message.opponentModel != null && message.hasOwnProperty("opponentModel"))
                        object.opponentModel = message.opponentModel;
                    if (message.opponentVisualModel != null && message.hasOwnProperty("opponentVisualModel"))
                        object.opponentVisualModel = message.opponentVisualModel;
                    if (message.opponentDefaultColor != null && message.hasOwnProperty("opponentDefaultColor"))
                        object.opponentDefaultColor = message.opponentDefaultColor;
                    if (message.opponentRegionId != null && message.hasOwnProperty("opponentRegionId"))
                        object.opponentRegionId = message.opponentRegionId;
                    if (message.opponentTunePower != null && message.hasOwnProperty("opponentTunePower"))
                        object.opponentTunePower = message.opponentTunePower;
                    if (message.opponentTuneHandling != null && message.hasOwnProperty("opponentTuneHandling"))
                        object.opponentTuneHandling = message.opponentTuneHandling;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                        object.playedAt = message.playedAt;
                    if (message.playedShopName != null && message.hasOwnProperty("playedShopName"))
                        object.playedShopName = message.playedShopName;
                    return object;
                };

                /**
                 * Converts this GhostBattleRecord to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostBattleRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostBattleRecord
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostBattleRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadGameHistoryResponse.GhostBattleRecord";
                };

                return GhostBattleRecord;
            })();

            return LoadGameHistoryResponse;
        })();

        protobuf.UpdateCarRequest = (function() {

            /**
             * Properties of an UpdateCarRequest.
             * @memberof v388.protobuf
             * @interface IUpdateCarRequest
             * @property {number} carId UpdateCarRequest carId
             * @property {v388.protobuf.ICar|null} [car] UpdateCarRequest car
             * @property {number|null} [hp600Count] UpdateCarRequest hp600Count
             * @property {number|null} [ownedCustomColors] UpdateCarRequest ownedCustomColors
             * @property {v388.protobuf.ICarSetting|null} [setting] UpdateCarRequest setting
             * @property {number} timestamp UpdateCarRequest timestamp
             */

            /**
             * Constructs a new UpdateCarRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateCarRequest.
             * @implements IUpdateCarRequest
             * @constructor
             * @param {v388.protobuf.IUpdateCarRequest=} [properties] Properties to set
             */
            function UpdateCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateCarRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.carId = 0;

            /**
             * UpdateCarRequest car.
             * @member {v388.protobuf.ICar|null|undefined} car
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.car = null;

            /**
             * UpdateCarRequest hp600Count.
             * @member {number} hp600Count
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.hp600Count = 0;

            /**
             * UpdateCarRequest ownedCustomColors.
             * @member {number} ownedCustomColors
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.ownedCustomColors = 0;

            /**
             * UpdateCarRequest setting.
             * @member {v388.protobuf.ICarSetting|null|undefined} setting
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.setting = null;

            /**
             * UpdateCarRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.timestamp = 0;

            /**
             * Creates a new UpdateCarRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {v388.protobuf.IUpdateCarRequest=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateCarRequest} UpdateCarRequest instance
             */
            UpdateCarRequest.create = function create(properties) {
                return new UpdateCarRequest(properties);
            };

            /**
             * Encodes the specified UpdateCarRequest message. Does not implicitly {@link v388.protobuf.UpdateCarRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {v388.protobuf.IUpdateCarRequest} message UpdateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.car != null && Object.hasOwnProperty.call(message, "car"))
                    $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.hp600Count != null && Object.hasOwnProperty.call(message, "hp600Count"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.hp600Count);
                if (message.ownedCustomColors != null && Object.hasOwnProperty.call(message, "ownedCustomColors"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ownedCustomColors);
                if (message.setting != null && Object.hasOwnProperty.call(message, "setting"))
                    $root.v388.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified UpdateCarRequest message, length delimited. Does not implicitly {@link v388.protobuf.UpdateCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {v388.protobuf.IUpdateCarRequest} message UpdateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateCarRequest} UpdateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.hp600Count = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.ownedCustomColors = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.setting = $root.v388.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateCarRequest} UpdateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateCarRequest message.
             * @function verify
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.car != null && message.hasOwnProperty("car")) {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    if (!$util.isInteger(message.hp600Count))
                        return "hp600Count: integer expected";
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    if (!$util.isInteger(message.ownedCustomColors))
                        return "ownedCustomColors: integer expected";
                if (message.setting != null && message.hasOwnProperty("setting")) {
                    let error = $root.v388.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates an UpdateCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateCarRequest} UpdateCarRequest
             */
            UpdateCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateCarRequest)
                    return object;
                let message = new $root.v388.protobuf.UpdateCarRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.UpdateCarRequest.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.hp600Count != null)
                    message.hp600Count = object.hp600Count >>> 0;
                if (object.ownedCustomColors != null)
                    message.ownedCustomColors = object.ownedCustomColors >>> 0;
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".v388.protobuf.UpdateCarRequest.setting: object expected");
                    message.setting = $root.v388.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {v388.protobuf.UpdateCarRequest} message UpdateCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.car = null;
                    object.hp600Count = 0;
                    object.ownedCustomColors = 0;
                    object.setting = null;
                    object.timestamp = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    object.hp600Count = message.hp600Count;
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    object.ownedCustomColors = message.ownedCustomColors;
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.v388.protobuf.CarSetting.toObject(message.setting, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this UpdateCarRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateCarRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateCarRequest";
            };

            return UpdateCarRequest;
        })();

        protobuf.UpdateCarResponse = (function() {

            /**
             * Properties of an UpdateCarResponse.
             * @memberof v388.protobuf
             * @interface IUpdateCarResponse
             * @property {v388.protobuf.ErrorCode} error UpdateCarResponse error
             */

            /**
             * Constructs a new UpdateCarResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateCarResponse.
             * @implements IUpdateCarResponse
             * @constructor
             * @param {v388.protobuf.IUpdateCarResponse=} [properties] Properties to set
             */
            function UpdateCarResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateCarResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.UpdateCarResponse
             * @instance
             */
            UpdateCarResponse.prototype.error = 0;

            /**
             * Creates a new UpdateCarResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {v388.protobuf.IUpdateCarResponse=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateCarResponse} UpdateCarResponse instance
             */
            UpdateCarResponse.create = function create(properties) {
                return new UpdateCarResponse(properties);
            };

            /**
             * Encodes the specified UpdateCarResponse message. Does not implicitly {@link v388.protobuf.UpdateCarResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {v388.protobuf.IUpdateCarResponse} message UpdateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified UpdateCarResponse message, length delimited. Does not implicitly {@link v388.protobuf.UpdateCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {v388.protobuf.IUpdateCarResponse} message UpdateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateCarResponse} UpdateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateCarResponse} UpdateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateCarResponse message.
             * @function verify
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates an UpdateCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateCarResponse} UpdateCarResponse
             */
            UpdateCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateCarResponse)
                    return object;
                let message = new $root.v388.protobuf.UpdateCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {v388.protobuf.UpdateCarResponse} message UpdateCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this UpdateCarResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateCarResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateCarResponse";
            };

            return UpdateCarResponse;
        })();

        protobuf.SaveGameResultRequest = (function() {

            /**
             * Properties of a SaveGameResultRequest.
             * @memberof v388.protobuf
             * @interface ISaveGameResultRequest
             * @property {number} carId SaveGameResultRequest carId
             * @property {v388.protobuf.GameMode} gameMode SaveGameResultRequest gameMode
             * @property {number} playedAt SaveGameResultRequest playedAt
             * @property {number} playCount SaveGameResultRequest playCount
             * @property {boolean} retired SaveGameResultRequest retired
             * @property {boolean} timeup SaveGameResultRequest timeup
             * @property {v388.protobuf.ICar|null} [car] SaveGameResultRequest car
             * @property {v388.protobuf.ICarSetting|null} [setting] SaveGameResultRequest setting
             * @property {number|null} [odometer] SaveGameResultRequest odometer
             * @property {number|null} [tutorials] SaveGameResultRequest tutorials
             * @property {number|null} [hp600Count] SaveGameResultRequest hp600Count
             * @property {boolean|null} [earnedCustomColor] SaveGameResultRequest earnedCustomColor
             * @property {number|null} [ownedCustomColors] SaveGameResultRequest ownedCustomColors
             * @property {v388.protobuf.SaveGameResultRequest.IStoryResult|null} [stResult] SaveGameResultRequest stResult
             * @property {v388.protobuf.SaveGameResultRequest.ITimeAttackResult|null} [taResult] SaveGameResultRequest taResult
             * @property {v388.protobuf.SaveGameResultRequest.IVersusBattleResult|null} [vsResult] SaveGameResultRequest vsResult
             * @property {v388.protobuf.SaveGameResultRequest.IGhostBattleResult|null} [rgResult] SaveGameResultRequest rgResult
             */

            /**
             * Constructs a new SaveGameResultRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveGameResultRequest.
             * @implements ISaveGameResultRequest
             * @constructor
             * @param {v388.protobuf.ISaveGameResultRequest=} [properties] Properties to set
             */
            function SaveGameResultRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveGameResultRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.carId = 0;

            /**
             * SaveGameResultRequest gameMode.
             * @member {v388.protobuf.GameMode} gameMode
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.gameMode = 1;

            /**
             * SaveGameResultRequest playedAt.
             * @member {number} playedAt
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.playedAt = 0;

            /**
             * SaveGameResultRequest playCount.
             * @member {number} playCount
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.playCount = 0;

            /**
             * SaveGameResultRequest retired.
             * @member {boolean} retired
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.retired = false;

            /**
             * SaveGameResultRequest timeup.
             * @member {boolean} timeup
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.timeup = false;

            /**
             * SaveGameResultRequest car.
             * @member {v388.protobuf.ICar|null|undefined} car
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.car = null;

            /**
             * SaveGameResultRequest setting.
             * @member {v388.protobuf.ICarSetting|null|undefined} setting
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.setting = null;

            /**
             * SaveGameResultRequest odometer.
             * @member {number} odometer
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.odometer = 0;

            /**
             * SaveGameResultRequest tutorials.
             * @member {number} tutorials
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.tutorials = 0;

            /**
             * SaveGameResultRequest hp600Count.
             * @member {number} hp600Count
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.hp600Count = 0;

            /**
             * SaveGameResultRequest earnedCustomColor.
             * @member {boolean} earnedCustomColor
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.earnedCustomColor = false;

            /**
             * SaveGameResultRequest ownedCustomColors.
             * @member {number} ownedCustomColors
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.ownedCustomColors = 0;

            /**
             * SaveGameResultRequest stResult.
             * @member {v388.protobuf.SaveGameResultRequest.IStoryResult|null|undefined} stResult
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.stResult = null;

            /**
             * SaveGameResultRequest taResult.
             * @member {v388.protobuf.SaveGameResultRequest.ITimeAttackResult|null|undefined} taResult
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.taResult = null;

            /**
             * SaveGameResultRequest vsResult.
             * @member {v388.protobuf.SaveGameResultRequest.IVersusBattleResult|null|undefined} vsResult
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.vsResult = null;

            /**
             * SaveGameResultRequest rgResult.
             * @member {v388.protobuf.SaveGameResultRequest.IGhostBattleResult|null|undefined} rgResult
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.rgResult = null;

            /**
             * Creates a new SaveGameResultRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveGameResultRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveGameResultRequest} SaveGameResultRequest instance
             */
            SaveGameResultRequest.create = function create(properties) {
                return new SaveGameResultRequest(properties);
            };

            /**
             * Encodes the specified SaveGameResultRequest message. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveGameResultRequest} message SaveGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameMode);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.playedAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playCount);
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.retired);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.timeup);
                if (message.car != null && Object.hasOwnProperty.call(message, "car"))
                    $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.setting != null && Object.hasOwnProperty.call(message, "setting"))
                    $root.v388.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.odometer != null && Object.hasOwnProperty.call(message, "odometer"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.odometer);
                if (message.tutorials != null && Object.hasOwnProperty.call(message, "tutorials"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tutorials);
                if (message.hp600Count != null && Object.hasOwnProperty.call(message, "hp600Count"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.hp600Count);
                if (message.earnedCustomColor != null && Object.hasOwnProperty.call(message, "earnedCustomColor"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.earnedCustomColor);
                if (message.ownedCustomColors != null && Object.hasOwnProperty.call(message, "ownedCustomColors"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.ownedCustomColors);
                if (message.stResult != null && Object.hasOwnProperty.call(message, "stResult"))
                    $root.v388.protobuf.SaveGameResultRequest.StoryResult.encode(message.stResult, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.taResult != null && Object.hasOwnProperty.call(message, "taResult"))
                    $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.encode(message.taResult, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.vsResult != null && Object.hasOwnProperty.call(message, "vsResult"))
                    $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.encode(message.vsResult, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                if (message.rgResult != null && Object.hasOwnProperty.call(message, "rgResult"))
                    $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult.encode(message.rgResult, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveGameResultRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveGameResultRequest} message SaveGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveGameResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveGameResultRequest} SaveGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.gameMode = reader.int32();
                            break;
                        }
                    case 3: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.playCount = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.retired = reader.bool();
                            break;
                        }
                    case 6: {
                            message.timeup = reader.bool();
                            break;
                        }
                    case 7: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.setting = $root.v388.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.odometer = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.tutorials = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.hp600Count = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.earnedCustomColor = reader.bool();
                            break;
                        }
                    case 13: {
                            message.ownedCustomColors = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.taResult = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.rgResult = $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("gameMode"))
                    throw $util.ProtocolError("missing required 'gameMode'", { instance: message });
                if (!message.hasOwnProperty("playedAt"))
                    throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                if (!message.hasOwnProperty("playCount"))
                    throw $util.ProtocolError("missing required 'playCount'", { instance: message });
                if (!message.hasOwnProperty("retired"))
                    throw $util.ProtocolError("missing required 'retired'", { instance: message });
                if (!message.hasOwnProperty("timeup"))
                    throw $util.ProtocolError("missing required 'timeup'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveGameResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveGameResultRequest} SaveGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveGameResultRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveGameResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                switch (message.gameMode) {
                default:
                    return "gameMode: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (!$util.isInteger(message.playedAt))
                    return "playedAt: integer expected";
                if (!$util.isInteger(message.playCount))
                    return "playCount: integer expected";
                if (typeof message.retired !== "boolean")
                    return "retired: boolean expected";
                if (typeof message.timeup !== "boolean")
                    return "timeup: boolean expected";
                if (message.car != null && message.hasOwnProperty("car")) {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.setting != null && message.hasOwnProperty("setting")) {
                    let error = $root.v388.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    if (!$util.isInteger(message.odometer))
                        return "odometer: integer expected";
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    if (!$util.isInteger(message.tutorials))
                        return "tutorials: integer expected";
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    if (!$util.isInteger(message.hp600Count))
                        return "hp600Count: integer expected";
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    if (typeof message.earnedCustomColor !== "boolean")
                        return "earnedCustomColor: boolean expected";
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    if (!$util.isInteger(message.ownedCustomColors))
                        return "ownedCustomColors: integer expected";
                if (message.stResult != null && message.hasOwnProperty("stResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.StoryResult.verify(message.stResult);
                    if (error)
                        return "stResult." + error;
                }
                if (message.taResult != null && message.hasOwnProperty("taResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.verify(message.taResult);
                    if (error)
                        return "taResult." + error;
                }
                if (message.vsResult != null && message.hasOwnProperty("vsResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.verify(message.vsResult);
                    if (error)
                        return "vsResult." + error;
                }
                if (message.rgResult != null && message.hasOwnProperty("rgResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult.verify(message.rgResult);
                    if (error)
                        return "rgResult." + error;
                }
                return null;
            };

            /**
             * Creates a SaveGameResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveGameResultRequest} SaveGameResultRequest
             */
            SaveGameResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveGameResultRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveGameResultRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                switch (object.gameMode) {
                default:
                    if (typeof object.gameMode === "number") {
                        message.gameMode = object.gameMode;
                        break;
                    }
                    break;
                case "MODE_STORY":
                case 1:
                    message.gameMode = 1;
                    break;
                case "MODE_TIME_ATTACK":
                case 2:
                    message.gameMode = 2;
                    break;
                case "MODE_VS_BATTLE":
                case 3:
                    message.gameMode = 3;
                    break;
                case "MODE_GHOST_BATTLE":
                case 4:
                    message.gameMode = 4;
                    break;
                case "MODE_EVENT":
                case 5:
                    message.gameMode = 5;
                    break;
                }
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.playCount != null)
                    message.playCount = object.playCount >>> 0;
                if (object.retired != null)
                    message.retired = Boolean(object.retired);
                if (object.timeup != null)
                    message.timeup = Boolean(object.timeup);
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.setting: object expected");
                    message.setting = $root.v388.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.odometer != null)
                    message.odometer = object.odometer >>> 0;
                if (object.tutorials != null)
                    message.tutorials = object.tutorials >>> 0;
                if (object.hp600Count != null)
                    message.hp600Count = object.hp600Count >>> 0;
                if (object.earnedCustomColor != null)
                    message.earnedCustomColor = Boolean(object.earnedCustomColor);
                if (object.ownedCustomColors != null)
                    message.ownedCustomColors = object.ownedCustomColors >>> 0;
                if (object.stResult != null) {
                    if (typeof object.stResult !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.stResult: object expected");
                    message.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.fromObject(object.stResult);
                }
                if (object.taResult != null) {
                    if (typeof object.taResult !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.taResult: object expected");
                    message.taResult = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.fromObject(object.taResult);
                }
                if (object.vsResult != null) {
                    if (typeof object.vsResult !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.vsResult: object expected");
                    message.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.fromObject(object.vsResult);
                }
                if (object.rgResult != null) {
                    if (typeof object.rgResult !== "object")
                        throw TypeError(".v388.protobuf.SaveGameResultRequest.rgResult: object expected");
                    message.rgResult = $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult.fromObject(object.rgResult);
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveGameResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {v388.protobuf.SaveGameResultRequest} message SaveGameResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveGameResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.gameMode = options.enums === String ? "MODE_STORY" : 1;
                    object.playedAt = 0;
                    object.playCount = 0;
                    object.retired = false;
                    object.timeup = false;
                    object.car = null;
                    object.setting = null;
                    object.odometer = 0;
                    object.tutorials = 0;
                    object.hp600Count = 0;
                    object.earnedCustomColor = false;
                    object.ownedCustomColors = 0;
                    object.stResult = null;
                    object.taResult = null;
                    object.vsResult = null;
                    object.rgResult = null;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.gameMode != null && message.hasOwnProperty("gameMode"))
                    object.gameMode = options.enums === String ? $root.v388.protobuf.GameMode[message.gameMode] === undefined ? message.gameMode : $root.v388.protobuf.GameMode[message.gameMode] : message.gameMode;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.playCount != null && message.hasOwnProperty("playCount"))
                    object.playCount = message.playCount;
                if (message.retired != null && message.hasOwnProperty("retired"))
                    object.retired = message.retired;
                if (message.timeup != null && message.hasOwnProperty("timeup"))
                    object.timeup = message.timeup;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.v388.protobuf.CarSetting.toObject(message.setting, options);
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    object.odometer = message.odometer;
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    object.tutorials = message.tutorials;
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    object.hp600Count = message.hp600Count;
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    object.earnedCustomColor = message.earnedCustomColor;
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    object.ownedCustomColors = message.ownedCustomColors;
                if (message.stResult != null && message.hasOwnProperty("stResult"))
                    object.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.toObject(message.stResult, options);
                if (message.taResult != null && message.hasOwnProperty("taResult"))
                    object.taResult = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.toObject(message.taResult, options);
                if (message.vsResult != null && message.hasOwnProperty("vsResult"))
                    object.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.toObject(message.vsResult, options);
                if (message.rgResult != null && message.hasOwnProperty("rgResult"))
                    object.rgResult = $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult.toObject(message.rgResult, options);
                return object;
            };

            /**
             * Converts this SaveGameResultRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveGameResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveGameResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveGameResultRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveGameResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveGameResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveGameResultRequest";
            };

            SaveGameResultRequest.StoryResult = (function() {

                /**
                 * Properties of a StoryResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @interface IStoryResult
                 * @property {number} stPlayCount StoryResult stPlayCount
                 * @property {number|null} [tuningPoint] StoryResult tuningPoint
                 * @property {number|null} [stClearBits] StoryResult stClearBits
                 * @property {number|null} [stClearDivCount] StoryResult stClearDivCount
                 * @property {number|null} [stClearCount] StoryResult stClearCount
                 * @property {number|Long|null} [stLoseBits] StoryResult stLoseBits
                 * @property {boolean|null} [stLose] StoryResult stLose
                 * @property {number|null} [stConsecutiveWins] StoryResult stConsecutiveWins
                 * @property {number|null} [ownedMeters] StoryResult ownedMeters
                 * @property {number|null} [ownedBgm] StoryResult ownedBgm
                 */

                /**
                 * Constructs a new StoryResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @classdesc Represents a StoryResult.
                 * @implements IStoryResult
                 * @constructor
                 * @param {v388.protobuf.SaveGameResultRequest.IStoryResult=} [properties] Properties to set
                 */
                function StoryResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoryResult stPlayCount.
                 * @member {number} stPlayCount
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stPlayCount = 0;

                /**
                 * StoryResult tuningPoint.
                 * @member {number} tuningPoint
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.tuningPoint = 0;

                /**
                 * StoryResult stClearBits.
                 * @member {number} stClearBits
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearBits = 0;

                /**
                 * StoryResult stClearDivCount.
                 * @member {number} stClearDivCount
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearDivCount = 0;

                /**
                 * StoryResult stClearCount.
                 * @member {number} stClearCount
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearCount = 0;

                /**
                 * StoryResult stLoseBits.
                 * @member {number|Long} stLoseBits
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * StoryResult stLose.
                 * @member {boolean} stLose
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stLose = false;

                /**
                 * StoryResult stConsecutiveWins.
                 * @member {number} stConsecutiveWins
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stConsecutiveWins = 0;

                /**
                 * StoryResult ownedMeters.
                 * @member {number} ownedMeters
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.ownedMeters = 0;

                /**
                 * StoryResult ownedBgm.
                 * @member {number} ownedBgm
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.ownedBgm = 0;

                /**
                 * Creates a new StoryResult instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IStoryResult=} [properties] Properties to set
                 * @returns {v388.protobuf.SaveGameResultRequest.StoryResult} StoryResult instance
                 */
                StoryResult.create = function create(properties) {
                    return new StoryResult(properties);
                };

                /**
                 * Encodes the specified StoryResult message. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.StoryResult.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IStoryResult} message StoryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.stPlayCount);
                    if (message.tuningPoint != null && Object.hasOwnProperty.call(message, "tuningPoint"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuningPoint);
                    if (message.stClearBits != null && Object.hasOwnProperty.call(message, "stClearBits"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.stClearBits);
                    if (message.stClearDivCount != null && Object.hasOwnProperty.call(message, "stClearDivCount"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.stClearDivCount);
                    if (message.stClearCount != null && Object.hasOwnProperty.call(message, "stClearCount"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.stClearCount);
                    if (message.stLoseBits != null && Object.hasOwnProperty.call(message, "stLoseBits"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.stLoseBits);
                    if (message.stLose != null && Object.hasOwnProperty.call(message, "stLose"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.stLose);
                    if (message.stConsecutiveWins != null && Object.hasOwnProperty.call(message, "stConsecutiveWins"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stConsecutiveWins);
                    if (message.ownedMeters != null && Object.hasOwnProperty.call(message, "ownedMeters"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.ownedMeters);
                    if (message.ownedBgm != null && Object.hasOwnProperty.call(message, "ownedBgm"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ownedBgm);
                    return writer;
                };

                /**
                 * Encodes the specified StoryResult message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.StoryResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IStoryResult} message StoryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoryResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultRequest.StoryResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.stPlayCount = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuningPoint = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.stClearBits = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.stClearDivCount = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.stClearCount = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.stLoseBits = reader.uint64();
                                break;
                            }
                        case 7: {
                                message.stLose = reader.bool();
                                break;
                            }
                        case 8: {
                                message.stConsecutiveWins = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.ownedMeters = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.ownedBgm = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("stPlayCount"))
                        throw $util.ProtocolError("missing required 'stPlayCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a StoryResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoryResult message.
                 * @function verify
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoryResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.stPlayCount))
                        return "stPlayCount: integer expected";
                    if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                        if (!$util.isInteger(message.tuningPoint))
                            return "tuningPoint: integer expected";
                    if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                        if (!$util.isInteger(message.stClearBits))
                            return "stClearBits: integer expected";
                    if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                        if (!$util.isInteger(message.stClearDivCount))
                            return "stClearDivCount: integer expected";
                    if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                        if (!$util.isInteger(message.stClearCount))
                            return "stClearCount: integer expected";
                    if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                        if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                            return "stLoseBits: integer|Long expected";
                    if (message.stLose != null && message.hasOwnProperty("stLose"))
                        if (typeof message.stLose !== "boolean")
                            return "stLose: boolean expected";
                    if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                        if (!$util.isInteger(message.stConsecutiveWins))
                            return "stConsecutiveWins: integer expected";
                    if (message.ownedMeters != null && message.hasOwnProperty("ownedMeters"))
                        if (!$util.isInteger(message.ownedMeters))
                            return "ownedMeters: integer expected";
                    if (message.ownedBgm != null && message.hasOwnProperty("ownedBgm"))
                        if (!$util.isInteger(message.ownedBgm))
                            return "ownedBgm: integer expected";
                    return null;
                };

                /**
                 * Creates a StoryResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 */
                StoryResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.SaveGameResultRequest.StoryResult)
                        return object;
                    let message = new $root.v388.protobuf.SaveGameResultRequest.StoryResult();
                    if (object.stPlayCount != null)
                        message.stPlayCount = object.stPlayCount >>> 0;
                    if (object.tuningPoint != null)
                        message.tuningPoint = object.tuningPoint >>> 0;
                    if (object.stClearBits != null)
                        message.stClearBits = object.stClearBits >>> 0;
                    if (object.stClearDivCount != null)
                        message.stClearDivCount = object.stClearDivCount >>> 0;
                    if (object.stClearCount != null)
                        message.stClearCount = object.stClearCount >>> 0;
                    if (object.stLoseBits != null)
                        if ($util.Long)
                            (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                        else if (typeof object.stLoseBits === "string")
                            message.stLoseBits = parseInt(object.stLoseBits, 10);
                        else if (typeof object.stLoseBits === "number")
                            message.stLoseBits = object.stLoseBits;
                        else if (typeof object.stLoseBits === "object")
                            message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                    if (object.stLose != null)
                        message.stLose = Boolean(object.stLose);
                    if (object.stConsecutiveWins != null)
                        message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                    if (object.ownedMeters != null)
                        message.ownedMeters = object.ownedMeters >>> 0;
                    if (object.ownedBgm != null)
                        message.ownedBgm = object.ownedBgm >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a StoryResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.StoryResult} message StoryResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoryResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.stPlayCount = 0;
                        object.tuningPoint = 0;
                        object.stClearBits = 0;
                        object.stClearDivCount = 0;
                        object.stClearCount = 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.stLoseBits = options.longs === String ? "0" : 0;
                        object.stLose = false;
                        object.stConsecutiveWins = 0;
                        object.ownedMeters = 0;
                        object.ownedBgm = 0;
                    }
                    if (message.stPlayCount != null && message.hasOwnProperty("stPlayCount"))
                        object.stPlayCount = message.stPlayCount;
                    if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                        object.tuningPoint = message.tuningPoint;
                    if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                        object.stClearBits = message.stClearBits;
                    if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                        object.stClearDivCount = message.stClearDivCount;
                    if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                        object.stClearCount = message.stClearCount;
                    if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                        if (typeof message.stLoseBits === "number")
                            object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                        else
                            object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                    if (message.stLose != null && message.hasOwnProperty("stLose"))
                        object.stLose = message.stLose;
                    if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                        object.stConsecutiveWins = message.stConsecutiveWins;
                    if (message.ownedMeters != null && message.hasOwnProperty("ownedMeters"))
                        object.ownedMeters = message.ownedMeters;
                    if (message.ownedBgm != null && message.hasOwnProperty("ownedBgm"))
                        object.ownedBgm = message.ownedBgm;
                    return object;
                };

                /**
                 * Converts this StoryResult to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoryResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for StoryResult
                 * @function getTypeUrl
                 * @memberof v388.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                StoryResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.SaveGameResultRequest.StoryResult";
                };

                return StoryResult;
            })();

            SaveGameResultRequest.TimeAttackResult = (function() {

                /**
                 * Properties of a TimeAttackResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @interface ITimeAttackResult
                 * @property {number} time TimeAttackResult time
                 * @property {number} course TimeAttackResult course
                 * @property {number} section_1Time TimeAttackResult section_1Time
                 * @property {number} section_2Time TimeAttackResult section_2Time
                 * @property {number} section_3Time TimeAttackResult section_3Time
                 * @property {number} section_4Time TimeAttackResult section_4Time
                 * @property {number|null} [section_5Time] TimeAttackResult section_5Time
                 * @property {number|null} [section_6Time] TimeAttackResult section_6Time
                 * @property {number|null} [section_7Time] TimeAttackResult section_7Time
                 */

                /**
                 * Constructs a new TimeAttackResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @classdesc Represents a TimeAttackResult.
                 * @implements ITimeAttackResult
                 * @constructor
                 * @param {v388.protobuf.SaveGameResultRequest.ITimeAttackResult=} [properties] Properties to set
                 */
                function TimeAttackResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TimeAttackResult time.
                 * @member {number} time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.time = 0;

                /**
                 * TimeAttackResult course.
                 * @member {number} course
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.course = 0;

                /**
                 * TimeAttackResult section_1Time.
                 * @member {number} section_1Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_1Time = 0;

                /**
                 * TimeAttackResult section_2Time.
                 * @member {number} section_2Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_2Time = 0;

                /**
                 * TimeAttackResult section_3Time.
                 * @member {number} section_3Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_3Time = 0;

                /**
                 * TimeAttackResult section_4Time.
                 * @member {number} section_4Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_4Time = 0;

                /**
                 * TimeAttackResult section_5Time.
                 * @member {number} section_5Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_5Time = 0;

                /**
                 * TimeAttackResult section_6Time.
                 * @member {number} section_6Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_6Time = 0;

                /**
                 * TimeAttackResult section_7Time.
                 * @member {number} section_7Time
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_7Time = 0;

                /**
                 * Creates a new TimeAttackResult instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.ITimeAttackResult=} [properties] Properties to set
                 * @returns {v388.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult instance
                 */
                TimeAttackResult.create = function create(properties) {
                    return new TimeAttackResult(properties);
                };

                /**
                 * Encodes the specified TimeAttackResult message. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.TimeAttackResult.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.ITimeAttackResult} message TimeAttackResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.time);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.course);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.section_1Time);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.section_2Time);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.section_3Time);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.section_4Time);
                    if (message.section_5Time != null && Object.hasOwnProperty.call(message, "section_5Time"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.section_5Time);
                    if (message.section_6Time != null && Object.hasOwnProperty.call(message, "section_6Time"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.section_6Time);
                    if (message.section_7Time != null && Object.hasOwnProperty.call(message, "section_7Time"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.section_7Time);
                    return writer;
                };

                /**
                 * Encodes the specified TimeAttackResult message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.TimeAttackResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.ITimeAttackResult} message TimeAttackResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TimeAttackResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.time = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.course = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.section_1Time = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.section_2Time = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.section_3Time = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.section_4Time = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.section_5Time = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.section_6Time = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.section_7Time = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("time"))
                        throw $util.ProtocolError("missing required 'time'", { instance: message });
                    if (!message.hasOwnProperty("course"))
                        throw $util.ProtocolError("missing required 'course'", { instance: message });
                    if (!message.hasOwnProperty("section_1Time"))
                        throw $util.ProtocolError("missing required 'section_1Time'", { instance: message });
                    if (!message.hasOwnProperty("section_2Time"))
                        throw $util.ProtocolError("missing required 'section_2Time'", { instance: message });
                    if (!message.hasOwnProperty("section_3Time"))
                        throw $util.ProtocolError("missing required 'section_3Time'", { instance: message });
                    if (!message.hasOwnProperty("section_4Time"))
                        throw $util.ProtocolError("missing required 'section_4Time'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TimeAttackResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TimeAttackResult message.
                 * @function verify
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeAttackResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                    if (!$util.isInteger(message.course))
                        return "course: integer expected";
                    if (!$util.isInteger(message.section_1Time))
                        return "section_1Time: integer expected";
                    if (!$util.isInteger(message.section_2Time))
                        return "section_2Time: integer expected";
                    if (!$util.isInteger(message.section_3Time))
                        return "section_3Time: integer expected";
                    if (!$util.isInteger(message.section_4Time))
                        return "section_4Time: integer expected";
                    if (message.section_5Time != null && message.hasOwnProperty("section_5Time"))
                        if (!$util.isInteger(message.section_5Time))
                            return "section_5Time: integer expected";
                    if (message.section_6Time != null && message.hasOwnProperty("section_6Time"))
                        if (!$util.isInteger(message.section_6Time))
                            return "section_6Time: integer expected";
                    if (message.section_7Time != null && message.hasOwnProperty("section_7Time"))
                        if (!$util.isInteger(message.section_7Time))
                            return "section_7Time: integer expected";
                    return null;
                };

                /**
                 * Creates a TimeAttackResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 */
                TimeAttackResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult)
                        return object;
                    let message = new $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult();
                    if (object.time != null)
                        message.time = object.time >>> 0;
                    if (object.course != null)
                        message.course = object.course >>> 0;
                    if (object.section_1Time != null)
                        message.section_1Time = object.section_1Time >>> 0;
                    if (object.section_2Time != null)
                        message.section_2Time = object.section_2Time >>> 0;
                    if (object.section_3Time != null)
                        message.section_3Time = object.section_3Time >>> 0;
                    if (object.section_4Time != null)
                        message.section_4Time = object.section_4Time >>> 0;
                    if (object.section_5Time != null)
                        message.section_5Time = object.section_5Time >>> 0;
                    if (object.section_6Time != null)
                        message.section_6Time = object.section_6Time >>> 0;
                    if (object.section_7Time != null)
                        message.section_7Time = object.section_7Time >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TimeAttackResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.TimeAttackResult} message TimeAttackResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeAttackResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.time = 0;
                        object.course = 0;
                        object.section_1Time = 0;
                        object.section_2Time = 0;
                        object.section_3Time = 0;
                        object.section_4Time = 0;
                        object.section_5Time = 0;
                        object.section_6Time = 0;
                        object.section_7Time = 0;
                    }
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = message.time;
                    if (message.course != null && message.hasOwnProperty("course"))
                        object.course = message.course;
                    if (message.section_1Time != null && message.hasOwnProperty("section_1Time"))
                        object.section_1Time = message.section_1Time;
                    if (message.section_2Time != null && message.hasOwnProperty("section_2Time"))
                        object.section_2Time = message.section_2Time;
                    if (message.section_3Time != null && message.hasOwnProperty("section_3Time"))
                        object.section_3Time = message.section_3Time;
                    if (message.section_4Time != null && message.hasOwnProperty("section_4Time"))
                        object.section_4Time = message.section_4Time;
                    if (message.section_5Time != null && message.hasOwnProperty("section_5Time"))
                        object.section_5Time = message.section_5Time;
                    if (message.section_6Time != null && message.hasOwnProperty("section_6Time"))
                        object.section_6Time = message.section_6Time;
                    if (message.section_7Time != null && message.hasOwnProperty("section_7Time"))
                        object.section_7Time = message.section_7Time;
                    return object;
                };

                /**
                 * Converts this TimeAttackResult to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeAttackResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TimeAttackResult
                 * @function getTypeUrl
                 * @memberof v388.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TimeAttackResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.SaveGameResultRequest.TimeAttackResult";
                };

                return TimeAttackResult;
            })();

            SaveGameResultRequest.VersusBattleResult = (function() {

                /**
                 * Properties of a VersusBattleResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @interface IVersusBattleResult
                 * @property {number} result VersusBattleResult result
                 * @property {boolean} survived VersusBattleResult survived
                 * @property {Array.<number>|null} [opponentCarId] VersusBattleResult opponentCarId
                 * @property {number} vsPlayCount VersusBattleResult vsPlayCount
                 * @property {number|null} [vsBurstCount] VersusBattleResult vsBurstCount
                 * @property {number|null} [vsStarCount] VersusBattleResult vsStarCount
                 * @property {number|null} [vsCoolOrWild] VersusBattleResult vsCoolOrWild
                 * @property {number|null} [vsSmoothOrRough] VersusBattleResult vsSmoothOrRough
                 */

                /**
                 * Constructs a new VersusBattleResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @classdesc Represents a VersusBattleResult.
                 * @implements IVersusBattleResult
                 * @constructor
                 * @param {v388.protobuf.SaveGameResultRequest.IVersusBattleResult=} [properties] Properties to set
                 */
                function VersusBattleResult(properties) {
                    this.opponentCarId = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VersusBattleResult result.
                 * @member {number} result
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.result = 0;

                /**
                 * VersusBattleResult survived.
                 * @member {boolean} survived
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.survived = false;

                /**
                 * VersusBattleResult opponentCarId.
                 * @member {Array.<number>} opponentCarId
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.opponentCarId = $util.emptyArray;

                /**
                 * VersusBattleResult vsPlayCount.
                 * @member {number} vsPlayCount
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsPlayCount = 0;

                /**
                 * VersusBattleResult vsBurstCount.
                 * @member {number} vsBurstCount
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsBurstCount = 0;

                /**
                 * VersusBattleResult vsStarCount.
                 * @member {number} vsStarCount
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsStarCount = 0;

                /**
                 * VersusBattleResult vsCoolOrWild.
                 * @member {number} vsCoolOrWild
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsCoolOrWild = 0;

                /**
                 * VersusBattleResult vsSmoothOrRough.
                 * @member {number} vsSmoothOrRough
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsSmoothOrRough = 0;

                /**
                 * Creates a new VersusBattleResult instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IVersusBattleResult=} [properties] Properties to set
                 * @returns {v388.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult instance
                 */
                VersusBattleResult.create = function create(properties) {
                    return new VersusBattleResult(properties);
                };

                /**
                 * Encodes the specified VersusBattleResult message. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.VersusBattleResult.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IVersusBattleResult} message VersusBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.survived);
                    if (message.opponentCarId != null && message.opponentCarId.length)
                        for (let i = 0; i < message.opponentCarId.length; ++i)
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opponentCarId[i]);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.vsPlayCount);
                    if (message.vsBurstCount != null && Object.hasOwnProperty.call(message, "vsBurstCount"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.vsBurstCount);
                    if (message.vsStarCount != null && Object.hasOwnProperty.call(message, "vsStarCount"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.vsStarCount);
                    if (message.vsCoolOrWild != null && Object.hasOwnProperty.call(message, "vsCoolOrWild"))
                        writer.uint32(/* id 7, wireType 0 =*/56).sint32(message.vsCoolOrWild);
                    if (message.vsSmoothOrRough != null && Object.hasOwnProperty.call(message, "vsSmoothOrRough"))
                        writer.uint32(/* id 8, wireType 0 =*/64).sint32(message.vsSmoothOrRough);
                    return writer;
                };

                /**
                 * Encodes the specified VersusBattleResult message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.VersusBattleResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IVersusBattleResult} message VersusBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VersusBattleResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.result = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.survived = reader.bool();
                                break;
                            }
                        case 3: {
                                if (!(message.opponentCarId && message.opponentCarId.length))
                                    message.opponentCarId = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.opponentCarId.push(reader.uint32());
                                } else
                                    message.opponentCarId.push(reader.uint32());
                                break;
                            }
                        case 4: {
                                message.vsPlayCount = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.vsBurstCount = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.vsStarCount = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.vsCoolOrWild = reader.sint32();
                                break;
                            }
                        case 8: {
                                message.vsSmoothOrRough = reader.sint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("survived"))
                        throw $util.ProtocolError("missing required 'survived'", { instance: message });
                    if (!message.hasOwnProperty("vsPlayCount"))
                        throw $util.ProtocolError("missing required 'vsPlayCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a VersusBattleResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VersusBattleResult message.
                 * @function verify
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VersusBattleResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (typeof message.survived !== "boolean")
                        return "survived: boolean expected";
                    if (message.opponentCarId != null && message.hasOwnProperty("opponentCarId")) {
                        if (!Array.isArray(message.opponentCarId))
                            return "opponentCarId: array expected";
                        for (let i = 0; i < message.opponentCarId.length; ++i)
                            if (!$util.isInteger(message.opponentCarId[i]))
                                return "opponentCarId: integer[] expected";
                    }
                    if (!$util.isInteger(message.vsPlayCount))
                        return "vsPlayCount: integer expected";
                    if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                        if (!$util.isInteger(message.vsBurstCount))
                            return "vsBurstCount: integer expected";
                    if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                        if (!$util.isInteger(message.vsStarCount))
                            return "vsStarCount: integer expected";
                    if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                        if (!$util.isInteger(message.vsCoolOrWild))
                            return "vsCoolOrWild: integer expected";
                    if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                        if (!$util.isInteger(message.vsSmoothOrRough))
                            return "vsSmoothOrRough: integer expected";
                    return null;
                };

                /**
                 * Creates a VersusBattleResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 */
                VersusBattleResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult)
                        return object;
                    let message = new $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult();
                    if (object.result != null)
                        message.result = object.result >>> 0;
                    if (object.survived != null)
                        message.survived = Boolean(object.survived);
                    if (object.opponentCarId) {
                        if (!Array.isArray(object.opponentCarId))
                            throw TypeError(".v388.protobuf.SaveGameResultRequest.VersusBattleResult.opponentCarId: array expected");
                        message.opponentCarId = [];
                        for (let i = 0; i < object.opponentCarId.length; ++i)
                            message.opponentCarId[i] = object.opponentCarId[i] >>> 0;
                    }
                    if (object.vsPlayCount != null)
                        message.vsPlayCount = object.vsPlayCount >>> 0;
                    if (object.vsBurstCount != null)
                        message.vsBurstCount = object.vsBurstCount >>> 0;
                    if (object.vsStarCount != null)
                        message.vsStarCount = object.vsStarCount >>> 0;
                    if (object.vsCoolOrWild != null)
                        message.vsCoolOrWild = object.vsCoolOrWild | 0;
                    if (object.vsSmoothOrRough != null)
                        message.vsSmoothOrRough = object.vsSmoothOrRough | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a VersusBattleResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.VersusBattleResult} message VersusBattleResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VersusBattleResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.opponentCarId = [];
                    if (options.defaults) {
                        object.result = 0;
                        object.survived = false;
                        object.vsPlayCount = 0;
                        object.vsBurstCount = 0;
                        object.vsStarCount = 0;
                        object.vsCoolOrWild = 0;
                        object.vsSmoothOrRough = 0;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.survived != null && message.hasOwnProperty("survived"))
                        object.survived = message.survived;
                    if (message.opponentCarId && message.opponentCarId.length) {
                        object.opponentCarId = [];
                        for (let j = 0; j < message.opponentCarId.length; ++j)
                            object.opponentCarId[j] = message.opponentCarId[j];
                    }
                    if (message.vsPlayCount != null && message.hasOwnProperty("vsPlayCount"))
                        object.vsPlayCount = message.vsPlayCount;
                    if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                        object.vsBurstCount = message.vsBurstCount;
                    if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                        object.vsStarCount = message.vsStarCount;
                    if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                        object.vsCoolOrWild = message.vsCoolOrWild;
                    if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                        object.vsSmoothOrRough = message.vsSmoothOrRough;
                    return object;
                };

                /**
                 * Converts this VersusBattleResult to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VersusBattleResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for VersusBattleResult
                 * @function getTypeUrl
                 * @memberof v388.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VersusBattleResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.SaveGameResultRequest.VersusBattleResult";
                };

                return VersusBattleResult;
            })();

            SaveGameResultRequest.GhostBattleResult = (function() {

                /**
                 * Properties of a GhostBattleResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @interface IGhostBattleResult
                 * @property {number} result GhostBattleResult result
                 * @property {number} opponentCarId GhostBattleResult opponentCarId
                 * @property {number|null} [opponentTeamId] GhostBattleResult opponentTeamId
                 * @property {number} area GhostBattleResult area
                 * @property {boolean} revenged GhostBattleResult revenged
                 * @property {v388.protobuf.GhostSelectionMethod} selectionMethod GhostBattleResult selectionMethod
                 * @property {number} rgPlayCount GhostBattleResult rgPlayCount
                 * @property {number|null} [rgWinCount] GhostBattleResult rgWinCount
                 * @property {number|null} [maxiCoin] GhostBattleResult maxiCoin
                 * @property {number|null} [dressupPoint] GhostBattleResult dressupPoint
                 * @property {number|null} [dressupLevel] GhostBattleResult dressupLevel
                 * @property {number|null} [ownedDressupParts] GhostBattleResult ownedDressupParts
                 * @property {number|null} [rgBlock] GhostBattleResult rgBlock
                 * @property {Array.<number>|null} [rgProgress] GhostBattleResult rgProgress
                 * @property {number|null} [rgClearCount] GhostBattleResult rgClearCount
                 * @property {number|null} [competitionId] GhostBattleResult competitionId
                 * @property {number|null} [periodId] GhostBattleResult periodId
                 * @property {number|null} [brakingPoint] GhostBattleResult brakingPoint
                 * @property {number|null} [earnedNameplate] GhostBattleResult earnedNameplate
                 */

                /**
                 * Constructs a new GhostBattleResult.
                 * @memberof v388.protobuf.SaveGameResultRequest
                 * @classdesc Represents a GhostBattleResult.
                 * @implements IGhostBattleResult
                 * @constructor
                 * @param {v388.protobuf.SaveGameResultRequest.IGhostBattleResult=} [properties] Properties to set
                 */
                function GhostBattleResult(properties) {
                    this.rgProgress = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostBattleResult result.
                 * @member {number} result
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.result = 0;

                /**
                 * GhostBattleResult opponentCarId.
                 * @member {number} opponentCarId
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.opponentCarId = 0;

                /**
                 * GhostBattleResult opponentTeamId.
                 * @member {number} opponentTeamId
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.opponentTeamId = 0;

                /**
                 * GhostBattleResult area.
                 * @member {number} area
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.area = 0;

                /**
                 * GhostBattleResult revenged.
                 * @member {boolean} revenged
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.revenged = false;

                /**
                 * GhostBattleResult selectionMethod.
                 * @member {v388.protobuf.GhostSelectionMethod} selectionMethod
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.selectionMethod = 1;

                /**
                 * GhostBattleResult rgPlayCount.
                 * @member {number} rgPlayCount
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgPlayCount = 0;

                /**
                 * GhostBattleResult rgWinCount.
                 * @member {number} rgWinCount
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgWinCount = 0;

                /**
                 * GhostBattleResult maxiCoin.
                 * @member {number} maxiCoin
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.maxiCoin = 0;

                /**
                 * GhostBattleResult dressupPoint.
                 * @member {number} dressupPoint
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.dressupPoint = 0;

                /**
                 * GhostBattleResult dressupLevel.
                 * @member {number} dressupLevel
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.dressupLevel = 0;

                /**
                 * GhostBattleResult ownedDressupParts.
                 * @member {number} ownedDressupParts
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.ownedDressupParts = 0;

                /**
                 * GhostBattleResult rgBlock.
                 * @member {number} rgBlock
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgBlock = 0;

                /**
                 * GhostBattleResult rgProgress.
                 * @member {Array.<number>} rgProgress
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgProgress = $util.emptyArray;

                /**
                 * GhostBattleResult rgClearCount.
                 * @member {number} rgClearCount
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgClearCount = 0;

                /**
                 * GhostBattleResult competitionId.
                 * @member {number} competitionId
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.competitionId = 0;

                /**
                 * GhostBattleResult periodId.
                 * @member {number} periodId
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.periodId = 0;

                /**
                 * GhostBattleResult brakingPoint.
                 * @member {number} brakingPoint
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.brakingPoint = 0;

                /**
                 * GhostBattleResult earnedNameplate.
                 * @member {number} earnedNameplate
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.earnedNameplate = 0;

                /**
                 * Creates a new GhostBattleResult instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IGhostBattleResult=} [properties] Properties to set
                 * @returns {v388.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult instance
                 */
                GhostBattleResult.create = function create(properties) {
                    return new GhostBattleResult(properties);
                };

                /**
                 * Encodes the specified GhostBattleResult message. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.GhostBattleResult.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IGhostBattleResult} message GhostBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.result);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.opponentCarId);
                    if (message.opponentTeamId != null && Object.hasOwnProperty.call(message, "opponentTeamId"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opponentTeamId);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.area);
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.revenged);
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.selectionMethod);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.rgPlayCount);
                    if (message.rgWinCount != null && Object.hasOwnProperty.call(message, "rgWinCount"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rgWinCount);
                    if (message.maxiCoin != null && Object.hasOwnProperty.call(message, "maxiCoin"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.maxiCoin);
                    if (message.dressupPoint != null && Object.hasOwnProperty.call(message, "dressupPoint"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.dressupPoint);
                    if (message.dressupLevel != null && Object.hasOwnProperty.call(message, "dressupLevel"))
                        writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.dressupLevel);
                    if (message.ownedDressupParts != null && Object.hasOwnProperty.call(message, "ownedDressupParts"))
                        writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.ownedDressupParts);
                    if (message.rgBlock != null && Object.hasOwnProperty.call(message, "rgBlock"))
                        writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.rgBlock);
                    if (message.rgProgress != null && message.rgProgress.length) {
                        writer.uint32(/* id 14, wireType 2 =*/114).fork();
                        for (let i = 0; i < message.rgProgress.length; ++i)
                            writer.uint32(message.rgProgress[i]);
                        writer.ldelim();
                    }
                    if (message.rgClearCount != null && Object.hasOwnProperty.call(message, "rgClearCount"))
                        writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.rgClearCount);
                    if (message.competitionId != null && Object.hasOwnProperty.call(message, "competitionId"))
                        writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.competitionId);
                    if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                        writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.periodId);
                    if (message.brakingPoint != null && Object.hasOwnProperty.call(message, "brakingPoint"))
                        writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.brakingPoint);
                    if (message.earnedNameplate != null && Object.hasOwnProperty.call(message, "earnedNameplate"))
                        writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.earnedNameplate);
                    return writer;
                };

                /**
                 * Encodes the specified GhostBattleResult message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultRequest.GhostBattleResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.IGhostBattleResult} message GhostBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostBattleResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 2: {
                                message.opponentCarId = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.opponentTeamId = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.revenged = reader.bool();
                                break;
                            }
                        case 6: {
                                message.selectionMethod = reader.int32();
                                break;
                            }
                        case 7: {
                                message.rgPlayCount = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.rgWinCount = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.maxiCoin = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.dressupPoint = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.dressupLevel = reader.uint32();
                                break;
                            }
                        case 12: {
                                message.ownedDressupParts = reader.uint32();
                                break;
                            }
                        case 13: {
                                message.rgBlock = reader.uint32();
                                break;
                            }
                        case 14: {
                                if (!(message.rgProgress && message.rgProgress.length))
                                    message.rgProgress = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.rgProgress.push(reader.uint32());
                                } else
                                    message.rgProgress.push(reader.uint32());
                                break;
                            }
                        case 15: {
                                message.rgClearCount = reader.uint32();
                                break;
                            }
                        case 16: {
                                message.competitionId = reader.uint32();
                                break;
                            }
                        case 17: {
                                message.periodId = reader.uint32();
                                break;
                            }
                        case 18: {
                                message.brakingPoint = reader.uint32();
                                break;
                            }
                        case 19: {
                                message.earnedNameplate = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("opponentCarId"))
                        throw $util.ProtocolError("missing required 'opponentCarId'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("revenged"))
                        throw $util.ProtocolError("missing required 'revenged'", { instance: message });
                    if (!message.hasOwnProperty("selectionMethod"))
                        throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                    if (!message.hasOwnProperty("rgPlayCount"))
                        throw $util.ProtocolError("missing required 'rgPlayCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostBattleResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostBattleResult message.
                 * @function verify
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostBattleResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.opponentCarId))
                        return "opponentCarId: integer expected";
                    if (message.opponentTeamId != null && message.hasOwnProperty("opponentTeamId"))
                        if (!$util.isInteger(message.opponentTeamId))
                            return "opponentTeamId: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (typeof message.revenged !== "boolean")
                        return "revenged: boolean expected";
                    switch (message.selectionMethod) {
                    default:
                        return "selectionMethod: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                        break;
                    }
                    if (!$util.isInteger(message.rgPlayCount))
                        return "rgPlayCount: integer expected";
                    if (message.rgWinCount != null && message.hasOwnProperty("rgWinCount"))
                        if (!$util.isInteger(message.rgWinCount))
                            return "rgWinCount: integer expected";
                    if (message.maxiCoin != null && message.hasOwnProperty("maxiCoin"))
                        if (!$util.isInteger(message.maxiCoin))
                            return "maxiCoin: integer expected";
                    if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                        if (!$util.isInteger(message.dressupPoint))
                            return "dressupPoint: integer expected";
                    if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                        if (!$util.isInteger(message.dressupLevel))
                            return "dressupLevel: integer expected";
                    if (message.ownedDressupParts != null && message.hasOwnProperty("ownedDressupParts"))
                        if (!$util.isInteger(message.ownedDressupParts))
                            return "ownedDressupParts: integer expected";
                    if (message.rgBlock != null && message.hasOwnProperty("rgBlock"))
                        if (!$util.isInteger(message.rgBlock))
                            return "rgBlock: integer expected";
                    if (message.rgProgress != null && message.hasOwnProperty("rgProgress")) {
                        if (!Array.isArray(message.rgProgress))
                            return "rgProgress: array expected";
                        for (let i = 0; i < message.rgProgress.length; ++i)
                            if (!$util.isInteger(message.rgProgress[i]))
                                return "rgProgress: integer[] expected";
                    }
                    if (message.rgClearCount != null && message.hasOwnProperty("rgClearCount"))
                        if (!$util.isInteger(message.rgClearCount))
                            return "rgClearCount: integer expected";
                    if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                        if (!$util.isInteger(message.competitionId))
                            return "competitionId: integer expected";
                    if (message.periodId != null && message.hasOwnProperty("periodId"))
                        if (!$util.isInteger(message.periodId))
                            return "periodId: integer expected";
                    if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                        if (!$util.isInteger(message.brakingPoint))
                            return "brakingPoint: integer expected";
                    if (message.earnedNameplate != null && message.hasOwnProperty("earnedNameplate"))
                        if (!$util.isInteger(message.earnedNameplate))
                            return "earnedNameplate: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostBattleResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 */
                GhostBattleResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult)
                        return object;
                    let message = new $root.v388.protobuf.SaveGameResultRequest.GhostBattleResult();
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.opponentCarId != null)
                        message.opponentCarId = object.opponentCarId >>> 0;
                    if (object.opponentTeamId != null)
                        message.opponentTeamId = object.opponentTeamId >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.revenged != null)
                        message.revenged = Boolean(object.revenged);
                    switch (object.selectionMethod) {
                    default:
                        if (typeof object.selectionMethod === "number") {
                            message.selectionMethod = object.selectionMethod;
                            break;
                        }
                        break;
                    case "GHOST_CHALLENGE":
                    case 1:
                        message.selectionMethod = 1;
                        break;
                    case "GHOST_SELECT_BY_LEVEL":
                    case 2:
                        message.selectionMethod = 2;
                        break;
                    case "GHOST_SELECT_FROM_REVENGES":
                    case 3:
                        message.selectionMethod = 3;
                        break;
                    case "GHOST_SELECT_FROM_HISTORY":
                    case 4:
                        message.selectionMethod = 4;
                        break;
                    case "GHOST_SEARCH_BY_AREA":
                    case 5:
                        message.selectionMethod = 5;
                        break;
                    case "GHOST_SEARCH_BY_NAME":
                    case 6:
                        message.selectionMethod = 6;
                        break;
                    case "GHOST_SEARCH_BY_CODE":
                    case 7:
                        message.selectionMethod = 7;
                        break;
                    case "GHOST_ACCEPT_CHALLENGER":
                    case 8:
                        message.selectionMethod = 8;
                        break;
                    case "GHOST_APPOINTMENT":
                    case 9:
                        message.selectionMethod = 9;
                        break;
                    case "GHOST_DEFAULT_OPPONENT":
                    case 10:
                        message.selectionMethod = 10;
                        break;
                    case "GHOST_COMPETITION":
                    case 11:
                        message.selectionMethod = 11;
                        break;
                    }
                    if (object.rgPlayCount != null)
                        message.rgPlayCount = object.rgPlayCount >>> 0;
                    if (object.rgWinCount != null)
                        message.rgWinCount = object.rgWinCount >>> 0;
                    if (object.maxiCoin != null)
                        message.maxiCoin = object.maxiCoin >>> 0;
                    if (object.dressupPoint != null)
                        message.dressupPoint = object.dressupPoint >>> 0;
                    if (object.dressupLevel != null)
                        message.dressupLevel = object.dressupLevel >>> 0;
                    if (object.ownedDressupParts != null)
                        message.ownedDressupParts = object.ownedDressupParts >>> 0;
                    if (object.rgBlock != null)
                        message.rgBlock = object.rgBlock >>> 0;
                    if (object.rgProgress) {
                        if (!Array.isArray(object.rgProgress))
                            throw TypeError(".v388.protobuf.SaveGameResultRequest.GhostBattleResult.rgProgress: array expected");
                        message.rgProgress = [];
                        for (let i = 0; i < object.rgProgress.length; ++i)
                            message.rgProgress[i] = object.rgProgress[i] >>> 0;
                    }
                    if (object.rgClearCount != null)
                        message.rgClearCount = object.rgClearCount >>> 0;
                    if (object.competitionId != null)
                        message.competitionId = object.competitionId >>> 0;
                    if (object.periodId != null)
                        message.periodId = object.periodId >>> 0;
                    if (object.brakingPoint != null)
                        message.brakingPoint = object.brakingPoint >>> 0;
                    if (object.earnedNameplate != null)
                        message.earnedNameplate = object.earnedNameplate >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostBattleResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {v388.protobuf.SaveGameResultRequest.GhostBattleResult} message GhostBattleResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostBattleResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.rgProgress = [];
                    if (options.defaults) {
                        object.result = 0;
                        object.opponentCarId = 0;
                        object.opponentTeamId = 0;
                        object.area = 0;
                        object.revenged = false;
                        object.selectionMethod = options.enums === String ? "GHOST_CHALLENGE" : 1;
                        object.rgPlayCount = 0;
                        object.rgWinCount = 0;
                        object.maxiCoin = 0;
                        object.dressupPoint = 0;
                        object.dressupLevel = 0;
                        object.ownedDressupParts = 0;
                        object.rgBlock = 0;
                        object.rgClearCount = 0;
                        object.competitionId = 0;
                        object.periodId = 0;
                        object.brakingPoint = 0;
                        object.earnedNameplate = 0;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.opponentCarId != null && message.hasOwnProperty("opponentCarId"))
                        object.opponentCarId = message.opponentCarId;
                    if (message.opponentTeamId != null && message.hasOwnProperty("opponentTeamId"))
                        object.opponentTeamId = message.opponentTeamId;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.revenged != null && message.hasOwnProperty("revenged"))
                        object.revenged = message.revenged;
                    if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                        object.selectionMethod = options.enums === String ? $root.v388.protobuf.GhostSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.v388.protobuf.GhostSelectionMethod[message.selectionMethod] : message.selectionMethod;
                    if (message.rgPlayCount != null && message.hasOwnProperty("rgPlayCount"))
                        object.rgPlayCount = message.rgPlayCount;
                    if (message.rgWinCount != null && message.hasOwnProperty("rgWinCount"))
                        object.rgWinCount = message.rgWinCount;
                    if (message.maxiCoin != null && message.hasOwnProperty("maxiCoin"))
                        object.maxiCoin = message.maxiCoin;
                    if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                        object.dressupPoint = message.dressupPoint;
                    if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                        object.dressupLevel = message.dressupLevel;
                    if (message.ownedDressupParts != null && message.hasOwnProperty("ownedDressupParts"))
                        object.ownedDressupParts = message.ownedDressupParts;
                    if (message.rgBlock != null && message.hasOwnProperty("rgBlock"))
                        object.rgBlock = message.rgBlock;
                    if (message.rgProgress && message.rgProgress.length) {
                        object.rgProgress = [];
                        for (let j = 0; j < message.rgProgress.length; ++j)
                            object.rgProgress[j] = message.rgProgress[j];
                    }
                    if (message.rgClearCount != null && message.hasOwnProperty("rgClearCount"))
                        object.rgClearCount = message.rgClearCount;
                    if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                        object.competitionId = message.competitionId;
                    if (message.periodId != null && message.hasOwnProperty("periodId"))
                        object.periodId = message.periodId;
                    if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                        object.brakingPoint = message.brakingPoint;
                    if (message.earnedNameplate != null && message.hasOwnProperty("earnedNameplate"))
                        object.earnedNameplate = message.earnedNameplate;
                    return object;
                };

                /**
                 * Converts this GhostBattleResult to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostBattleResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostBattleResult
                 * @function getTypeUrl
                 * @memberof v388.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostBattleResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.SaveGameResultRequest.GhostBattleResult";
                };

                return GhostBattleResult;
            })();

            return SaveGameResultRequest;
        })();

        protobuf.SaveGameResultResponse = (function() {

            /**
             * Properties of a SaveGameResultResponse.
             * @memberof v388.protobuf
             * @interface ISaveGameResultResponse
             * @property {v388.protobuf.ErrorCode} error SaveGameResultResponse error
             * @property {number|Long|null} [ghostSessionId] SaveGameResultResponse ghostSessionId
             */

            /**
             * Constructs a new SaveGameResultResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveGameResultResponse.
             * @implements ISaveGameResultResponse
             * @constructor
             * @param {v388.protobuf.ISaveGameResultResponse=} [properties] Properties to set
             */
            function SaveGameResultResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveGameResultResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveGameResultResponse
             * @instance
             */
            SaveGameResultResponse.prototype.error = 0;

            /**
             * SaveGameResultResponse ghostSessionId.
             * @member {number|Long} ghostSessionId
             * @memberof v388.protobuf.SaveGameResultResponse
             * @instance
             */
            SaveGameResultResponse.prototype.ghostSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new SaveGameResultResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveGameResultResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveGameResultResponse} SaveGameResultResponse instance
             */
            SaveGameResultResponse.create = function create(properties) {
                return new SaveGameResultResponse(properties);
            };

            /**
             * Encodes the specified SaveGameResultResponse message. Does not implicitly {@link v388.protobuf.SaveGameResultResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveGameResultResponse} message SaveGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ghostSessionId != null && Object.hasOwnProperty.call(message, "ghostSessionId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ghostSessionId);
                return writer;
            };

            /**
             * Encodes the specified SaveGameResultResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveGameResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveGameResultResponse} message SaveGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveGameResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveGameResultResponse} SaveGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveGameResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.ghostSessionId = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveGameResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveGameResultResponse} SaveGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveGameResultResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveGameResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (!$util.isInteger(message.ghostSessionId) && !(message.ghostSessionId && $util.isInteger(message.ghostSessionId.low) && $util.isInteger(message.ghostSessionId.high)))
                        return "ghostSessionId: integer|Long expected";
                return null;
            };

            /**
             * Creates a SaveGameResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveGameResultResponse} SaveGameResultResponse
             */
            SaveGameResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveGameResultResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveGameResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.ghostSessionId != null)
                    if ($util.Long)
                        (message.ghostSessionId = $util.Long.fromValue(object.ghostSessionId)).unsigned = true;
                    else if (typeof object.ghostSessionId === "string")
                        message.ghostSessionId = parseInt(object.ghostSessionId, 10);
                    else if (typeof object.ghostSessionId === "number")
                        message.ghostSessionId = object.ghostSessionId;
                    else if (typeof object.ghostSessionId === "object")
                        message.ghostSessionId = new $util.LongBits(object.ghostSessionId.low >>> 0, object.ghostSessionId.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a SaveGameResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {v388.protobuf.SaveGameResultResponse} message SaveGameResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveGameResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.ghostSessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ghostSessionId = options.longs === String ? "0" : 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (typeof message.ghostSessionId === "number")
                        object.ghostSessionId = options.longs === String ? String(message.ghostSessionId) : message.ghostSessionId;
                    else
                        object.ghostSessionId = options.longs === String ? $util.Long.prototype.toString.call(message.ghostSessionId) : options.longs === Number ? new $util.LongBits(message.ghostSessionId.low >>> 0, message.ghostSessionId.high >>> 0).toNumber(true) : message.ghostSessionId;
                return object;
            };

            /**
             * Converts this SaveGameResultResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveGameResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveGameResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveGameResultResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveGameResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveGameResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveGameResultResponse";
            };

            return SaveGameResultResponse;
        })();

        protobuf.SaveMultiGameResultRequest = (function() {

            /**
             * Properties of a SaveMultiGameResultRequest.
             * @memberof v388.protobuf
             * @interface ISaveMultiGameResultRequest
             * @property {number} carId SaveMultiGameResultRequest carId
             * @property {number} playedAt SaveMultiGameResultRequest playedAt
             * @property {number} playCount SaveMultiGameResultRequest playCount
             * @property {v388.protobuf.ICar|null} [car] SaveMultiGameResultRequest car
             * @property {v388.protobuf.ICarSetting|null} [setting] SaveMultiGameResultRequest setting
             * @property {number|null} [odometer] SaveMultiGameResultRequest odometer
             * @property {number|null} [tutorials] SaveMultiGameResultRequest tutorials
             * @property {number|null} [hp600Count] SaveMultiGameResultRequest hp600Count
             * @property {boolean|null} [earnedCustomColor] SaveMultiGameResultRequest earnedCustomColor
             * @property {number|null} [ownedCustomColors] SaveMultiGameResultRequest ownedCustomColors
             * @property {v388.protobuf.SaveGameResultRequest.IStoryResult|null} [stResult] SaveMultiGameResultRequest stResult
             * @property {Array.<v388.protobuf.SaveGameResultRequest.ITimeAttackResult>|null} [taResult] SaveMultiGameResultRequest taResult
             * @property {v388.protobuf.SaveGameResultRequest.IVersusBattleResult|null} [vsResult] SaveMultiGameResultRequest vsResult
             */

            /**
             * Constructs a new SaveMultiGameResultRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveMultiGameResultRequest.
             * @implements ISaveMultiGameResultRequest
             * @constructor
             * @param {v388.protobuf.ISaveMultiGameResultRequest=} [properties] Properties to set
             */
            function SaveMultiGameResultRequest(properties) {
                this.taResult = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveMultiGameResultRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.carId = 0;

            /**
             * SaveMultiGameResultRequest playedAt.
             * @member {number} playedAt
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.playedAt = 0;

            /**
             * SaveMultiGameResultRequest playCount.
             * @member {number} playCount
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.playCount = 0;

            /**
             * SaveMultiGameResultRequest car.
             * @member {v388.protobuf.ICar|null|undefined} car
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.car = null;

            /**
             * SaveMultiGameResultRequest setting.
             * @member {v388.protobuf.ICarSetting|null|undefined} setting
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.setting = null;

            /**
             * SaveMultiGameResultRequest odometer.
             * @member {number} odometer
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.odometer = 0;

            /**
             * SaveMultiGameResultRequest tutorials.
             * @member {number} tutorials
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.tutorials = 0;

            /**
             * SaveMultiGameResultRequest hp600Count.
             * @member {number} hp600Count
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.hp600Count = 0;

            /**
             * SaveMultiGameResultRequest earnedCustomColor.
             * @member {boolean} earnedCustomColor
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.earnedCustomColor = false;

            /**
             * SaveMultiGameResultRequest ownedCustomColors.
             * @member {number} ownedCustomColors
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.ownedCustomColors = 0;

            /**
             * SaveMultiGameResultRequest stResult.
             * @member {v388.protobuf.SaveGameResultRequest.IStoryResult|null|undefined} stResult
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.stResult = null;

            /**
             * SaveMultiGameResultRequest taResult.
             * @member {Array.<v388.protobuf.SaveGameResultRequest.ITimeAttackResult>} taResult
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.taResult = $util.emptyArray;

            /**
             * SaveMultiGameResultRequest vsResult.
             * @member {v388.protobuf.SaveGameResultRequest.IVersusBattleResult|null|undefined} vsResult
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             */
            SaveMultiGameResultRequest.prototype.vsResult = null;

            /**
             * Creates a new SaveMultiGameResultRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveMultiGameResultRequest} SaveMultiGameResultRequest instance
             */
            SaveMultiGameResultRequest.create = function create(properties) {
                return new SaveMultiGameResultRequest(properties);
            };

            /**
             * Encodes the specified SaveMultiGameResultRequest message. Does not implicitly {@link v388.protobuf.SaveMultiGameResultRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultRequest} message SaveMultiGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveMultiGameResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.playedAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.playCount);
                if (message.car != null && Object.hasOwnProperty.call(message, "car"))
                    $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.setting != null && Object.hasOwnProperty.call(message, "setting"))
                    $root.v388.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.odometer != null && Object.hasOwnProperty.call(message, "odometer"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.odometer);
                if (message.tutorials != null && Object.hasOwnProperty.call(message, "tutorials"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.tutorials);
                if (message.hp600Count != null && Object.hasOwnProperty.call(message, "hp600Count"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.hp600Count);
                if (message.earnedCustomColor != null && Object.hasOwnProperty.call(message, "earnedCustomColor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.earnedCustomColor);
                if (message.ownedCustomColors != null && Object.hasOwnProperty.call(message, "ownedCustomColors"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ownedCustomColors);
                if (message.stResult != null && Object.hasOwnProperty.call(message, "stResult"))
                    $root.v388.protobuf.SaveGameResultRequest.StoryResult.encode(message.stResult, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.taResult != null && message.taResult.length)
                    for (let i = 0; i < message.taResult.length; ++i)
                        $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.encode(message.taResult[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.vsResult != null && Object.hasOwnProperty.call(message, "vsResult"))
                    $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.encode(message.vsResult, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveMultiGameResultRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveMultiGameResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultRequest} message SaveMultiGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveMultiGameResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveMultiGameResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveMultiGameResultRequest} SaveMultiGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveMultiGameResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveMultiGameResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.playCount = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.setting = $root.v388.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.odometer = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.tutorials = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.hp600Count = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.earnedCustomColor = reader.bool();
                            break;
                        }
                    case 10: {
                            message.ownedCustomColors = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            if (!(message.taResult && message.taResult.length))
                                message.taResult = [];
                            message.taResult.push($root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.decode(reader, reader.uint32()));
                            break;
                        }
                    case 13: {
                            message.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("playedAt"))
                    throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                if (!message.hasOwnProperty("playCount"))
                    throw $util.ProtocolError("missing required 'playCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveMultiGameResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveMultiGameResultRequest} SaveMultiGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveMultiGameResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveMultiGameResultRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveMultiGameResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.playedAt))
                    return "playedAt: integer expected";
                if (!$util.isInteger(message.playCount))
                    return "playCount: integer expected";
                if (message.car != null && message.hasOwnProperty("car")) {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.setting != null && message.hasOwnProperty("setting")) {
                    let error = $root.v388.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    if (!$util.isInteger(message.odometer))
                        return "odometer: integer expected";
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    if (!$util.isInteger(message.tutorials))
                        return "tutorials: integer expected";
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    if (!$util.isInteger(message.hp600Count))
                        return "hp600Count: integer expected";
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    if (typeof message.earnedCustomColor !== "boolean")
                        return "earnedCustomColor: boolean expected";
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    if (!$util.isInteger(message.ownedCustomColors))
                        return "ownedCustomColors: integer expected";
                if (message.stResult != null && message.hasOwnProperty("stResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.StoryResult.verify(message.stResult);
                    if (error)
                        return "stResult." + error;
                }
                if (message.taResult != null && message.hasOwnProperty("taResult")) {
                    if (!Array.isArray(message.taResult))
                        return "taResult: array expected";
                    for (let i = 0; i < message.taResult.length; ++i) {
                        let error = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.verify(message.taResult[i]);
                        if (error)
                            return "taResult." + error;
                    }
                }
                if (message.vsResult != null && message.hasOwnProperty("vsResult")) {
                    let error = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.verify(message.vsResult);
                    if (error)
                        return "vsResult." + error;
                }
                return null;
            };

            /**
             * Creates a SaveMultiGameResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveMultiGameResultRequest} SaveMultiGameResultRequest
             */
            SaveMultiGameResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveMultiGameResultRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveMultiGameResultRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.playCount != null)
                    message.playCount = object.playCount >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.setting: object expected");
                    message.setting = $root.v388.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.odometer != null)
                    message.odometer = object.odometer >>> 0;
                if (object.tutorials != null)
                    message.tutorials = object.tutorials >>> 0;
                if (object.hp600Count != null)
                    message.hp600Count = object.hp600Count >>> 0;
                if (object.earnedCustomColor != null)
                    message.earnedCustomColor = Boolean(object.earnedCustomColor);
                if (object.ownedCustomColors != null)
                    message.ownedCustomColors = object.ownedCustomColors >>> 0;
                if (object.stResult != null) {
                    if (typeof object.stResult !== "object")
                        throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.stResult: object expected");
                    message.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.fromObject(object.stResult);
                }
                if (object.taResult) {
                    if (!Array.isArray(object.taResult))
                        throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.taResult: array expected");
                    message.taResult = [];
                    for (let i = 0; i < object.taResult.length; ++i) {
                        if (typeof object.taResult[i] !== "object")
                            throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.taResult: object expected");
                        message.taResult[i] = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.fromObject(object.taResult[i]);
                    }
                }
                if (object.vsResult != null) {
                    if (typeof object.vsResult !== "object")
                        throw TypeError(".v388.protobuf.SaveMultiGameResultRequest.vsResult: object expected");
                    message.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.fromObject(object.vsResult);
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveMultiGameResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {v388.protobuf.SaveMultiGameResultRequest} message SaveMultiGameResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveMultiGameResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.taResult = [];
                if (options.defaults) {
                    object.carId = 0;
                    object.playedAt = 0;
                    object.playCount = 0;
                    object.car = null;
                    object.setting = null;
                    object.odometer = 0;
                    object.tutorials = 0;
                    object.hp600Count = 0;
                    object.earnedCustomColor = false;
                    object.ownedCustomColors = 0;
                    object.stResult = null;
                    object.vsResult = null;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.playCount != null && message.hasOwnProperty("playCount"))
                    object.playCount = message.playCount;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.v388.protobuf.CarSetting.toObject(message.setting, options);
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    object.odometer = message.odometer;
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    object.tutorials = message.tutorials;
                if (message.hp600Count != null && message.hasOwnProperty("hp600Count"))
                    object.hp600Count = message.hp600Count;
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    object.earnedCustomColor = message.earnedCustomColor;
                if (message.ownedCustomColors != null && message.hasOwnProperty("ownedCustomColors"))
                    object.ownedCustomColors = message.ownedCustomColors;
                if (message.stResult != null && message.hasOwnProperty("stResult"))
                    object.stResult = $root.v388.protobuf.SaveGameResultRequest.StoryResult.toObject(message.stResult, options);
                if (message.taResult && message.taResult.length) {
                    object.taResult = [];
                    for (let j = 0; j < message.taResult.length; ++j)
                        object.taResult[j] = $root.v388.protobuf.SaveGameResultRequest.TimeAttackResult.toObject(message.taResult[j], options);
                }
                if (message.vsResult != null && message.hasOwnProperty("vsResult"))
                    object.vsResult = $root.v388.protobuf.SaveGameResultRequest.VersusBattleResult.toObject(message.vsResult, options);
                return object;
            };

            /**
             * Converts this SaveMultiGameResultRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveMultiGameResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveMultiGameResultRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveMultiGameResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveMultiGameResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveMultiGameResultRequest";
            };

            return SaveMultiGameResultRequest;
        })();

        protobuf.SaveMultiGameResultResponse = (function() {

            /**
             * Properties of a SaveMultiGameResultResponse.
             * @memberof v388.protobuf
             * @interface ISaveMultiGameResultResponse
             * @property {v388.protobuf.ErrorCode} error SaveMultiGameResultResponse error
             */

            /**
             * Constructs a new SaveMultiGameResultResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveMultiGameResultResponse.
             * @implements ISaveMultiGameResultResponse
             * @constructor
             * @param {v388.protobuf.ISaveMultiGameResultResponse=} [properties] Properties to set
             */
            function SaveMultiGameResultResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveMultiGameResultResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @instance
             */
            SaveMultiGameResultResponse.prototype.error = 0;

            /**
             * Creates a new SaveMultiGameResultResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveMultiGameResultResponse} SaveMultiGameResultResponse instance
             */
            SaveMultiGameResultResponse.create = function create(properties) {
                return new SaveMultiGameResultResponse(properties);
            };

            /**
             * Encodes the specified SaveMultiGameResultResponse message. Does not implicitly {@link v388.protobuf.SaveMultiGameResultResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultResponse} message SaveMultiGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveMultiGameResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveMultiGameResultResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveMultiGameResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {v388.protobuf.ISaveMultiGameResultResponse} message SaveMultiGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveMultiGameResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveMultiGameResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveMultiGameResultResponse} SaveMultiGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveMultiGameResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveMultiGameResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveMultiGameResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveMultiGameResultResponse} SaveMultiGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveMultiGameResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveMultiGameResultResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveMultiGameResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveMultiGameResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveMultiGameResultResponse} SaveMultiGameResultResponse
             */
            SaveMultiGameResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveMultiGameResultResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveMultiGameResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveMultiGameResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {v388.protobuf.SaveMultiGameResultResponse} message SaveMultiGameResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveMultiGameResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveMultiGameResultResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveMultiGameResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveMultiGameResultResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveMultiGameResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveMultiGameResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveMultiGameResultResponse";
            };

            return SaveMultiGameResultResponse;
        })();

        protobuf.SaveChargeRequest = (function() {

            /**
             * Properties of a SaveChargeRequest.
             * @memberof v388.protobuf
             * @interface ISaveChargeRequest
             * @property {Array.<v388.protobuf.SaveChargeRequest.IChargeLog>|null} [chargeLogs] SaveChargeRequest chargeLogs
             */

            /**
             * Constructs a new SaveChargeRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveChargeRequest.
             * @implements ISaveChargeRequest
             * @constructor
             * @param {v388.protobuf.ISaveChargeRequest=} [properties] Properties to set
             */
            function SaveChargeRequest(properties) {
                this.chargeLogs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveChargeRequest chargeLogs.
             * @member {Array.<v388.protobuf.SaveChargeRequest.IChargeLog>} chargeLogs
             * @memberof v388.protobuf.SaveChargeRequest
             * @instance
             */
            SaveChargeRequest.prototype.chargeLogs = $util.emptyArray;

            /**
             * Creates a new SaveChargeRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {v388.protobuf.ISaveChargeRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveChargeRequest} SaveChargeRequest instance
             */
            SaveChargeRequest.create = function create(properties) {
                return new SaveChargeRequest(properties);
            };

            /**
             * Encodes the specified SaveChargeRequest message. Does not implicitly {@link v388.protobuf.SaveChargeRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {v388.protobuf.ISaveChargeRequest} message SaveChargeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chargeLogs != null && message.chargeLogs.length)
                    for (let i = 0; i < message.chargeLogs.length; ++i)
                        $root.v388.protobuf.SaveChargeRequest.ChargeLog.encode(message.chargeLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveChargeRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveChargeRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {v388.protobuf.ISaveChargeRequest} message SaveChargeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveChargeRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveChargeRequest} SaveChargeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveChargeRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.chargeLogs && message.chargeLogs.length))
                                message.chargeLogs = [];
                            message.chargeLogs.push($root.v388.protobuf.SaveChargeRequest.ChargeLog.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SaveChargeRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveChargeRequest} SaveChargeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveChargeRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveChargeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chargeLogs != null && message.hasOwnProperty("chargeLogs")) {
                    if (!Array.isArray(message.chargeLogs))
                        return "chargeLogs: array expected";
                    for (let i = 0; i < message.chargeLogs.length; ++i) {
                        let error = $root.v388.protobuf.SaveChargeRequest.ChargeLog.verify(message.chargeLogs[i]);
                        if (error)
                            return "chargeLogs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SaveChargeRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveChargeRequest} SaveChargeRequest
             */
            SaveChargeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveChargeRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveChargeRequest();
                if (object.chargeLogs) {
                    if (!Array.isArray(object.chargeLogs))
                        throw TypeError(".v388.protobuf.SaveChargeRequest.chargeLogs: array expected");
                    message.chargeLogs = [];
                    for (let i = 0; i < object.chargeLogs.length; ++i) {
                        if (typeof object.chargeLogs[i] !== "object")
                            throw TypeError(".v388.protobuf.SaveChargeRequest.chargeLogs: object expected");
                        message.chargeLogs[i] = $root.v388.protobuf.SaveChargeRequest.ChargeLog.fromObject(object.chargeLogs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveChargeRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {v388.protobuf.SaveChargeRequest} message SaveChargeRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveChargeRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.chargeLogs = [];
                if (message.chargeLogs && message.chargeLogs.length) {
                    object.chargeLogs = [];
                    for (let j = 0; j < message.chargeLogs.length; ++j)
                        object.chargeLogs[j] = $root.v388.protobuf.SaveChargeRequest.ChargeLog.toObject(message.chargeLogs[j], options);
                }
                return object;
            };

            /**
             * Converts this SaveChargeRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveChargeRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveChargeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveChargeRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveChargeRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveChargeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveChargeRequest";
            };

            SaveChargeRequest.ChargeLog = (function() {

                /**
                 * Properties of a ChargeLog.
                 * @memberof v388.protobuf.SaveChargeRequest
                 * @interface IChargeLog
                 * @property {number} datetime ChargeLog datetime
                 * @property {string} pcbSerial ChargeLog pcbSerial
                 * @property {string} placeId ChargeLog placeId
                 */

                /**
                 * Constructs a new ChargeLog.
                 * @memberof v388.protobuf.SaveChargeRequest
                 * @classdesc Represents a ChargeLog.
                 * @implements IChargeLog
                 * @constructor
                 * @param {v388.protobuf.SaveChargeRequest.IChargeLog=} [properties] Properties to set
                 */
                function ChargeLog(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ChargeLog datetime.
                 * @member {number} datetime
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.datetime = 0;

                /**
                 * ChargeLog pcbSerial.
                 * @member {string} pcbSerial
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.pcbSerial = "";

                /**
                 * ChargeLog placeId.
                 * @member {string} placeId
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.placeId = "";

                /**
                 * Creates a new ChargeLog instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {v388.protobuf.SaveChargeRequest.IChargeLog=} [properties] Properties to set
                 * @returns {v388.protobuf.SaveChargeRequest.ChargeLog} ChargeLog instance
                 */
                ChargeLog.create = function create(properties) {
                    return new ChargeLog(properties);
                };

                /**
                 * Encodes the specified ChargeLog message. Does not implicitly {@link v388.protobuf.SaveChargeRequest.ChargeLog.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {v388.protobuf.SaveChargeRequest.IChargeLog} message ChargeLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChargeLog.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.datetime);
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.pcbSerial);
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                    return writer;
                };

                /**
                 * Encodes the specified ChargeLog message, length delimited. Does not implicitly {@link v388.protobuf.SaveChargeRequest.ChargeLog.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {v388.protobuf.SaveChargeRequest.IChargeLog} message ChargeLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChargeLog.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ChargeLog message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChargeLog.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveChargeRequest.ChargeLog();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.datetime = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.pcbSerial = reader.string();
                                break;
                            }
                        case 3: {
                                message.placeId = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("datetime"))
                        throw $util.ProtocolError("missing required 'datetime'", { instance: message });
                    if (!message.hasOwnProperty("pcbSerial"))
                        throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                    if (!message.hasOwnProperty("placeId"))
                        throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a ChargeLog message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChargeLog.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ChargeLog message.
                 * @function verify
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ChargeLog.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.datetime))
                        return "datetime: integer expected";
                    if (!$util.isString(message.pcbSerial))
                        return "pcbSerial: string expected";
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                    return null;
                };

                /**
                 * Creates a ChargeLog message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 */
                ChargeLog.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.SaveChargeRequest.ChargeLog)
                        return object;
                    let message = new $root.v388.protobuf.SaveChargeRequest.ChargeLog();
                    if (object.datetime != null)
                        message.datetime = object.datetime >>> 0;
                    if (object.pcbSerial != null)
                        message.pcbSerial = String(object.pcbSerial);
                    if (object.placeId != null)
                        message.placeId = String(object.placeId);
                    return message;
                };

                /**
                 * Creates a plain object from a ChargeLog message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {v388.protobuf.SaveChargeRequest.ChargeLog} message ChargeLog
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ChargeLog.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.datetime = 0;
                        object.pcbSerial = "";
                        object.placeId = "";
                    }
                    if (message.datetime != null && message.hasOwnProperty("datetime"))
                        object.datetime = message.datetime;
                    if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                        object.pcbSerial = message.pcbSerial;
                    if (message.placeId != null && message.hasOwnProperty("placeId"))
                        object.placeId = message.placeId;
                    return object;
                };

                /**
                 * Converts this ChargeLog to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ChargeLog.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ChargeLog
                 * @function getTypeUrl
                 * @memberof v388.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ChargeLog.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.SaveChargeRequest.ChargeLog";
                };

                return ChargeLog;
            })();

            return SaveChargeRequest;
        })();

        protobuf.SaveChargeResponse = (function() {

            /**
             * Properties of a SaveChargeResponse.
             * @memberof v388.protobuf
             * @interface ISaveChargeResponse
             * @property {v388.protobuf.ErrorCode} error SaveChargeResponse error
             */

            /**
             * Constructs a new SaveChargeResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveChargeResponse.
             * @implements ISaveChargeResponse
             * @constructor
             * @param {v388.protobuf.ISaveChargeResponse=} [properties] Properties to set
             */
            function SaveChargeResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveChargeResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveChargeResponse
             * @instance
             */
            SaveChargeResponse.prototype.error = 0;

            /**
             * Creates a new SaveChargeResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {v388.protobuf.ISaveChargeResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveChargeResponse} SaveChargeResponse instance
             */
            SaveChargeResponse.create = function create(properties) {
                return new SaveChargeResponse(properties);
            };

            /**
             * Encodes the specified SaveChargeResponse message. Does not implicitly {@link v388.protobuf.SaveChargeResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {v388.protobuf.ISaveChargeResponse} message SaveChargeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveChargeResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveChargeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {v388.protobuf.ISaveChargeResponse} message SaveChargeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveChargeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveChargeResponse} SaveChargeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveChargeResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveChargeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveChargeResponse} SaveChargeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveChargeResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveChargeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveChargeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveChargeResponse} SaveChargeResponse
             */
            SaveChargeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveChargeResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveChargeResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveChargeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {v388.protobuf.SaveChargeResponse} message SaveChargeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveChargeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveChargeResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveChargeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveChargeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveChargeResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveChargeResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveChargeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveChargeResponse";
            };

            return SaveChargeResponse;
        })();

        protobuf.LoadRevengesRequest = (function() {

            /**
             * Properties of a LoadRevengesRequest.
             * @memberof v388.protobuf
             * @interface ILoadRevengesRequest
             * @property {number} carId LoadRevengesRequest carId
             */

            /**
             * Constructs a new LoadRevengesRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadRevengesRequest.
             * @implements ILoadRevengesRequest
             * @constructor
             * @param {v388.protobuf.ILoadRevengesRequest=} [properties] Properties to set
             */
            function LoadRevengesRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadRevengesRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadRevengesRequest
             * @instance
             */
            LoadRevengesRequest.prototype.carId = 0;

            /**
             * Creates a new LoadRevengesRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {v388.protobuf.ILoadRevengesRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadRevengesRequest} LoadRevengesRequest instance
             */
            LoadRevengesRequest.create = function create(properties) {
                return new LoadRevengesRequest(properties);
            };

            /**
             * Encodes the specified LoadRevengesRequest message. Does not implicitly {@link v388.protobuf.LoadRevengesRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {v388.protobuf.ILoadRevengesRequest} message LoadRevengesRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadRevengesRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadRevengesRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadRevengesRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {v388.protobuf.ILoadRevengesRequest} message LoadRevengesRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadRevengesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadRevengesRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadRevengesRequest} LoadRevengesRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadRevengesRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadRevengesRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadRevengesRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadRevengesRequest} LoadRevengesRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadRevengesRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadRevengesRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadRevengesRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadRevengesRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadRevengesRequest} LoadRevengesRequest
             */
            LoadRevengesRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadRevengesRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadRevengesRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadRevengesRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {v388.protobuf.LoadRevengesRequest} message LoadRevengesRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadRevengesRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadRevengesRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadRevengesRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadRevengesRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadRevengesRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadRevengesRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadRevengesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadRevengesRequest";
            };

            return LoadRevengesRequest;
        })();

        protobuf.LoadRevengesResponse = (function() {

            /**
             * Properties of a LoadRevengesResponse.
             * @memberof v388.protobuf
             * @interface ILoadRevengesResponse
             * @property {v388.protobuf.ErrorCode} error LoadRevengesResponse error
             * @property {Array.<v388.protobuf.IGhostCar>|null} [ghosts] LoadRevengesResponse ghosts
             */

            /**
             * Constructs a new LoadRevengesResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadRevengesResponse.
             * @implements ILoadRevengesResponse
             * @constructor
             * @param {v388.protobuf.ILoadRevengesResponse=} [properties] Properties to set
             */
            function LoadRevengesResponse(properties) {
                this.ghosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadRevengesResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadRevengesResponse
             * @instance
             */
            LoadRevengesResponse.prototype.error = 0;

            /**
             * LoadRevengesResponse ghosts.
             * @member {Array.<v388.protobuf.IGhostCar>} ghosts
             * @memberof v388.protobuf.LoadRevengesResponse
             * @instance
             */
            LoadRevengesResponse.prototype.ghosts = $util.emptyArray;

            /**
             * Creates a new LoadRevengesResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {v388.protobuf.ILoadRevengesResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadRevengesResponse} LoadRevengesResponse instance
             */
            LoadRevengesResponse.create = function create(properties) {
                return new LoadRevengesResponse(properties);
            };

            /**
             * Encodes the specified LoadRevengesResponse message. Does not implicitly {@link v388.protobuf.LoadRevengesResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {v388.protobuf.ILoadRevengesResponse} message LoadRevengesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadRevengesResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.v388.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadRevengesResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadRevengesResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {v388.protobuf.ILoadRevengesResponse} message LoadRevengesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadRevengesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadRevengesResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadRevengesResponse} LoadRevengesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadRevengesResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadRevengesResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.v388.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadRevengesResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadRevengesResponse} LoadRevengesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadRevengesResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadRevengesResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadRevengesResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.v388.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadRevengesResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadRevengesResponse} LoadRevengesResponse
             */
            LoadRevengesResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadRevengesResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadRevengesResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".v388.protobuf.LoadRevengesResponse.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadRevengesResponse.ghosts: object expected");
                        message.ghosts[i] = $root.v388.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadRevengesResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {v388.protobuf.LoadRevengesResponse} message LoadRevengesResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadRevengesResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ghosts = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.v388.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadRevengesResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadRevengesResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadRevengesResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadRevengesResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadRevengesResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadRevengesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadRevengesResponse";
            };

            return LoadRevengesResponse;
        })();

        protobuf.LoadGhostBattleHistoryRequest = (function() {

            /**
             * Properties of a LoadGhostBattleHistoryRequest.
             * @memberof v388.protobuf
             * @interface ILoadGhostBattleHistoryRequest
             * @property {number} carId LoadGhostBattleHistoryRequest carId
             */

            /**
             * Constructs a new LoadGhostBattleHistoryRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostBattleHistoryRequest.
             * @implements ILoadGhostBattleHistoryRequest
             * @constructor
             * @param {v388.protobuf.ILoadGhostBattleHistoryRequest=} [properties] Properties to set
             */
            function LoadGhostBattleHistoryRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleHistoryRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @instance
             */
            LoadGhostBattleHistoryRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostBattleHistoryRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostBattleHistoryRequest} LoadGhostBattleHistoryRequest instance
             */
            LoadGhostBattleHistoryRequest.create = function create(properties) {
                return new LoadGhostBattleHistoryRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleHistoryRequest message. Does not implicitly {@link v388.protobuf.LoadGhostBattleHistoryRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryRequest} message LoadGhostBattleHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleHistoryRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleHistoryRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostBattleHistoryRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryRequest} message LoadGhostBattleHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleHistoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleHistoryRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostBattleHistoryRequest} LoadGhostBattleHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleHistoryRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostBattleHistoryRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleHistoryRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostBattleHistoryRequest} LoadGhostBattleHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleHistoryRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleHistoryRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleHistoryRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostBattleHistoryRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostBattleHistoryRequest} LoadGhostBattleHistoryRequest
             */
            LoadGhostBattleHistoryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostBattleHistoryRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostBattleHistoryRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleHistoryRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {v388.protobuf.LoadGhostBattleHistoryRequest} message LoadGhostBattleHistoryRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleHistoryRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostBattleHistoryRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleHistoryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleHistoryRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostBattleHistoryRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleHistoryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostBattleHistoryRequest";
            };

            return LoadGhostBattleHistoryRequest;
        })();

        protobuf.LoadGhostBattleHistoryResponse = (function() {

            /**
             * Properties of a LoadGhostBattleHistoryResponse.
             * @memberof v388.protobuf
             * @interface ILoadGhostBattleHistoryResponse
             * @property {v388.protobuf.ErrorCode} error LoadGhostBattleHistoryResponse error
             * @property {Array.<v388.protobuf.ICar>|null} [cars] LoadGhostBattleHistoryResponse cars
             */

            /**
             * Constructs a new LoadGhostBattleHistoryResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostBattleHistoryResponse.
             * @implements ILoadGhostBattleHistoryResponse
             * @constructor
             * @param {v388.protobuf.ILoadGhostBattleHistoryResponse=} [properties] Properties to set
             */
            function LoadGhostBattleHistoryResponse(properties) {
                this.cars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleHistoryResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @instance
             */
            LoadGhostBattleHistoryResponse.prototype.error = 0;

            /**
             * LoadGhostBattleHistoryResponse cars.
             * @member {Array.<v388.protobuf.ICar>} cars
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @instance
             */
            LoadGhostBattleHistoryResponse.prototype.cars = $util.emptyArray;

            /**
             * Creates a new LoadGhostBattleHistoryResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostBattleHistoryResponse} LoadGhostBattleHistoryResponse instance
             */
            LoadGhostBattleHistoryResponse.create = function create(properties) {
                return new LoadGhostBattleHistoryResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleHistoryResponse message. Does not implicitly {@link v388.protobuf.LoadGhostBattleHistoryResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryResponse} message LoadGhostBattleHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleHistoryResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.v388.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleHistoryResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostBattleHistoryResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleHistoryResponse} message LoadGhostBattleHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleHistoryResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostBattleHistoryResponse} LoadGhostBattleHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleHistoryResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostBattleHistoryResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.v388.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleHistoryResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostBattleHistoryResponse} LoadGhostBattleHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleHistoryResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleHistoryResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleHistoryResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.v388.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostBattleHistoryResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostBattleHistoryResponse} LoadGhostBattleHistoryResponse
             */
            LoadGhostBattleHistoryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostBattleHistoryResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostBattleHistoryResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".v388.protobuf.LoadGhostBattleHistoryResponse.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGhostBattleHistoryResponse.cars: object expected");
                        message.cars[i] = $root.v388.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleHistoryResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {v388.protobuf.LoadGhostBattleHistoryResponse} message LoadGhostBattleHistoryResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleHistoryResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cars = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.v388.protobuf.Car.toObject(message.cars[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostBattleHistoryResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleHistoryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleHistoryResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostBattleHistoryResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleHistoryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostBattleHistoryResponse";
            };

            return LoadGhostBattleHistoryResponse;
        })();

        protobuf.LoadGhostBattleInfoRequest = (function() {

            /**
             * Properties of a LoadGhostBattleInfoRequest.
             * @memberof v388.protobuf
             * @interface ILoadGhostBattleInfoRequest
             * @property {number} carId LoadGhostBattleInfoRequest carId
             */

            /**
             * Constructs a new LoadGhostBattleInfoRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostBattleInfoRequest.
             * @implements ILoadGhostBattleInfoRequest
             * @constructor
             * @param {v388.protobuf.ILoadGhostBattleInfoRequest=} [properties] Properties to set
             */
            function LoadGhostBattleInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleInfoRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @instance
             */
            LoadGhostBattleInfoRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostBattleInfoRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest instance
             */
            LoadGhostBattleInfoRequest.create = function create(properties) {
                return new LoadGhostBattleInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleInfoRequest message. Does not implicitly {@link v388.protobuf.LoadGhostBattleInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleInfoRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostBattleInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostBattleInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleInfoRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostBattleInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             */
            LoadGhostBattleInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostBattleInfoRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostBattleInfoRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {v388.protobuf.LoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostBattleInfoRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleInfoRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostBattleInfoRequest";
            };

            return LoadGhostBattleInfoRequest;
        })();

        protobuf.LoadGhostBattleInfoResponse = (function() {

            /**
             * Properties of a LoadGhostBattleInfoResponse.
             * @memberof v388.protobuf
             * @interface ILoadGhostBattleInfoResponse
             * @property {v388.protobuf.ErrorCode} error LoadGhostBattleInfoResponse error
             * @property {Array.<v388.protobuf.IFriendCar>|null} [friendCars] LoadGhostBattleInfoResponse friendCars
             * @property {v388.protobuf.IGhostCar|null} [defaultOpponent] LoadGhostBattleInfoResponse defaultOpponent
             * @property {boolean} hasRevenges LoadGhostBattleInfoResponse hasRevenges
             * @property {boolean} hasHistory LoadGhostBattleInfoResponse hasHistory
             * @property {Array.<v388.protobuf.ITeamSticker>|null} [stickers] LoadGhostBattleInfoResponse stickers
             */

            /**
             * Constructs a new LoadGhostBattleInfoResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostBattleInfoResponse.
             * @implements ILoadGhostBattleInfoResponse
             * @constructor
             * @param {v388.protobuf.ILoadGhostBattleInfoResponse=} [properties] Properties to set
             */
            function LoadGhostBattleInfoResponse(properties) {
                this.friendCars = [];
                this.stickers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleInfoResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.error = 0;

            /**
             * LoadGhostBattleInfoResponse friendCars.
             * @member {Array.<v388.protobuf.IFriendCar>} friendCars
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.friendCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse defaultOpponent.
             * @member {v388.protobuf.IGhostCar|null|undefined} defaultOpponent
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.defaultOpponent = null;

            /**
             * LoadGhostBattleInfoResponse hasRevenges.
             * @member {boolean} hasRevenges
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.hasRevenges = false;

            /**
             * LoadGhostBattleInfoResponse hasHistory.
             * @member {boolean} hasHistory
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.hasHistory = false;

            /**
             * LoadGhostBattleInfoResponse stickers.
             * @member {Array.<v388.protobuf.ITeamSticker>} stickers
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.stickers = $util.emptyArray;

            /**
             * Creates a new LoadGhostBattleInfoResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse instance
             */
            LoadGhostBattleInfoResponse.create = function create(properties) {
                return new LoadGhostBattleInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleInfoResponse message. Does not implicitly {@link v388.protobuf.LoadGhostBattleInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.friendCars != null && message.friendCars.length)
                    for (let i = 0; i < message.friendCars.length; ++i)
                        $root.v388.protobuf.FriendCar.encode(message.friendCars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.defaultOpponent != null && Object.hasOwnProperty.call(message, "defaultOpponent"))
                    $root.v388.protobuf.GhostCar.encode(message.defaultOpponent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.hasRevenges);
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.hasHistory);
                if (message.stickers != null && message.stickers.length)
                    for (let i = 0; i < message.stickers.length; ++i)
                        $root.v388.protobuf.TeamSticker.encode(message.stickers[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleInfoResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostBattleInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostBattleInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.friendCars && message.friendCars.length))
                                message.friendCars = [];
                            message.friendCars.push($root.v388.protobuf.FriendCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.defaultOpponent = $root.v388.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.hasRevenges = reader.bool();
                            break;
                        }
                    case 5: {
                            message.hasHistory = reader.bool();
                            break;
                        }
                    case 6: {
                            if (!(message.stickers && message.stickers.length))
                                message.stickers = [];
                            message.stickers.push($root.v388.protobuf.TeamSticker.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("hasRevenges"))
                    throw $util.ProtocolError("missing required 'hasRevenges'", { instance: message });
                if (!message.hasOwnProperty("hasHistory"))
                    throw $util.ProtocolError("missing required 'hasHistory'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleInfoResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.friendCars != null && message.hasOwnProperty("friendCars")) {
                    if (!Array.isArray(message.friendCars))
                        return "friendCars: array expected";
                    for (let i = 0; i < message.friendCars.length; ++i) {
                        let error = $root.v388.protobuf.FriendCar.verify(message.friendCars[i]);
                        if (error)
                            return "friendCars." + error;
                    }
                }
                if (message.defaultOpponent != null && message.hasOwnProperty("defaultOpponent")) {
                    let error = $root.v388.protobuf.GhostCar.verify(message.defaultOpponent);
                    if (error)
                        return "defaultOpponent." + error;
                }
                if (typeof message.hasRevenges !== "boolean")
                    return "hasRevenges: boolean expected";
                if (typeof message.hasHistory !== "boolean")
                    return "hasHistory: boolean expected";
                if (message.stickers != null && message.hasOwnProperty("stickers")) {
                    if (!Array.isArray(message.stickers))
                        return "stickers: array expected";
                    for (let i = 0; i < message.stickers.length; ++i) {
                        let error = $root.v388.protobuf.TeamSticker.verify(message.stickers[i]);
                        if (error)
                            return "stickers." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostBattleInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             */
            LoadGhostBattleInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostBattleInfoResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostBattleInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.friendCars) {
                    if (!Array.isArray(object.friendCars))
                        throw TypeError(".v388.protobuf.LoadGhostBattleInfoResponse.friendCars: array expected");
                    message.friendCars = [];
                    for (let i = 0; i < object.friendCars.length; ++i) {
                        if (typeof object.friendCars[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGhostBattleInfoResponse.friendCars: object expected");
                        message.friendCars[i] = $root.v388.protobuf.FriendCar.fromObject(object.friendCars[i]);
                    }
                }
                if (object.defaultOpponent != null) {
                    if (typeof object.defaultOpponent !== "object")
                        throw TypeError(".v388.protobuf.LoadGhostBattleInfoResponse.defaultOpponent: object expected");
                    message.defaultOpponent = $root.v388.protobuf.GhostCar.fromObject(object.defaultOpponent);
                }
                if (object.hasRevenges != null)
                    message.hasRevenges = Boolean(object.hasRevenges);
                if (object.hasHistory != null)
                    message.hasHistory = Boolean(object.hasHistory);
                if (object.stickers) {
                    if (!Array.isArray(object.stickers))
                        throw TypeError(".v388.protobuf.LoadGhostBattleInfoResponse.stickers: array expected");
                    message.stickers = [];
                    for (let i = 0; i < object.stickers.length; ++i) {
                        if (typeof object.stickers[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGhostBattleInfoResponse.stickers: object expected");
                        message.stickers[i] = $root.v388.protobuf.TeamSticker.fromObject(object.stickers[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {v388.protobuf.LoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.friendCars = [];
                    object.stickers = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.defaultOpponent = null;
                    object.hasRevenges = false;
                    object.hasHistory = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.friendCars && message.friendCars.length) {
                    object.friendCars = [];
                    for (let j = 0; j < message.friendCars.length; ++j)
                        object.friendCars[j] = $root.v388.protobuf.FriendCar.toObject(message.friendCars[j], options);
                }
                if (message.defaultOpponent != null && message.hasOwnProperty("defaultOpponent"))
                    object.defaultOpponent = $root.v388.protobuf.GhostCar.toObject(message.defaultOpponent, options);
                if (message.hasRevenges != null && message.hasOwnProperty("hasRevenges"))
                    object.hasRevenges = message.hasRevenges;
                if (message.hasHistory != null && message.hasOwnProperty("hasHistory"))
                    object.hasHistory = message.hasHistory;
                if (message.stickers && message.stickers.length) {
                    object.stickers = [];
                    for (let j = 0; j < message.stickers.length; ++j)
                        object.stickers[j] = $root.v388.protobuf.TeamSticker.toObject(message.stickers[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostBattleInfoResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleInfoResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostBattleInfoResponse";
            };

            return LoadGhostBattleInfoResponse;
        })();

        protobuf.LoadGhostCompetitionInfoRequest = (function() {

            /**
             * Properties of a LoadGhostCompetitionInfoRequest.
             * @memberof v388.protobuf
             * @interface ILoadGhostCompetitionInfoRequest
             * @property {number} carId LoadGhostCompetitionInfoRequest carId
             * @property {number} competitionId LoadGhostCompetitionInfoRequest competitionId
             */

            /**
             * Constructs a new LoadGhostCompetitionInfoRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostCompetitionInfoRequest.
             * @implements ILoadGhostCompetitionInfoRequest
             * @constructor
             * @param {v388.protobuf.ILoadGhostCompetitionInfoRequest=} [properties] Properties to set
             */
            function LoadGhostCompetitionInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionInfoRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             */
            LoadGhostCompetitionInfoRequest.prototype.carId = 0;

            /**
             * LoadGhostCompetitionInfoRequest competitionId.
             * @member {number} competitionId
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             */
            LoadGhostCompetitionInfoRequest.prototype.competitionId = 0;

            /**
             * Creates a new LoadGhostCompetitionInfoRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest instance
             */
            LoadGhostCompetitionInfoRequest.create = function create(properties) {
                return new LoadGhostCompetitionInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoRequest message. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.competitionId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostCompetitionInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionInfoRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             */
            LoadGhostCompetitionInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostCompetitionInfoRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostCompetitionInfoRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {v388.protobuf.LoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.competitionId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionInfoRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionInfoRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostCompetitionInfoRequest";
            };

            return LoadGhostCompetitionInfoRequest;
        })();

        protobuf.LoadGhostCompetitionInfoResponse = (function() {

            /**
             * Properties of a LoadGhostCompetitionInfoResponse.
             * @memberof v388.protobuf
             * @interface ILoadGhostCompetitionInfoResponse
             * @property {v388.protobuf.ErrorCode} error LoadGhostCompetitionInfoResponse error
             * @property {number|null} [periodId] LoadGhostCompetitionInfoResponse periodId
             * @property {boolean} closed LoadGhostCompetitionInfoResponse closed
             * @property {number|null} [brakingPoint] LoadGhostCompetitionInfoResponse brakingPoint
             * @property {boolean|null} [qualified] LoadGhostCompetitionInfoResponse qualified
             * @property {Array.<number>|null} [topResults] LoadGhostCompetitionInfoResponse topResults
             * @property {number|null} [result] LoadGhostCompetitionInfoResponse result
             * @property {number|null} [rank] LoadGhostCompetitionInfoResponse rank
             * @property {Array.<number>|null} [parameters1] LoadGhostCompetitionInfoResponse parameters1
             * @property {boolean|null} [parameters2] LoadGhostCompetitionInfoResponse parameters2
             */

            /**
             * Constructs a new LoadGhostCompetitionInfoResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostCompetitionInfoResponse.
             * @implements ILoadGhostCompetitionInfoResponse
             * @constructor
             * @param {v388.protobuf.ILoadGhostCompetitionInfoResponse=} [properties] Properties to set
             */
            function LoadGhostCompetitionInfoResponse(properties) {
                this.topResults = [];
                this.parameters1 = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionInfoResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.error = 0;

            /**
             * LoadGhostCompetitionInfoResponse periodId.
             * @member {number} periodId
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.periodId = 0;

            /**
             * LoadGhostCompetitionInfoResponse closed.
             * @member {boolean} closed
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.closed = false;

            /**
             * LoadGhostCompetitionInfoResponse brakingPoint.
             * @member {number} brakingPoint
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.brakingPoint = 0;

            /**
             * LoadGhostCompetitionInfoResponse qualified.
             * @member {boolean} qualified
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.qualified = false;

            /**
             * LoadGhostCompetitionInfoResponse topResults.
             * @member {Array.<number>} topResults
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.topResults = $util.emptyArray;

            /**
             * LoadGhostCompetitionInfoResponse result.
             * @member {number} result
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.result = 0;

            /**
             * LoadGhostCompetitionInfoResponse rank.
             * @member {number} rank
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.rank = 0;

            /**
             * LoadGhostCompetitionInfoResponse parameters1.
             * @member {Array.<number>} parameters1
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.parameters1 = $util.emptyArray;

            /**
             * LoadGhostCompetitionInfoResponse parameters2.
             * @member {boolean} parameters2
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.parameters2 = false;

            /**
             * Creates a new LoadGhostCompetitionInfoResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse instance
             */
            LoadGhostCompetitionInfoResponse.create = function create(properties) {
                return new LoadGhostCompetitionInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoResponse message. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.periodId);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.closed);
                if (message.brakingPoint != null && Object.hasOwnProperty.call(message, "brakingPoint"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.brakingPoint);
                if (message.qualified != null && Object.hasOwnProperty.call(message, "qualified"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.qualified);
                if (message.topResults != null && message.topResults.length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message.topResults.length; ++i)
                        writer.sint32(message.topResults[i]);
                    writer.ldelim();
                }
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 7, wireType 0 =*/56).sint32(message.result);
                if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rank);
                if (message.parameters1 != null && message.parameters1.length)
                    for (let i = 0; i < message.parameters1.length; ++i)
                        writer.uint32(/* id 9, wireType 5 =*/77).float(message.parameters1[i]);
                if (message.parameters2 != null && Object.hasOwnProperty.call(message, "parameters2"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.parameters2);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostCompetitionInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.periodId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.closed = reader.bool();
                            break;
                        }
                    case 4: {
                            message.brakingPoint = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.qualified = reader.bool();
                            break;
                        }
                    case 6: {
                            if (!(message.topResults && message.topResults.length))
                                message.topResults = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.topResults.push(reader.sint32());
                            } else
                                message.topResults.push(reader.sint32());
                            break;
                        }
                    case 7: {
                            message.result = reader.sint32();
                            break;
                        }
                    case 8: {
                            message.rank = reader.uint32();
                            break;
                        }
                    case 9: {
                            if (!(message.parameters1 && message.parameters1.length))
                                message.parameters1 = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.parameters1.push(reader.float());
                            } else
                                message.parameters1.push(reader.float());
                            break;
                        }
                    case 10: {
                            message.parameters2 = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("closed"))
                    throw $util.ProtocolError("missing required 'closed'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionInfoResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    if (!$util.isInteger(message.periodId))
                        return "periodId: integer expected";
                if (typeof message.closed !== "boolean")
                    return "closed: boolean expected";
                if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                    if (!$util.isInteger(message.brakingPoint))
                        return "brakingPoint: integer expected";
                if (message.qualified != null && message.hasOwnProperty("qualified"))
                    if (typeof message.qualified !== "boolean")
                        return "qualified: boolean expected";
                if (message.topResults != null && message.hasOwnProperty("topResults")) {
                    if (!Array.isArray(message.topResults))
                        return "topResults: array expected";
                    for (let i = 0; i < message.topResults.length; ++i)
                        if (!$util.isInteger(message.topResults[i]))
                            return "topResults: integer[] expected";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                if (message.rank != null && message.hasOwnProperty("rank"))
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                if (message.parameters1 != null && message.hasOwnProperty("parameters1")) {
                    if (!Array.isArray(message.parameters1))
                        return "parameters1: array expected";
                    for (let i = 0; i < message.parameters1.length; ++i)
                        if (typeof message.parameters1[i] !== "number")
                            return "parameters1: number[] expected";
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    if (typeof message.parameters2 !== "boolean")
                        return "parameters2: boolean expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             */
            LoadGhostCompetitionInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostCompetitionInfoResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostCompetitionInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.periodId != null)
                    message.periodId = object.periodId >>> 0;
                if (object.closed != null)
                    message.closed = Boolean(object.closed);
                if (object.brakingPoint != null)
                    message.brakingPoint = object.brakingPoint >>> 0;
                if (object.qualified != null)
                    message.qualified = Boolean(object.qualified);
                if (object.topResults) {
                    if (!Array.isArray(object.topResults))
                        throw TypeError(".v388.protobuf.LoadGhostCompetitionInfoResponse.topResults: array expected");
                    message.topResults = [];
                    for (let i = 0; i < object.topResults.length; ++i)
                        message.topResults[i] = object.topResults[i] | 0;
                }
                if (object.result != null)
                    message.result = object.result | 0;
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                if (object.parameters1) {
                    if (!Array.isArray(object.parameters1))
                        throw TypeError(".v388.protobuf.LoadGhostCompetitionInfoResponse.parameters1: array expected");
                    message.parameters1 = [];
                    for (let i = 0; i < object.parameters1.length; ++i)
                        message.parameters1[i] = Number(object.parameters1[i]);
                }
                if (object.parameters2 != null)
                    message.parameters2 = Boolean(object.parameters2);
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {v388.protobuf.LoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.topResults = [];
                    object.parameters1 = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.periodId = 0;
                    object.closed = false;
                    object.brakingPoint = 0;
                    object.qualified = false;
                    object.result = 0;
                    object.rank = 0;
                    object.parameters2 = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    object.periodId = message.periodId;
                if (message.closed != null && message.hasOwnProperty("closed"))
                    object.closed = message.closed;
                if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                    object.brakingPoint = message.brakingPoint;
                if (message.qualified != null && message.hasOwnProperty("qualified"))
                    object.qualified = message.qualified;
                if (message.topResults && message.topResults.length) {
                    object.topResults = [];
                    for (let j = 0; j < message.topResults.length; ++j)
                        object.topResults[j] = message.topResults[j];
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = message.result;
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                if (message.parameters1 && message.parameters1.length) {
                    object.parameters1 = [];
                    for (let j = 0; j < message.parameters1.length; ++j)
                        object.parameters1[j] = options.json && !isFinite(message.parameters1[j]) ? String(message.parameters1[j]) : message.parameters1[j];
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    object.parameters2 = message.parameters2;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionInfoResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionInfoResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostCompetitionInfoResponse";
            };

            return LoadGhostCompetitionInfoResponse;
        })();

        protobuf.LoadTimeAttackRecordRequest = (function() {

            /**
             * Properties of a LoadTimeAttackRecordRequest.
             * @memberof v388.protobuf
             * @interface ILoadTimeAttackRecordRequest
             * @property {number|null} [carId] LoadTimeAttackRecordRequest carId
             * @property {number} model LoadTimeAttackRecordRequest model
             * @property {number} course LoadTimeAttackRecordRequest course
             */

            /**
             * Constructs a new LoadTimeAttackRecordRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTimeAttackRecordRequest.
             * @implements ILoadTimeAttackRecordRequest
             * @constructor
             * @param {v388.protobuf.ILoadTimeAttackRecordRequest=} [properties] Properties to set
             */
            function LoadTimeAttackRecordRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTimeAttackRecordRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.carId = 0;

            /**
             * LoadTimeAttackRecordRequest model.
             * @member {number} model
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.model = 0;

            /**
             * LoadTimeAttackRecordRequest course.
             * @member {number} course
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.course = 0;

            /**
             * Creates a new LoadTimeAttackRecordRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest instance
             */
            LoadTimeAttackRecordRequest.create = function create(properties) {
                return new LoadTimeAttackRecordRequest(properties);
            };

            /**
             * Encodes the specified LoadTimeAttackRecordRequest message. Does not implicitly {@link v388.protobuf.LoadTimeAttackRecordRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.model);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.course);
                return writer;
            };

            /**
             * Encodes the specified LoadTimeAttackRecordRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadTimeAttackRecordRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTimeAttackRecordRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTimeAttackRecordRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.model = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.course = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("model"))
                    throw $util.ProtocolError("missing required 'model'", { instance: message });
                if (!message.hasOwnProperty("course"))
                    throw $util.ProtocolError("missing required 'course'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTimeAttackRecordRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTimeAttackRecordRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTimeAttackRecordRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (!$util.isInteger(message.model))
                    return "model: integer expected";
                if (!$util.isInteger(message.course))
                    return "course: integer expected";
                return null;
            };

            /**
             * Creates a LoadTimeAttackRecordRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             */
            LoadTimeAttackRecordRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTimeAttackRecordRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadTimeAttackRecordRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.model != null)
                    message.model = object.model >>> 0;
                if (object.course != null)
                    message.course = object.course >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTimeAttackRecordRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {v388.protobuf.LoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTimeAttackRecordRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.model = 0;
                    object.course = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.course != null && message.hasOwnProperty("course"))
                    object.course = message.course;
                return object;
            };

            /**
             * Converts this LoadTimeAttackRecordRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTimeAttackRecordRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTimeAttackRecordRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTimeAttackRecordRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTimeAttackRecordRequest";
            };

            return LoadTimeAttackRecordRequest;
        })();

        protobuf.LoadTimeAttackRecordResponse = (function() {

            /**
             * Properties of a LoadTimeAttackRecordResponse.
             * @memberof v388.protobuf
             * @interface ILoadTimeAttackRecordResponse
             * @property {v388.protobuf.ErrorCode} error LoadTimeAttackRecordResponse error
             * @property {Array.<number>|null} [wholeRanking] LoadTimeAttackRecordResponse wholeRanking
             * @property {Array.<number>|null} [modelRanking] LoadTimeAttackRecordResponse modelRanking
             * @property {number|null} [personalBestTime] LoadTimeAttackRecordResponse personalBestTime
             * @property {number|null} [pbSection_1Time] LoadTimeAttackRecordResponse pbSection_1Time
             * @property {number|null} [pbSection_2Time] LoadTimeAttackRecordResponse pbSection_2Time
             * @property {number|null} [pbSection_3Time] LoadTimeAttackRecordResponse pbSection_3Time
             * @property {number|null} [pbSection_4Time] LoadTimeAttackRecordResponse pbSection_4Time
             * @property {number|null} [pbSection_5Time] LoadTimeAttackRecordResponse pbSection_5Time
             * @property {number|null} [pbSection_6Time] LoadTimeAttackRecordResponse pbSection_6Time
             * @property {number|null} [pbSection_7Time] LoadTimeAttackRecordResponse pbSection_7Time
             */

            /**
             * Constructs a new LoadTimeAttackRecordResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTimeAttackRecordResponse.
             * @implements ILoadTimeAttackRecordResponse
             * @constructor
             * @param {v388.protobuf.ILoadTimeAttackRecordResponse=} [properties] Properties to set
             */
            function LoadTimeAttackRecordResponse(properties) {
                this.wholeRanking = [];
                this.modelRanking = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTimeAttackRecordResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.error = 0;

            /**
             * LoadTimeAttackRecordResponse wholeRanking.
             * @member {Array.<number>} wholeRanking
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.wholeRanking = $util.emptyArray;

            /**
             * LoadTimeAttackRecordResponse modelRanking.
             * @member {Array.<number>} modelRanking
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.modelRanking = $util.emptyArray;

            /**
             * LoadTimeAttackRecordResponse personalBestTime.
             * @member {number} personalBestTime
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.personalBestTime = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_1Time.
             * @member {number} pbSection_1Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_1Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_2Time.
             * @member {number} pbSection_2Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_2Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_3Time.
             * @member {number} pbSection_3Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_3Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_4Time.
             * @member {number} pbSection_4Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_4Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_5Time.
             * @member {number} pbSection_5Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_5Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_6Time.
             * @member {number} pbSection_6Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_6Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_7Time.
             * @member {number} pbSection_7Time
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_7Time = 0;

            /**
             * Creates a new LoadTimeAttackRecordResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse instance
             */
            LoadTimeAttackRecordResponse.create = function create(properties) {
                return new LoadTimeAttackRecordResponse(properties);
            };

            /**
             * Encodes the specified LoadTimeAttackRecordResponse message. Does not implicitly {@link v388.protobuf.LoadTimeAttackRecordResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.wholeRanking != null && message.wholeRanking.length) {
                    writer.uint32(/* id 2, wireType 2 =*/18).fork();
                    for (let i = 0; i < message.wholeRanking.length; ++i)
                        writer.uint32(message.wholeRanking[i]);
                    writer.ldelim();
                }
                if (message.modelRanking != null && message.modelRanking.length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (let i = 0; i < message.modelRanking.length; ++i)
                        writer.uint32(message.modelRanking[i]);
                    writer.ldelim();
                }
                if (message.personalBestTime != null && Object.hasOwnProperty.call(message, "personalBestTime"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.personalBestTime);
                if (message.pbSection_1Time != null && Object.hasOwnProperty.call(message, "pbSection_1Time"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pbSection_1Time);
                if (message.pbSection_2Time != null && Object.hasOwnProperty.call(message, "pbSection_2Time"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.pbSection_2Time);
                if (message.pbSection_3Time != null && Object.hasOwnProperty.call(message, "pbSection_3Time"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.pbSection_3Time);
                if (message.pbSection_4Time != null && Object.hasOwnProperty.call(message, "pbSection_4Time"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.pbSection_4Time);
                if (message.pbSection_5Time != null && Object.hasOwnProperty.call(message, "pbSection_5Time"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.pbSection_5Time);
                if (message.pbSection_6Time != null && Object.hasOwnProperty.call(message, "pbSection_6Time"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.pbSection_6Time);
                if (message.pbSection_7Time != null && Object.hasOwnProperty.call(message, "pbSection_7Time"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.pbSection_7Time);
                return writer;
            };

            /**
             * Encodes the specified LoadTimeAttackRecordResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadTimeAttackRecordResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {v388.protobuf.ILoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTimeAttackRecordResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTimeAttackRecordResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.wholeRanking && message.wholeRanking.length))
                                message.wholeRanking = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.wholeRanking.push(reader.uint32());
                            } else
                                message.wholeRanking.push(reader.uint32());
                            break;
                        }
                    case 3: {
                            if (!(message.modelRanking && message.modelRanking.length))
                                message.modelRanking = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.modelRanking.push(reader.uint32());
                            } else
                                message.modelRanking.push(reader.uint32());
                            break;
                        }
                    case 4: {
                            message.personalBestTime = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.pbSection_1Time = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.pbSection_2Time = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.pbSection_3Time = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.pbSection_4Time = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.pbSection_5Time = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.pbSection_6Time = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.pbSection_7Time = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTimeAttackRecordResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTimeAttackRecordResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTimeAttackRecordResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.wholeRanking != null && message.hasOwnProperty("wholeRanking")) {
                    if (!Array.isArray(message.wholeRanking))
                        return "wholeRanking: array expected";
                    for (let i = 0; i < message.wholeRanking.length; ++i)
                        if (!$util.isInteger(message.wholeRanking[i]))
                            return "wholeRanking: integer[] expected";
                }
                if (message.modelRanking != null && message.hasOwnProperty("modelRanking")) {
                    if (!Array.isArray(message.modelRanking))
                        return "modelRanking: array expected";
                    for (let i = 0; i < message.modelRanking.length; ++i)
                        if (!$util.isInteger(message.modelRanking[i]))
                            return "modelRanking: integer[] expected";
                }
                if (message.personalBestTime != null && message.hasOwnProperty("personalBestTime"))
                    if (!$util.isInteger(message.personalBestTime))
                        return "personalBestTime: integer expected";
                if (message.pbSection_1Time != null && message.hasOwnProperty("pbSection_1Time"))
                    if (!$util.isInteger(message.pbSection_1Time))
                        return "pbSection_1Time: integer expected";
                if (message.pbSection_2Time != null && message.hasOwnProperty("pbSection_2Time"))
                    if (!$util.isInteger(message.pbSection_2Time))
                        return "pbSection_2Time: integer expected";
                if (message.pbSection_3Time != null && message.hasOwnProperty("pbSection_3Time"))
                    if (!$util.isInteger(message.pbSection_3Time))
                        return "pbSection_3Time: integer expected";
                if (message.pbSection_4Time != null && message.hasOwnProperty("pbSection_4Time"))
                    if (!$util.isInteger(message.pbSection_4Time))
                        return "pbSection_4Time: integer expected";
                if (message.pbSection_5Time != null && message.hasOwnProperty("pbSection_5Time"))
                    if (!$util.isInteger(message.pbSection_5Time))
                        return "pbSection_5Time: integer expected";
                if (message.pbSection_6Time != null && message.hasOwnProperty("pbSection_6Time"))
                    if (!$util.isInteger(message.pbSection_6Time))
                        return "pbSection_6Time: integer expected";
                if (message.pbSection_7Time != null && message.hasOwnProperty("pbSection_7Time"))
                    if (!$util.isInteger(message.pbSection_7Time))
                        return "pbSection_7Time: integer expected";
                return null;
            };

            /**
             * Creates a LoadTimeAttackRecordResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             */
            LoadTimeAttackRecordResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTimeAttackRecordResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadTimeAttackRecordResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.wholeRanking) {
                    if (!Array.isArray(object.wholeRanking))
                        throw TypeError(".v388.protobuf.LoadTimeAttackRecordResponse.wholeRanking: array expected");
                    message.wholeRanking = [];
                    for (let i = 0; i < object.wholeRanking.length; ++i)
                        message.wholeRanking[i] = object.wholeRanking[i] >>> 0;
                }
                if (object.modelRanking) {
                    if (!Array.isArray(object.modelRanking))
                        throw TypeError(".v388.protobuf.LoadTimeAttackRecordResponse.modelRanking: array expected");
                    message.modelRanking = [];
                    for (let i = 0; i < object.modelRanking.length; ++i)
                        message.modelRanking[i] = object.modelRanking[i] >>> 0;
                }
                if (object.personalBestTime != null)
                    message.personalBestTime = object.personalBestTime >>> 0;
                if (object.pbSection_1Time != null)
                    message.pbSection_1Time = object.pbSection_1Time >>> 0;
                if (object.pbSection_2Time != null)
                    message.pbSection_2Time = object.pbSection_2Time >>> 0;
                if (object.pbSection_3Time != null)
                    message.pbSection_3Time = object.pbSection_3Time >>> 0;
                if (object.pbSection_4Time != null)
                    message.pbSection_4Time = object.pbSection_4Time >>> 0;
                if (object.pbSection_5Time != null)
                    message.pbSection_5Time = object.pbSection_5Time >>> 0;
                if (object.pbSection_6Time != null)
                    message.pbSection_6Time = object.pbSection_6Time >>> 0;
                if (object.pbSection_7Time != null)
                    message.pbSection_7Time = object.pbSection_7Time >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTimeAttackRecordResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {v388.protobuf.LoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTimeAttackRecordResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.wholeRanking = [];
                    object.modelRanking = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.personalBestTime = 0;
                    object.pbSection_1Time = 0;
                    object.pbSection_2Time = 0;
                    object.pbSection_3Time = 0;
                    object.pbSection_4Time = 0;
                    object.pbSection_5Time = 0;
                    object.pbSection_6Time = 0;
                    object.pbSection_7Time = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.wholeRanking && message.wholeRanking.length) {
                    object.wholeRanking = [];
                    for (let j = 0; j < message.wholeRanking.length; ++j)
                        object.wholeRanking[j] = message.wholeRanking[j];
                }
                if (message.modelRanking && message.modelRanking.length) {
                    object.modelRanking = [];
                    for (let j = 0; j < message.modelRanking.length; ++j)
                        object.modelRanking[j] = message.modelRanking[j];
                }
                if (message.personalBestTime != null && message.hasOwnProperty("personalBestTime"))
                    object.personalBestTime = message.personalBestTime;
                if (message.pbSection_1Time != null && message.hasOwnProperty("pbSection_1Time"))
                    object.pbSection_1Time = message.pbSection_1Time;
                if (message.pbSection_2Time != null && message.hasOwnProperty("pbSection_2Time"))
                    object.pbSection_2Time = message.pbSection_2Time;
                if (message.pbSection_3Time != null && message.hasOwnProperty("pbSection_3Time"))
                    object.pbSection_3Time = message.pbSection_3Time;
                if (message.pbSection_4Time != null && message.hasOwnProperty("pbSection_4Time"))
                    object.pbSection_4Time = message.pbSection_4Time;
                if (message.pbSection_5Time != null && message.hasOwnProperty("pbSection_5Time"))
                    object.pbSection_5Time = message.pbSection_5Time;
                if (message.pbSection_6Time != null && message.hasOwnProperty("pbSection_6Time"))
                    object.pbSection_6Time = message.pbSection_6Time;
                if (message.pbSection_7Time != null && message.hasOwnProperty("pbSection_7Time"))
                    object.pbSection_7Time = message.pbSection_7Time;
                return object;
            };

            /**
             * Converts this LoadTimeAttackRecordResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTimeAttackRecordResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTimeAttackRecordResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTimeAttackRecordResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTimeAttackRecordResponse";
            };

            return LoadTimeAttackRecordResponse;
        })();

        protobuf.SaveTerminalResultRequest = (function() {

            /**
             * Properties of a SaveTerminalResultRequest.
             * @memberof v388.protobuf
             * @interface ISaveTerminalResultRequest
             * @property {number} userId SaveTerminalResultRequest userId
             * @property {number} timestamp SaveTerminalResultRequest timestamp
             * @property {Array.<number>|null} [carOrder] SaveTerminalResultRequest carOrder
             * @property {number|null} [teamCarId] SaveTerminalResultRequest teamCarId
             * @property {number|null} [tutorials] SaveTerminalResultRequest tutorials
             * @property {boolean|null} [teamNoticesConfirmed] SaveTerminalResultRequest teamNoticesConfirmed
             */

            /**
             * Constructs a new SaveTerminalResultRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveTerminalResultRequest.
             * @implements ISaveTerminalResultRequest
             * @constructor
             * @param {v388.protobuf.ISaveTerminalResultRequest=} [properties] Properties to set
             */
            function SaveTerminalResultRequest(properties) {
                this.carOrder = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveTerminalResultRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.userId = 0;

            /**
             * SaveTerminalResultRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.timestamp = 0;

            /**
             * SaveTerminalResultRequest carOrder.
             * @member {Array.<number>} carOrder
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.carOrder = $util.emptyArray;

            /**
             * SaveTerminalResultRequest teamCarId.
             * @member {number} teamCarId
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.teamCarId = 0;

            /**
             * SaveTerminalResultRequest tutorials.
             * @member {number} tutorials
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.tutorials = 0;

            /**
             * SaveTerminalResultRequest teamNoticesConfirmed.
             * @member {boolean} teamNoticesConfirmed
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.teamNoticesConfirmed = false;

            /**
             * Creates a new SaveTerminalResultRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {v388.protobuf.ISaveTerminalResultRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest instance
             */
            SaveTerminalResultRequest.create = function create(properties) {
                return new SaveTerminalResultRequest(properties);
            };

            /**
             * Encodes the specified SaveTerminalResultRequest message. Does not implicitly {@link v388.protobuf.SaveTerminalResultRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {v388.protobuf.ISaveTerminalResultRequest} message SaveTerminalResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);
                if (message.carOrder != null && message.carOrder.length)
                    for (let i = 0; i < message.carOrder.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carOrder[i]);
                if (message.teamCarId != null && Object.hasOwnProperty.call(message, "teamCarId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.teamCarId);
                if (message.tutorials != null && Object.hasOwnProperty.call(message, "tutorials"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tutorials);
                if (message.teamNoticesConfirmed != null && Object.hasOwnProperty.call(message, "teamNoticesConfirmed"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.teamNoticesConfirmed);
                return writer;
            };

            /**
             * Encodes the specified SaveTerminalResultRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveTerminalResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {v388.protobuf.ISaveTerminalResultRequest} message SaveTerminalResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveTerminalResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveTerminalResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 3: {
                            if (!(message.carOrder && message.carOrder.length))
                                message.carOrder = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.carOrder.push(reader.uint32());
                            } else
                                message.carOrder.push(reader.uint32());
                            break;
                        }
                    case 4: {
                            message.teamCarId = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.tutorials = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.teamNoticesConfirmed = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveTerminalResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveTerminalResultRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveTerminalResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (message.carOrder != null && message.hasOwnProperty("carOrder")) {
                    if (!Array.isArray(message.carOrder))
                        return "carOrder: array expected";
                    for (let i = 0; i < message.carOrder.length; ++i)
                        if (!$util.isInteger(message.carOrder[i]))
                            return "carOrder: integer[] expected";
                }
                if (message.teamCarId != null && message.hasOwnProperty("teamCarId"))
                    if (!$util.isInteger(message.teamCarId))
                        return "teamCarId: integer expected";
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    if (!$util.isInteger(message.tutorials))
                        return "tutorials: integer expected";
                if (message.teamNoticesConfirmed != null && message.hasOwnProperty("teamNoticesConfirmed"))
                    if (typeof message.teamNoticesConfirmed !== "boolean")
                        return "teamNoticesConfirmed: boolean expected";
                return null;
            };

            /**
             * Creates a SaveTerminalResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             */
            SaveTerminalResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveTerminalResultRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveTerminalResultRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.carOrder) {
                    if (!Array.isArray(object.carOrder))
                        throw TypeError(".v388.protobuf.SaveTerminalResultRequest.carOrder: array expected");
                    message.carOrder = [];
                    for (let i = 0; i < object.carOrder.length; ++i)
                        message.carOrder[i] = object.carOrder[i] >>> 0;
                }
                if (object.teamCarId != null)
                    message.teamCarId = object.teamCarId >>> 0;
                if (object.tutorials != null)
                    message.tutorials = object.tutorials >>> 0;
                if (object.teamNoticesConfirmed != null)
                    message.teamNoticesConfirmed = Boolean(object.teamNoticesConfirmed);
                return message;
            };

            /**
             * Creates a plain object from a SaveTerminalResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {v388.protobuf.SaveTerminalResultRequest} message SaveTerminalResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveTerminalResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.carOrder = [];
                if (options.defaults) {
                    object.userId = 0;
                    object.timestamp = 0;
                    object.teamCarId = 0;
                    object.tutorials = 0;
                    object.teamNoticesConfirmed = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.carOrder && message.carOrder.length) {
                    object.carOrder = [];
                    for (let j = 0; j < message.carOrder.length; ++j)
                        object.carOrder[j] = message.carOrder[j];
                }
                if (message.teamCarId != null && message.hasOwnProperty("teamCarId"))
                    object.teamCarId = message.teamCarId;
                if (message.tutorials != null && message.hasOwnProperty("tutorials"))
                    object.tutorials = message.tutorials;
                if (message.teamNoticesConfirmed != null && message.hasOwnProperty("teamNoticesConfirmed"))
                    object.teamNoticesConfirmed = message.teamNoticesConfirmed;
                return object;
            };

            /**
             * Converts this SaveTerminalResultRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveTerminalResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveTerminalResultRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveTerminalResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveTerminalResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveTerminalResultRequest";
            };

            return SaveTerminalResultRequest;
        })();

        protobuf.SaveTerminalResultResponse = (function() {

            /**
             * Properties of a SaveTerminalResultResponse.
             * @memberof v388.protobuf
             * @interface ISaveTerminalResultResponse
             * @property {v388.protobuf.ErrorCode} error SaveTerminalResultResponse error
             */

            /**
             * Constructs a new SaveTerminalResultResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveTerminalResultResponse.
             * @implements ISaveTerminalResultResponse
             * @constructor
             * @param {v388.protobuf.ISaveTerminalResultResponse=} [properties] Properties to set
             */
            function SaveTerminalResultResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveTerminalResultResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @instance
             */
            SaveTerminalResultResponse.prototype.error = 0;

            /**
             * Creates a new SaveTerminalResultResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {v388.protobuf.ISaveTerminalResultResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse instance
             */
            SaveTerminalResultResponse.create = function create(properties) {
                return new SaveTerminalResultResponse(properties);
            };

            /**
             * Encodes the specified SaveTerminalResultResponse message. Does not implicitly {@link v388.protobuf.SaveTerminalResultResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {v388.protobuf.ISaveTerminalResultResponse} message SaveTerminalResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveTerminalResultResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveTerminalResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {v388.protobuf.ISaveTerminalResultResponse} message SaveTerminalResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveTerminalResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveTerminalResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveTerminalResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveTerminalResultResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveTerminalResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveTerminalResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             */
            SaveTerminalResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveTerminalResultResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveTerminalResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveTerminalResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {v388.protobuf.SaveTerminalResultResponse} message SaveTerminalResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveTerminalResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveTerminalResultResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveTerminalResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveTerminalResultResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveTerminalResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveTerminalResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveTerminalResultResponse";
            };

            return SaveTerminalResultResponse;
        })();

        protobuf.PingRequest = (function() {

            /**
             * Properties of a PingRequest.
             * @memberof v388.protobuf
             * @interface IPingRequest
             * @property {number|null} [ping] PingRequest ping
             */

            /**
             * Constructs a new PingRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a PingRequest.
             * @implements IPingRequest
             * @constructor
             * @param {v388.protobuf.IPingRequest=} [properties] Properties to set
             */
            function PingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PingRequest ping.
             * @member {number} ping
             * @memberof v388.protobuf.PingRequest
             * @instance
             */
            PingRequest.prototype.ping = 0;

            /**
             * Creates a new PingRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {v388.protobuf.IPingRequest=} [properties] Properties to set
             * @returns {v388.protobuf.PingRequest} PingRequest instance
             */
            PingRequest.create = function create(properties) {
                return new PingRequest(properties);
            };

            /**
             * Encodes the specified PingRequest message. Does not implicitly {@link v388.protobuf.PingRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {v388.protobuf.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ping != null && Object.hasOwnProperty.call(message, "ping"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ping);
                return writer;
            };

            /**
             * Encodes the specified PingRequest message, length delimited. Does not implicitly {@link v388.protobuf.PingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {v388.protobuf.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ping = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingRequest message.
             * @function verify
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ping != null && message.hasOwnProperty("ping"))
                    if (!$util.isInteger(message.ping))
                        return "ping: integer expected";
                return null;
            };

            /**
             * Creates a PingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PingRequest} PingRequest
             */
            PingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PingRequest)
                    return object;
                let message = new $root.v388.protobuf.PingRequest();
                if (object.ping != null)
                    message.ping = object.ping >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {v388.protobuf.PingRequest} message PingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.ping = 0;
                if (message.ping != null && message.hasOwnProperty("ping"))
                    object.ping = message.ping;
                return object;
            };

            /**
             * Converts this PingRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PingRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.PingRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PingRequest";
            };

            return PingRequest;
        })();

        protobuf.PingResponse = (function() {

            /**
             * Properties of a PingResponse.
             * @memberof v388.protobuf
             * @interface IPingResponse
             * @property {v388.protobuf.ErrorCode} error PingResponse error
             * @property {number} pong PingResponse pong
             */

            /**
             * Constructs a new PingResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a PingResponse.
             * @implements IPingResponse
             * @constructor
             * @param {v388.protobuf.IPingResponse=} [properties] Properties to set
             */
            function PingResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PingResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.PingResponse
             * @instance
             */
            PingResponse.prototype.error = 0;

            /**
             * PingResponse pong.
             * @member {number} pong
             * @memberof v388.protobuf.PingResponse
             * @instance
             */
            PingResponse.prototype.pong = 0;

            /**
             * Creates a new PingResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {v388.protobuf.IPingResponse=} [properties] Properties to set
             * @returns {v388.protobuf.PingResponse} PingResponse instance
             */
            PingResponse.create = function create(properties) {
                return new PingResponse(properties);
            };

            /**
             * Encodes the specified PingResponse message. Does not implicitly {@link v388.protobuf.PingResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {v388.protobuf.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pong);
                return writer;
            };

            /**
             * Encodes the specified PingResponse message, length delimited. Does not implicitly {@link v388.protobuf.PingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {v388.protobuf.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.pong = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("pong"))
                    throw $util.ProtocolError("missing required 'pong'", { instance: message });
                return message;
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingResponse message.
             * @function verify
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.pong))
                    return "pong: integer expected";
                return null;
            };

            /**
             * Creates a PingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PingResponse} PingResponse
             */
            PingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PingResponse)
                    return object;
                let message = new $root.v388.protobuf.PingResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.pong != null)
                    message.pong = object.pong >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {v388.protobuf.PingResponse} message PingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.pong = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.pong != null && message.hasOwnProperty("pong"))
                    object.pong = message.pong;
                return object;
            };

            /**
             * Converts this PingResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PingResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.PingResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PingResponse";
            };

            return PingResponse;
        })();

        protobuf.LoadTeamInformationRequest = (function() {

            /**
             * Properties of a LoadTeamInformationRequest.
             * @memberof v388.protobuf
             * @interface ILoadTeamInformationRequest
             * @property {number} userId LoadTeamInformationRequest userId
             */

            /**
             * Constructs a new LoadTeamInformationRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamInformationRequest.
             * @implements ILoadTeamInformationRequest
             * @constructor
             * @param {v388.protobuf.ILoadTeamInformationRequest=} [properties] Properties to set
             */
            function LoadTeamInformationRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamInformationRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @instance
             */
            LoadTeamInformationRequest.prototype.userId = 0;

            /**
             * Creates a new LoadTeamInformationRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {v388.protobuf.ILoadTeamInformationRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamInformationRequest} LoadTeamInformationRequest instance
             */
            LoadTeamInformationRequest.create = function create(properties) {
                return new LoadTeamInformationRequest(properties);
            };

            /**
             * Encodes the specified LoadTeamInformationRequest message. Does not implicitly {@link v388.protobuf.LoadTeamInformationRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {v388.protobuf.ILoadTeamInformationRequest} message LoadTeamInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamInformationRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadTeamInformationRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamInformationRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {v388.protobuf.ILoadTeamInformationRequest} message LoadTeamInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamInformationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamInformationRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamInformationRequest} LoadTeamInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamInformationRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamInformationRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamInformationRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamInformationRequest} LoadTeamInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamInformationRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamInformationRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamInformationRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadTeamInformationRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamInformationRequest} LoadTeamInformationRequest
             */
            LoadTeamInformationRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamInformationRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamInformationRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamInformationRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {v388.protobuf.LoadTeamInformationRequest} message LoadTeamInformationRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamInformationRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadTeamInformationRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamInformationRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamInformationRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamInformationRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamInformationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamInformationRequest";
            };

            return LoadTeamInformationRequest;
        })();

        protobuf.LoadTeamInformationResponse = (function() {

            /**
             * Properties of a LoadTeamInformationResponse.
             * @memberof v388.protobuf
             * @interface ILoadTeamInformationResponse
             * @property {v388.protobuf.ErrorCode} error LoadTeamInformationResponse error
             * @property {number|null} [teamCreatedAt] LoadTeamInformationResponse teamCreatedAt
             * @property {boolean|null} [applying] LoadTeamInformationResponse applying
             * @property {v388.protobuf.ITeam|null} [team] LoadTeamInformationResponse team
             * @property {Array.<v388.protobuf.LoadTeamInformationResponse.INoticeEntry>|null} [noticeEntries] LoadTeamInformationResponse noticeEntries
             * @property {Array.<v388.protobuf.LoadTeamInformationResponse.INewsEntry>|null} [newsEntries] LoadTeamInformationResponse newsEntries
             * @property {Array.<v388.protobuf.ITeamApplicant>|null} [applicants] LoadTeamInformationResponse applicants
             * @property {number|null} [teamCarId] LoadTeamInformationResponse teamCarId
             */

            /**
             * Constructs a new LoadTeamInformationResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamInformationResponse.
             * @implements ILoadTeamInformationResponse
             * @constructor
             * @param {v388.protobuf.ILoadTeamInformationResponse=} [properties] Properties to set
             */
            function LoadTeamInformationResponse(properties) {
                this.noticeEntries = [];
                this.newsEntries = [];
                this.applicants = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamInformationResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.error = 0;

            /**
             * LoadTeamInformationResponse teamCreatedAt.
             * @member {number} teamCreatedAt
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.teamCreatedAt = 0;

            /**
             * LoadTeamInformationResponse applying.
             * @member {boolean} applying
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.applying = false;

            /**
             * LoadTeamInformationResponse team.
             * @member {v388.protobuf.ITeam|null|undefined} team
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.team = null;

            /**
             * LoadTeamInformationResponse noticeEntries.
             * @member {Array.<v388.protobuf.LoadTeamInformationResponse.INoticeEntry>} noticeEntries
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.noticeEntries = $util.emptyArray;

            /**
             * LoadTeamInformationResponse newsEntries.
             * @member {Array.<v388.protobuf.LoadTeamInformationResponse.INewsEntry>} newsEntries
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.newsEntries = $util.emptyArray;

            /**
             * LoadTeamInformationResponse applicants.
             * @member {Array.<v388.protobuf.ITeamApplicant>} applicants
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.applicants = $util.emptyArray;

            /**
             * LoadTeamInformationResponse teamCarId.
             * @member {number} teamCarId
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             */
            LoadTeamInformationResponse.prototype.teamCarId = 0;

            /**
             * Creates a new LoadTeamInformationResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {v388.protobuf.ILoadTeamInformationResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamInformationResponse} LoadTeamInformationResponse instance
             */
            LoadTeamInformationResponse.create = function create(properties) {
                return new LoadTeamInformationResponse(properties);
            };

            /**
             * Encodes the specified LoadTeamInformationResponse message. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {v388.protobuf.ILoadTeamInformationResponse} message LoadTeamInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamInformationResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.teamCreatedAt != null && Object.hasOwnProperty.call(message, "teamCreatedAt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamCreatedAt);
                if (message.applying != null && Object.hasOwnProperty.call(message, "applying"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.applying);
                if (message.team != null && Object.hasOwnProperty.call(message, "team"))
                    $root.v388.protobuf.Team.encode(message.team, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.noticeEntries != null && message.noticeEntries.length)
                    for (let i = 0; i < message.noticeEntries.length; ++i)
                        $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry.encode(message.noticeEntries[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.newsEntries != null && message.newsEntries.length)
                    for (let i = 0; i < message.newsEntries.length; ++i)
                        $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry.encode(message.newsEntries[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.applicants != null && message.applicants.length)
                    for (let i = 0; i < message.applicants.length; ++i)
                        $root.v388.protobuf.TeamApplicant.encode(message.applicants[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.teamCarId != null && Object.hasOwnProperty.call(message, "teamCarId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.teamCarId);
                return writer;
            };

            /**
             * Encodes the specified LoadTeamInformationResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {v388.protobuf.ILoadTeamInformationResponse} message LoadTeamInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamInformationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamInformationResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamInformationResponse} LoadTeamInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamInformationResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamInformationResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.teamCreatedAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.applying = reader.bool();
                            break;
                        }
                    case 4: {
                            message.team = $root.v388.protobuf.Team.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            if (!(message.noticeEntries && message.noticeEntries.length))
                                message.noticeEntries = [];
                            message.noticeEntries.push($root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.newsEntries && message.newsEntries.length))
                                message.newsEntries = [];
                            message.newsEntries.push($root.v388.protobuf.LoadTeamInformationResponse.NewsEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            if (!(message.applicants && message.applicants.length))
                                message.applicants = [];
                            message.applicants.push($root.v388.protobuf.TeamApplicant.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            message.teamCarId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamInformationResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamInformationResponse} LoadTeamInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamInformationResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamInformationResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamInformationResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.teamCreatedAt != null && message.hasOwnProperty("teamCreatedAt"))
                    if (!$util.isInteger(message.teamCreatedAt))
                        return "teamCreatedAt: integer expected";
                if (message.applying != null && message.hasOwnProperty("applying"))
                    if (typeof message.applying !== "boolean")
                        return "applying: boolean expected";
                if (message.team != null && message.hasOwnProperty("team")) {
                    let error = $root.v388.protobuf.Team.verify(message.team);
                    if (error)
                        return "team." + error;
                }
                if (message.noticeEntries != null && message.hasOwnProperty("noticeEntries")) {
                    if (!Array.isArray(message.noticeEntries))
                        return "noticeEntries: array expected";
                    for (let i = 0; i < message.noticeEntries.length; ++i) {
                        let error = $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry.verify(message.noticeEntries[i]);
                        if (error)
                            return "noticeEntries." + error;
                    }
                }
                if (message.newsEntries != null && message.hasOwnProperty("newsEntries")) {
                    if (!Array.isArray(message.newsEntries))
                        return "newsEntries: array expected";
                    for (let i = 0; i < message.newsEntries.length; ++i) {
                        let error = $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry.verify(message.newsEntries[i]);
                        if (error)
                            return "newsEntries." + error;
                    }
                }
                if (message.applicants != null && message.hasOwnProperty("applicants")) {
                    if (!Array.isArray(message.applicants))
                        return "applicants: array expected";
                    for (let i = 0; i < message.applicants.length; ++i) {
                        let error = $root.v388.protobuf.TeamApplicant.verify(message.applicants[i]);
                        if (error)
                            return "applicants." + error;
                    }
                }
                if (message.teamCarId != null && message.hasOwnProperty("teamCarId"))
                    if (!$util.isInteger(message.teamCarId))
                        return "teamCarId: integer expected";
                return null;
            };

            /**
             * Creates a LoadTeamInformationResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamInformationResponse} LoadTeamInformationResponse
             */
            LoadTeamInformationResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamInformationResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamInformationResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.teamCreatedAt != null)
                    message.teamCreatedAt = object.teamCreatedAt >>> 0;
                if (object.applying != null)
                    message.applying = Boolean(object.applying);
                if (object.team != null) {
                    if (typeof object.team !== "object")
                        throw TypeError(".v388.protobuf.LoadTeamInformationResponse.team: object expected");
                    message.team = $root.v388.protobuf.Team.fromObject(object.team);
                }
                if (object.noticeEntries) {
                    if (!Array.isArray(object.noticeEntries))
                        throw TypeError(".v388.protobuf.LoadTeamInformationResponse.noticeEntries: array expected");
                    message.noticeEntries = [];
                    for (let i = 0; i < object.noticeEntries.length; ++i) {
                        if (typeof object.noticeEntries[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadTeamInformationResponse.noticeEntries: object expected");
                        message.noticeEntries[i] = $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry.fromObject(object.noticeEntries[i]);
                    }
                }
                if (object.newsEntries) {
                    if (!Array.isArray(object.newsEntries))
                        throw TypeError(".v388.protobuf.LoadTeamInformationResponse.newsEntries: array expected");
                    message.newsEntries = [];
                    for (let i = 0; i < object.newsEntries.length; ++i) {
                        if (typeof object.newsEntries[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadTeamInformationResponse.newsEntries: object expected");
                        message.newsEntries[i] = $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry.fromObject(object.newsEntries[i]);
                    }
                }
                if (object.applicants) {
                    if (!Array.isArray(object.applicants))
                        throw TypeError(".v388.protobuf.LoadTeamInformationResponse.applicants: array expected");
                    message.applicants = [];
                    for (let i = 0; i < object.applicants.length; ++i) {
                        if (typeof object.applicants[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadTeamInformationResponse.applicants: object expected");
                        message.applicants[i] = $root.v388.protobuf.TeamApplicant.fromObject(object.applicants[i]);
                    }
                }
                if (object.teamCarId != null)
                    message.teamCarId = object.teamCarId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamInformationResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {v388.protobuf.LoadTeamInformationResponse} message LoadTeamInformationResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamInformationResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.noticeEntries = [];
                    object.newsEntries = [];
                    object.applicants = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.teamCreatedAt = 0;
                    object.applying = false;
                    object.team = null;
                    object.teamCarId = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.teamCreatedAt != null && message.hasOwnProperty("teamCreatedAt"))
                    object.teamCreatedAt = message.teamCreatedAt;
                if (message.applying != null && message.hasOwnProperty("applying"))
                    object.applying = message.applying;
                if (message.team != null && message.hasOwnProperty("team"))
                    object.team = $root.v388.protobuf.Team.toObject(message.team, options);
                if (message.noticeEntries && message.noticeEntries.length) {
                    object.noticeEntries = [];
                    for (let j = 0; j < message.noticeEntries.length; ++j)
                        object.noticeEntries[j] = $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry.toObject(message.noticeEntries[j], options);
                }
                if (message.newsEntries && message.newsEntries.length) {
                    object.newsEntries = [];
                    for (let j = 0; j < message.newsEntries.length; ++j)
                        object.newsEntries[j] = $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry.toObject(message.newsEntries[j], options);
                }
                if (message.applicants && message.applicants.length) {
                    object.applicants = [];
                    for (let j = 0; j < message.applicants.length; ++j)
                        object.applicants[j] = $root.v388.protobuf.TeamApplicant.toObject(message.applicants[j], options);
                }
                if (message.teamCarId != null && message.hasOwnProperty("teamCarId"))
                    object.teamCarId = message.teamCarId;
                return object;
            };

            /**
             * Converts this LoadTeamInformationResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamInformationResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamInformationResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamInformationResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamInformationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamInformationResponse";
            };

            LoadTeamInformationResponse.NoticeEntry = (function() {

                /**
                 * Properties of a NoticeEntry.
                 * @memberof v388.protobuf.LoadTeamInformationResponse
                 * @interface INoticeEntry
                 * @property {v388.protobuf.TeamNoticeEntry} noticeType NoticeEntry noticeType
                 * @property {string|null} [field_1] NoticeEntry field_1
                 * @property {number|null} [field_2] NoticeEntry field_2
                 * @property {number|null} [field_3] NoticeEntry field_3
                 */

                /**
                 * Constructs a new NoticeEntry.
                 * @memberof v388.protobuf.LoadTeamInformationResponse
                 * @classdesc Represents a NoticeEntry.
                 * @implements INoticeEntry
                 * @constructor
                 * @param {v388.protobuf.LoadTeamInformationResponse.INoticeEntry=} [properties] Properties to set
                 */
                function NoticeEntry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NoticeEntry noticeType.
                 * @member {v388.protobuf.TeamNoticeEntry} noticeType
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @instance
                 */
                NoticeEntry.prototype.noticeType = 1;

                /**
                 * NoticeEntry field_1.
                 * @member {string} field_1
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @instance
                 */
                NoticeEntry.prototype.field_1 = "";

                /**
                 * NoticeEntry field_2.
                 * @member {number} field_2
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @instance
                 */
                NoticeEntry.prototype.field_2 = 0;

                /**
                 * NoticeEntry field_3.
                 * @member {number} field_3
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @instance
                 */
                NoticeEntry.prototype.field_3 = 0;

                /**
                 * Creates a new NoticeEntry instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INoticeEntry=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NoticeEntry} NoticeEntry instance
                 */
                NoticeEntry.create = function create(properties) {
                    return new NoticeEntry(properties);
                };

                /**
                 * Encodes the specified NoticeEntry message. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.NoticeEntry.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INoticeEntry} message NoticeEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NoticeEntry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.noticeType);
                    if (message.field_1 != null && Object.hasOwnProperty.call(message, "field_1"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.field_1);
                    if (message.field_2 != null && Object.hasOwnProperty.call(message, "field_2"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.field_2);
                    if (message.field_3 != null && Object.hasOwnProperty.call(message, "field_3"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.field_3);
                    return writer;
                };

                /**
                 * Encodes the specified NoticeEntry message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.NoticeEntry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INoticeEntry} message NoticeEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NoticeEntry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NoticeEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NoticeEntry} NoticeEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NoticeEntry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.noticeType = reader.int32();
                                break;
                            }
                        case 2: {
                                message.field_1 = reader.string();
                                break;
                            }
                        case 3: {
                                message.field_2 = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.field_3 = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("noticeType"))
                        throw $util.ProtocolError("missing required 'noticeType'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NoticeEntry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NoticeEntry} NoticeEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NoticeEntry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NoticeEntry message.
                 * @function verify
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NoticeEntry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.noticeType) {
                    default:
                        return "noticeType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        if (!$util.isString(message.field_1))
                            return "field_1: string expected";
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        if (!$util.isInteger(message.field_2))
                            return "field_2: integer expected";
                    if (message.field_3 != null && message.hasOwnProperty("field_3"))
                        if (!$util.isInteger(message.field_3))
                            return "field_3: integer expected";
                    return null;
                };

                /**
                 * Creates a NoticeEntry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NoticeEntry} NoticeEntry
                 */
                NoticeEntry.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry)
                        return object;
                    let message = new $root.v388.protobuf.LoadTeamInformationResponse.NoticeEntry();
                    switch (object.noticeType) {
                    default:
                        if (typeof object.noticeType === "number") {
                            message.noticeType = object.noticeType;
                            break;
                        }
                        break;
                    case "NOTICE_TEAM_PRIZE":
                    case 1:
                        message.noticeType = 1;
                        break;
                    case "NOTICE_JOINED":
                    case 2:
                        message.noticeType = 2;
                        break;
                    case "NOTICE_DISSOLVED":
                    case 3:
                        message.noticeType = 3;
                        break;
                    case "NOTICE_LEADER_CHANGED":
                    case 4:
                        message.noticeType = 4;
                        break;
                    case "NOTICE_FORCEDLY_DISSOLVED":
                    case 5:
                        message.noticeType = 5;
                        break;
                    }
                    if (object.field_1 != null)
                        message.field_1 = String(object.field_1);
                    if (object.field_2 != null)
                        message.field_2 = object.field_2 >>> 0;
                    if (object.field_3 != null)
                        message.field_3 = object.field_3 >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a NoticeEntry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.NoticeEntry} message NoticeEntry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NoticeEntry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.noticeType = options.enums === String ? "NOTICE_TEAM_PRIZE" : 1;
                        object.field_1 = "";
                        object.field_2 = 0;
                        object.field_3 = 0;
                    }
                    if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                        object.noticeType = options.enums === String ? $root.v388.protobuf.TeamNoticeEntry[message.noticeType] === undefined ? message.noticeType : $root.v388.protobuf.TeamNoticeEntry[message.noticeType] : message.noticeType;
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        object.field_1 = message.field_1;
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        object.field_2 = message.field_2;
                    if (message.field_3 != null && message.hasOwnProperty("field_3"))
                        object.field_3 = message.field_3;
                    return object;
                };

                /**
                 * Converts this NoticeEntry to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NoticeEntry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NoticeEntry
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NoticeEntry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NoticeEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadTeamInformationResponse.NoticeEntry";
                };

                return NoticeEntry;
            })();

            LoadTeamInformationResponse.NewsEntry = (function() {

                /**
                 * Properties of a NewsEntry.
                 * @memberof v388.protobuf.LoadTeamInformationResponse
                 * @interface INewsEntry
                 * @property {v388.protobuf.TeamNewsEntry} newsType NewsEntry newsType
                 * @property {number} datetime NewsEntry datetime
                 * @property {string|null} [field_1] NewsEntry field_1
                 * @property {number|null} [field_2] NewsEntry field_2
                 */

                /**
                 * Constructs a new NewsEntry.
                 * @memberof v388.protobuf.LoadTeamInformationResponse
                 * @classdesc Represents a NewsEntry.
                 * @implements INewsEntry
                 * @constructor
                 * @param {v388.protobuf.LoadTeamInformationResponse.INewsEntry=} [properties] Properties to set
                 */
                function NewsEntry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NewsEntry newsType.
                 * @member {v388.protobuf.TeamNewsEntry} newsType
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @instance
                 */
                NewsEntry.prototype.newsType = 1;

                /**
                 * NewsEntry datetime.
                 * @member {number} datetime
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @instance
                 */
                NewsEntry.prototype.datetime = 0;

                /**
                 * NewsEntry field_1.
                 * @member {string} field_1
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @instance
                 */
                NewsEntry.prototype.field_1 = "";

                /**
                 * NewsEntry field_2.
                 * @member {number} field_2
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @instance
                 */
                NewsEntry.prototype.field_2 = 0;

                /**
                 * Creates a new NewsEntry instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INewsEntry=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NewsEntry} NewsEntry instance
                 */
                NewsEntry.create = function create(properties) {
                    return new NewsEntry(properties);
                };

                /**
                 * Encodes the specified NewsEntry message. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.NewsEntry.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INewsEntry} message NewsEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NewsEntry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.newsType);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.datetime);
                    if (message.field_1 != null && Object.hasOwnProperty.call(message, "field_1"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.field_1);
                    if (message.field_2 != null && Object.hasOwnProperty.call(message, "field_2"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.field_2);
                    return writer;
                };

                /**
                 * Encodes the specified NewsEntry message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamInformationResponse.NewsEntry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.INewsEntry} message NewsEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NewsEntry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NewsEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NewsEntry} NewsEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NewsEntry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.newsType = reader.int32();
                                break;
                            }
                        case 2: {
                                message.datetime = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.field_1 = reader.string();
                                break;
                            }
                        case 4: {
                                message.field_2 = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("newsType"))
                        throw $util.ProtocolError("missing required 'newsType'", { instance: message });
                    if (!message.hasOwnProperty("datetime"))
                        throw $util.ProtocolError("missing required 'datetime'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NewsEntry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NewsEntry} NewsEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NewsEntry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NewsEntry message.
                 * @function verify
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NewsEntry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.newsType) {
                    default:
                        return "newsType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                    if (!$util.isInteger(message.datetime))
                        return "datetime: integer expected";
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        if (!$util.isString(message.field_1))
                            return "field_1: string expected";
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        if (!$util.isInteger(message.field_2))
                            return "field_2: integer expected";
                    return null;
                };

                /**
                 * Creates a NewsEntry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadTeamInformationResponse.NewsEntry} NewsEntry
                 */
                NewsEntry.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry)
                        return object;
                    let message = new $root.v388.protobuf.LoadTeamInformationResponse.NewsEntry();
                    switch (object.newsType) {
                    default:
                        if (typeof object.newsType === "number") {
                            message.newsType = object.newsType;
                            break;
                        }
                        break;
                    case "NEWS_STICKER_PRIZE":
                    case 1:
                        message.newsType = 1;
                        break;
                    case "NEWS_JOINED":
                    case 2:
                        message.newsType = 2;
                        break;
                    case "NEWS_LEADER_CHANGED":
                    case 3:
                        message.newsType = 3;
                        break;
                    case "NEWS_STICKER_CHANGED":
                    case 4:
                        message.newsType = 4;
                        break;
                    }
                    if (object.datetime != null)
                        message.datetime = object.datetime >>> 0;
                    if (object.field_1 != null)
                        message.field_1 = String(object.field_1);
                    if (object.field_2 != null)
                        message.field_2 = object.field_2 >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a NewsEntry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {v388.protobuf.LoadTeamInformationResponse.NewsEntry} message NewsEntry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NewsEntry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.newsType = options.enums === String ? "NEWS_STICKER_PRIZE" : 1;
                        object.datetime = 0;
                        object.field_1 = "";
                        object.field_2 = 0;
                    }
                    if (message.newsType != null && message.hasOwnProperty("newsType"))
                        object.newsType = options.enums === String ? $root.v388.protobuf.TeamNewsEntry[message.newsType] === undefined ? message.newsType : $root.v388.protobuf.TeamNewsEntry[message.newsType] : message.newsType;
                    if (message.datetime != null && message.hasOwnProperty("datetime"))
                        object.datetime = message.datetime;
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        object.field_1 = message.field_1;
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        object.field_2 = message.field_2;
                    return object;
                };

                /**
                 * Converts this NewsEntry to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NewsEntry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NewsEntry
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadTeamInformationResponse.NewsEntry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NewsEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadTeamInformationResponse.NewsEntry";
                };

                return NewsEntry;
            })();

            return LoadTeamInformationResponse;
        })();

        protobuf.CreateUserRequest = (function() {

            /**
             * Properties of a CreateUserRequest.
             * @memberof v388.protobuf
             * @interface ICreateUserRequest
             * @property {number|null} [banapassportAmId] CreateUserRequest banapassportAmId
             * @property {string|null} [cardChipId] CreateUserRequest cardChipId
             * @property {string|null} [accessCode] CreateUserRequest accessCode
             * @property {number|null} [cardTypeCode] CreateUserRequest cardTypeCode
             * @property {number|null} [cardRegionCode] CreateUserRequest cardRegionCode
             * @property {v388.protobuf.DeviceType|null} [device] CreateUserRequest device
             * @property {number} timestamp CreateUserRequest timestamp
             */

            /**
             * Constructs a new CreateUserRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateUserRequest.
             * @implements ICreateUserRequest
             * @constructor
             * @param {v388.protobuf.ICreateUserRequest=} [properties] Properties to set
             */
            function CreateUserRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateUserRequest banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.banapassportAmId = 0;

            /**
             * CreateUserRequest cardChipId.
             * @member {string} cardChipId
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardChipId = "";

            /**
             * CreateUserRequest accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.accessCode = "";

            /**
             * CreateUserRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardTypeCode = 0;

            /**
             * CreateUserRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardRegionCode = 0;

            /**
             * CreateUserRequest device.
             * @member {v388.protobuf.DeviceType} device
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.device = 0;

            /**
             * CreateUserRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.timestamp = 0;

            /**
             * Creates a new CreateUserRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {v388.protobuf.ICreateUserRequest=} [properties] Properties to set
             * @returns {v388.protobuf.CreateUserRequest} CreateUserRequest instance
             */
            CreateUserRequest.create = function create(properties) {
                return new CreateUserRequest(properties);
            };

            /**
             * Encodes the specified CreateUserRequest message. Does not implicitly {@link v388.protobuf.CreateUserRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {v388.protobuf.ICreateUserRequest} message CreateUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.banapassportAmId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.device);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified CreateUserRequest message, length delimited. Does not implicitly {@link v388.protobuf.CreateUserRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {v388.protobuf.ICreateUserRequest} message CreateUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateUserRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateUserRequest} CreateUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateUserRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.device = reader.int32();
                            break;
                        }
                    case 7: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateUserRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateUserRequest} CreateUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateUserRequest message.
             * @function verify
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateUserRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a CreateUserRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateUserRequest} CreateUserRequest
             */
            CreateUserRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateUserRequest)
                    return object;
                let message = new $root.v388.protobuf.CreateUserRequest();
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateUserRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {v388.protobuf.CreateUserRequest} message CreateUserRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateUserRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.banapassportAmId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.timestamp = 0;
                }
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.v388.protobuf.DeviceType[message.device] === undefined ? message.device : $root.v388.protobuf.DeviceType[message.device] : message.device;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this CreateUserRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateUserRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateUserRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateUserRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateUserRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateUserRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateUserRequest";
            };

            return CreateUserRequest;
        })();

        protobuf.CreateUserResponse = (function() {

            /**
             * Properties of a CreateUserResponse.
             * @memberof v388.protobuf
             * @interface ICreateUserResponse
             * @property {v388.protobuf.ErrorCode} error CreateUserResponse error
             * @property {string|null} [accessCode] CreateUserResponse accessCode
             * @property {number|null} [banapassportAmId] CreateUserResponse banapassportAmId
             * @property {number|null} [personalId] CreateUserResponse personalId
             * @property {number} userId CreateUserResponse userId
             */

            /**
             * Constructs a new CreateUserResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateUserResponse.
             * @implements ICreateUserResponse
             * @constructor
             * @param {v388.protobuf.ICreateUserResponse=} [properties] Properties to set
             */
            function CreateUserResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateUserResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.error = 0;

            /**
             * CreateUserResponse accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.accessCode = "";

            /**
             * CreateUserResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.banapassportAmId = 0;

            /**
             * CreateUserResponse personalId.
             * @member {number} personalId
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.personalId = 0;

            /**
             * CreateUserResponse userId.
             * @member {number} userId
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.userId = 0;

            /**
             * Creates a new CreateUserResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {v388.protobuf.ICreateUserResponse=} [properties] Properties to set
             * @returns {v388.protobuf.CreateUserResponse} CreateUserResponse instance
             */
            CreateUserResponse.create = function create(properties) {
                return new CreateUserResponse(properties);
            };

            /**
             * Encodes the specified CreateUserResponse message. Does not implicitly {@link v388.protobuf.CreateUserResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {v388.protobuf.ICreateUserResponse} message CreateUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.banapassportAmId);
                if (message.personalId != null && Object.hasOwnProperty.call(message, "personalId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.personalId);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified CreateUserResponse message, length delimited. Does not implicitly {@link v388.protobuf.CreateUserResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {v388.protobuf.ICreateUserResponse} message CreateUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateUserResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateUserResponse} CreateUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateUserResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.personalId = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateUserResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateUserResponse} CreateUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateUserResponse message.
             * @function verify
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateUserResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    if (!$util.isInteger(message.personalId))
                        return "personalId: integer expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a CreateUserResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateUserResponse} CreateUserResponse
             */
            CreateUserResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateUserResponse)
                    return object;
                let message = new $root.v388.protobuf.CreateUserResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.personalId != null)
                    message.personalId = object.personalId >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateUserResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {v388.protobuf.CreateUserResponse} message CreateUserResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateUserResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.personalId = 0;
                    object.userId = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.personalId != null && message.hasOwnProperty("personalId"))
                    object.personalId = message.personalId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this CreateUserResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateUserResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateUserResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateUserResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateUserResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateUserResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateUserResponse";
            };

            return CreateUserResponse;
        })();

        protobuf.AskAccessCodeRequest = (function() {

            /**
             * Properties of an AskAccessCodeRequest.
             * @memberof v388.protobuf
             * @interface IAskAccessCodeRequest
             * @property {string} cardChipId AskAccessCodeRequest cardChipId
             */

            /**
             * Constructs a new AskAccessCodeRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an AskAccessCodeRequest.
             * @implements IAskAccessCodeRequest
             * @constructor
             * @param {v388.protobuf.IAskAccessCodeRequest=} [properties] Properties to set
             */
            function AskAccessCodeRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AskAccessCodeRequest cardChipId.
             * @member {string} cardChipId
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @instance
             */
            AskAccessCodeRequest.prototype.cardChipId = "";

            /**
             * Creates a new AskAccessCodeRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {v388.protobuf.IAskAccessCodeRequest=} [properties] Properties to set
             * @returns {v388.protobuf.AskAccessCodeRequest} AskAccessCodeRequest instance
             */
            AskAccessCodeRequest.create = function create(properties) {
                return new AskAccessCodeRequest(properties);
            };

            /**
             * Encodes the specified AskAccessCodeRequest message. Does not implicitly {@link v388.protobuf.AskAccessCodeRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {v388.protobuf.IAskAccessCodeRequest} message AskAccessCodeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardChipId);
                return writer;
            };

            /**
             * Encodes the specified AskAccessCodeRequest message, length delimited. Does not implicitly {@link v388.protobuf.AskAccessCodeRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {v388.protobuf.IAskAccessCodeRequest} message AskAccessCodeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AskAccessCodeRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.AskAccessCodeRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("cardChipId"))
                    throw $util.ProtocolError("missing required 'cardChipId'", { instance: message });
                return message;
            };

            /**
             * Decodes an AskAccessCodeRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AskAccessCodeRequest message.
             * @function verify
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AskAccessCodeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.cardChipId))
                    return "cardChipId: string expected";
                return null;
            };

            /**
             * Creates an AskAccessCodeRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             */
            AskAccessCodeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.AskAccessCodeRequest)
                    return object;
                let message = new $root.v388.protobuf.AskAccessCodeRequest();
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                return message;
            };

            /**
             * Creates a plain object from an AskAccessCodeRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {v388.protobuf.AskAccessCodeRequest} message AskAccessCodeRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AskAccessCodeRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.cardChipId = "";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                return object;
            };

            /**
             * Converts this AskAccessCodeRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AskAccessCodeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AskAccessCodeRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.AskAccessCodeRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AskAccessCodeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.AskAccessCodeRequest";
            };

            return AskAccessCodeRequest;
        })();

        protobuf.AskAccessCodeResponse = (function() {

            /**
             * Properties of an AskAccessCodeResponse.
             * @memberof v388.protobuf
             * @interface IAskAccessCodeResponse
             * @property {v388.protobuf.ErrorCode} error AskAccessCodeResponse error
             * @property {string} accessCode AskAccessCodeResponse accessCode
             */

            /**
             * Constructs a new AskAccessCodeResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an AskAccessCodeResponse.
             * @implements IAskAccessCodeResponse
             * @constructor
             * @param {v388.protobuf.IAskAccessCodeResponse=} [properties] Properties to set
             */
            function AskAccessCodeResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AskAccessCodeResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @instance
             */
            AskAccessCodeResponse.prototype.error = 0;

            /**
             * AskAccessCodeResponse accessCode.
             * @member {string} accessCode
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @instance
             */
            AskAccessCodeResponse.prototype.accessCode = "";

            /**
             * Creates a new AskAccessCodeResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {v388.protobuf.IAskAccessCodeResponse=} [properties] Properties to set
             * @returns {v388.protobuf.AskAccessCodeResponse} AskAccessCodeResponse instance
             */
            AskAccessCodeResponse.create = function create(properties) {
                return new AskAccessCodeResponse(properties);
            };

            /**
             * Encodes the specified AskAccessCodeResponse message. Does not implicitly {@link v388.protobuf.AskAccessCodeResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {v388.protobuf.IAskAccessCodeResponse} message AskAccessCodeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                return writer;
            };

            /**
             * Encodes the specified AskAccessCodeResponse message, length delimited. Does not implicitly {@link v388.protobuf.AskAccessCodeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {v388.protobuf.IAskAccessCodeResponse} message AskAccessCodeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AskAccessCodeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.AskAccessCodeResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("accessCode"))
                    throw $util.ProtocolError("missing required 'accessCode'", { instance: message });
                return message;
            };

            /**
             * Decodes an AskAccessCodeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AskAccessCodeResponse message.
             * @function verify
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AskAccessCodeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isString(message.accessCode))
                    return "accessCode: string expected";
                return null;
            };

            /**
             * Creates an AskAccessCodeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             */
            AskAccessCodeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.AskAccessCodeResponse)
                    return object;
                let message = new $root.v388.protobuf.AskAccessCodeResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                return message;
            };

            /**
             * Creates a plain object from an AskAccessCodeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {v388.protobuf.AskAccessCodeResponse} message AskAccessCodeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AskAccessCodeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                return object;
            };

            /**
             * Converts this AskAccessCodeResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AskAccessCodeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AskAccessCodeResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.AskAccessCodeResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AskAccessCodeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.AskAccessCodeResponse";
            };

            return AskAccessCodeResponse;
        })();

        protobuf.PrepareCarSuccessionRequest = (function() {

            /**
             * Properties of a PrepareCarSuccessionRequest.
             * @memberof v388.protobuf
             * @interface IPrepareCarSuccessionRequest
             * @property {number} userId PrepareCarSuccessionRequest userId
             * @property {number} w3pMark PrepareCarSuccessionRequest w3pMark
             * @property {boolean} w3pHasMaxi2NolosePoint PrepareCarSuccessionRequest w3pHasMaxi2NolosePoint
             * @property {number} w3pId1 PrepareCarSuccessionRequest w3pId1
             * @property {number} w3pId2 PrepareCarSuccessionRequest w3pId2
             * @property {number} w3pTunePower PrepareCarSuccessionRequest w3pTunePower
             * @property {number} w3pTuneHandling PrepareCarSuccessionRequest w3pTuneHandling
             * @property {number} w3pDress PrepareCarSuccessionRequest w3pDress
             * @property {number} w3pRenewal PrepareCarSuccessionRequest w3pRenewal
             * @property {number} w3pClass PrepareCarSuccessionRequest w3pClass
             * @property {number} w3pOdoCount PrepareCarSuccessionRequest w3pOdoCount
             * @property {number} w3pJoinPlayCount PrepareCarSuccessionRequest w3pJoinPlayCount
             * @property {number} w3pJoinStarCount PrepareCarSuccessionRequest w3pJoinStarCount
             * @property {boolean} w3pHasStoryNolosePoint PrepareCarSuccessionRequest w3pHasStoryNolosePoint
             * @property {boolean} w3pHasStoryLose PrepareCarSuccessionRequest w3pHasStoryLose
             * @property {number} w3pTargetPlayCount PrepareCarSuccessionRequest w3pTargetPlayCount
             * @property {number} w3pTargetWinCount PrepareCarSuccessionRequest w3pTargetWinCount
             * @property {number} w3pStorySuccessiveVictoryCount PrepareCarSuccessionRequest w3pStorySuccessiveVictoryCount
             * @property {boolean} w3pHasStoryNolosePoint2 PrepareCarSuccessionRequest w3pHasStoryNolosePoint2
             * @property {boolean} w3pHasStoryClearPoint PrepareCarSuccessionRequest w3pHasStoryClearPoint
             * @property {number} w3pMaxiCoin PrepareCarSuccessionRequest w3pMaxiCoin
             * @property {number} w3pStorySuccessiveVictoryCountMax PrepareCarSuccessionRequest w3pStorySuccessiveVictoryCountMax
             * @property {number} w3pStoryClearCount PrepareCarSuccessionRequest w3pStoryClearCount
             * @property {Uint8Array} w3pBinary PrepareCarSuccessionRequest w3pBinary
             * @property {v388.protobuf.ICar} car PrepareCarSuccessionRequest car
             * @property {number} timestamp PrepareCarSuccessionRequest timestamp
             */

            /**
             * Constructs a new PrepareCarSuccessionRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a PrepareCarSuccessionRequest.
             * @implements IPrepareCarSuccessionRequest
             * @constructor
             * @param {v388.protobuf.IPrepareCarSuccessionRequest=} [properties] Properties to set
             */
            function PrepareCarSuccessionRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrepareCarSuccessionRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.userId = 0;

            /**
             * PrepareCarSuccessionRequest w3pMark.
             * @member {number} w3pMark
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pMark = 0;

            /**
             * PrepareCarSuccessionRequest w3pHasMaxi2NolosePoint.
             * @member {boolean} w3pHasMaxi2NolosePoint
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pHasMaxi2NolosePoint = false;

            /**
             * PrepareCarSuccessionRequest w3pId1.
             * @member {number} w3pId1
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pId1 = 0;

            /**
             * PrepareCarSuccessionRequest w3pId2.
             * @member {number} w3pId2
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pId2 = 0;

            /**
             * PrepareCarSuccessionRequest w3pTunePower.
             * @member {number} w3pTunePower
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pTunePower = 0;

            /**
             * PrepareCarSuccessionRequest w3pTuneHandling.
             * @member {number} w3pTuneHandling
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pTuneHandling = 0;

            /**
             * PrepareCarSuccessionRequest w3pDress.
             * @member {number} w3pDress
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pDress = 0;

            /**
             * PrepareCarSuccessionRequest w3pRenewal.
             * @member {number} w3pRenewal
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pRenewal = 0;

            /**
             * PrepareCarSuccessionRequest w3pClass.
             * @member {number} w3pClass
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pClass = 0;

            /**
             * PrepareCarSuccessionRequest w3pOdoCount.
             * @member {number} w3pOdoCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pOdoCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pJoinPlayCount.
             * @member {number} w3pJoinPlayCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pJoinPlayCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pJoinStarCount.
             * @member {number} w3pJoinStarCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pJoinStarCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pHasStoryNolosePoint.
             * @member {boolean} w3pHasStoryNolosePoint
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pHasStoryNolosePoint = false;

            /**
             * PrepareCarSuccessionRequest w3pHasStoryLose.
             * @member {boolean} w3pHasStoryLose
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pHasStoryLose = false;

            /**
             * PrepareCarSuccessionRequest w3pTargetPlayCount.
             * @member {number} w3pTargetPlayCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pTargetPlayCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pTargetWinCount.
             * @member {number} w3pTargetWinCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pTargetWinCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pStorySuccessiveVictoryCount.
             * @member {number} w3pStorySuccessiveVictoryCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pStorySuccessiveVictoryCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pHasStoryNolosePoint2.
             * @member {boolean} w3pHasStoryNolosePoint2
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pHasStoryNolosePoint2 = false;

            /**
             * PrepareCarSuccessionRequest w3pHasStoryClearPoint.
             * @member {boolean} w3pHasStoryClearPoint
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pHasStoryClearPoint = false;

            /**
             * PrepareCarSuccessionRequest w3pMaxiCoin.
             * @member {number} w3pMaxiCoin
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pMaxiCoin = 0;

            /**
             * PrepareCarSuccessionRequest w3pStorySuccessiveVictoryCountMax.
             * @member {number} w3pStorySuccessiveVictoryCountMax
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pStorySuccessiveVictoryCountMax = 0;

            /**
             * PrepareCarSuccessionRequest w3pStoryClearCount.
             * @member {number} w3pStoryClearCount
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pStoryClearCount = 0;

            /**
             * PrepareCarSuccessionRequest w3pBinary.
             * @member {Uint8Array} w3pBinary
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.w3pBinary = $util.newBuffer([]);

            /**
             * PrepareCarSuccessionRequest car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.car = null;

            /**
             * PrepareCarSuccessionRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             */
            PrepareCarSuccessionRequest.prototype.timestamp = 0;

            /**
             * Creates a new PrepareCarSuccessionRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionRequest=} [properties] Properties to set
             * @returns {v388.protobuf.PrepareCarSuccessionRequest} PrepareCarSuccessionRequest instance
             */
            PrepareCarSuccessionRequest.create = function create(properties) {
                return new PrepareCarSuccessionRequest(properties);
            };

            /**
             * Encodes the specified PrepareCarSuccessionRequest message. Does not implicitly {@link v388.protobuf.PrepareCarSuccessionRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionRequest} message PrepareCarSuccessionRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareCarSuccessionRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.w3pMark);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.w3pHasMaxi2NolosePoint);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.w3pId1);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.w3pId2);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.w3pTunePower);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.w3pTuneHandling);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.w3pDress);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.w3pRenewal);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.w3pClass);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.w3pOdoCount);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.w3pJoinPlayCount);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.w3pJoinStarCount);
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.w3pHasStoryNolosePoint);
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.w3pHasStoryLose);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.w3pTargetPlayCount);
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.w3pTargetWinCount);
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.w3pStorySuccessiveVictoryCount);
                writer.uint32(/* id 19, wireType 0 =*/152).bool(message.w3pHasStoryNolosePoint2);
                writer.uint32(/* id 20, wireType 0 =*/160).bool(message.w3pHasStoryClearPoint);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.w3pMaxiCoin);
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.w3pStorySuccessiveVictoryCountMax);
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.w3pStoryClearCount);
                writer.uint32(/* id 25, wireType 2 =*/202).bytes(message.w3pBinary);
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified PrepareCarSuccessionRequest message, length delimited. Does not implicitly {@link v388.protobuf.PrepareCarSuccessionRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionRequest} message PrepareCarSuccessionRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareCarSuccessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrepareCarSuccessionRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PrepareCarSuccessionRequest} PrepareCarSuccessionRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareCarSuccessionRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PrepareCarSuccessionRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.w3pMark = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.w3pHasMaxi2NolosePoint = reader.bool();
                            break;
                        }
                    case 4: {
                            message.w3pId1 = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.w3pId2 = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.w3pTunePower = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.w3pTuneHandling = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.w3pDress = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.w3pRenewal = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.w3pClass = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.w3pOdoCount = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.w3pJoinPlayCount = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.w3pJoinStarCount = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.w3pHasStoryNolosePoint = reader.bool();
                            break;
                        }
                    case 15: {
                            message.w3pHasStoryLose = reader.bool();
                            break;
                        }
                    case 16: {
                            message.w3pTargetPlayCount = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.w3pTargetWinCount = reader.uint32();
                            break;
                        }
                    case 18: {
                            message.w3pStorySuccessiveVictoryCount = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.w3pHasStoryNolosePoint2 = reader.bool();
                            break;
                        }
                    case 20: {
                            message.w3pHasStoryClearPoint = reader.bool();
                            break;
                        }
                    case 22: {
                            message.w3pMaxiCoin = reader.uint32();
                            break;
                        }
                    case 23: {
                            message.w3pStorySuccessiveVictoryCountMax = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.w3pStoryClearCount = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.w3pBinary = reader.bytes();
                            break;
                        }
                    case 26: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 27: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("w3pMark"))
                    throw $util.ProtocolError("missing required 'w3pMark'", { instance: message });
                if (!message.hasOwnProperty("w3pHasMaxi2NolosePoint"))
                    throw $util.ProtocolError("missing required 'w3pHasMaxi2NolosePoint'", { instance: message });
                if (!message.hasOwnProperty("w3pId1"))
                    throw $util.ProtocolError("missing required 'w3pId1'", { instance: message });
                if (!message.hasOwnProperty("w3pId2"))
                    throw $util.ProtocolError("missing required 'w3pId2'", { instance: message });
                if (!message.hasOwnProperty("w3pTunePower"))
                    throw $util.ProtocolError("missing required 'w3pTunePower'", { instance: message });
                if (!message.hasOwnProperty("w3pTuneHandling"))
                    throw $util.ProtocolError("missing required 'w3pTuneHandling'", { instance: message });
                if (!message.hasOwnProperty("w3pDress"))
                    throw $util.ProtocolError("missing required 'w3pDress'", { instance: message });
                if (!message.hasOwnProperty("w3pRenewal"))
                    throw $util.ProtocolError("missing required 'w3pRenewal'", { instance: message });
                if (!message.hasOwnProperty("w3pClass"))
                    throw $util.ProtocolError("missing required 'w3pClass'", { instance: message });
                if (!message.hasOwnProperty("w3pOdoCount"))
                    throw $util.ProtocolError("missing required 'w3pOdoCount'", { instance: message });
                if (!message.hasOwnProperty("w3pJoinPlayCount"))
                    throw $util.ProtocolError("missing required 'w3pJoinPlayCount'", { instance: message });
                if (!message.hasOwnProperty("w3pJoinStarCount"))
                    throw $util.ProtocolError("missing required 'w3pJoinStarCount'", { instance: message });
                if (!message.hasOwnProperty("w3pHasStoryNolosePoint"))
                    throw $util.ProtocolError("missing required 'w3pHasStoryNolosePoint'", { instance: message });
                if (!message.hasOwnProperty("w3pHasStoryLose"))
                    throw $util.ProtocolError("missing required 'w3pHasStoryLose'", { instance: message });
                if (!message.hasOwnProperty("w3pTargetPlayCount"))
                    throw $util.ProtocolError("missing required 'w3pTargetPlayCount'", { instance: message });
                if (!message.hasOwnProperty("w3pTargetWinCount"))
                    throw $util.ProtocolError("missing required 'w3pTargetWinCount'", { instance: message });
                if (!message.hasOwnProperty("w3pStorySuccessiveVictoryCount"))
                    throw $util.ProtocolError("missing required 'w3pStorySuccessiveVictoryCount'", { instance: message });
                if (!message.hasOwnProperty("w3pHasStoryNolosePoint2"))
                    throw $util.ProtocolError("missing required 'w3pHasStoryNolosePoint2'", { instance: message });
                if (!message.hasOwnProperty("w3pHasStoryClearPoint"))
                    throw $util.ProtocolError("missing required 'w3pHasStoryClearPoint'", { instance: message });
                if (!message.hasOwnProperty("w3pMaxiCoin"))
                    throw $util.ProtocolError("missing required 'w3pMaxiCoin'", { instance: message });
                if (!message.hasOwnProperty("w3pStorySuccessiveVictoryCountMax"))
                    throw $util.ProtocolError("missing required 'w3pStorySuccessiveVictoryCountMax'", { instance: message });
                if (!message.hasOwnProperty("w3pStoryClearCount"))
                    throw $util.ProtocolError("missing required 'w3pStoryClearCount'", { instance: message });
                if (!message.hasOwnProperty("w3pBinary"))
                    throw $util.ProtocolError("missing required 'w3pBinary'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a PrepareCarSuccessionRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PrepareCarSuccessionRequest} PrepareCarSuccessionRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareCarSuccessionRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrepareCarSuccessionRequest message.
             * @function verify
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrepareCarSuccessionRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.w3pMark))
                    return "w3pMark: integer expected";
                if (typeof message.w3pHasMaxi2NolosePoint !== "boolean")
                    return "w3pHasMaxi2NolosePoint: boolean expected";
                if (!$util.isInteger(message.w3pId1))
                    return "w3pId1: integer expected";
                if (!$util.isInteger(message.w3pId2))
                    return "w3pId2: integer expected";
                if (!$util.isInteger(message.w3pTunePower))
                    return "w3pTunePower: integer expected";
                if (!$util.isInteger(message.w3pTuneHandling))
                    return "w3pTuneHandling: integer expected";
                if (!$util.isInteger(message.w3pDress))
                    return "w3pDress: integer expected";
                if (!$util.isInteger(message.w3pRenewal))
                    return "w3pRenewal: integer expected";
                if (!$util.isInteger(message.w3pClass))
                    return "w3pClass: integer expected";
                if (!$util.isInteger(message.w3pOdoCount))
                    return "w3pOdoCount: integer expected";
                if (!$util.isInteger(message.w3pJoinPlayCount))
                    return "w3pJoinPlayCount: integer expected";
                if (!$util.isInteger(message.w3pJoinStarCount))
                    return "w3pJoinStarCount: integer expected";
                if (typeof message.w3pHasStoryNolosePoint !== "boolean")
                    return "w3pHasStoryNolosePoint: boolean expected";
                if (typeof message.w3pHasStoryLose !== "boolean")
                    return "w3pHasStoryLose: boolean expected";
                if (!$util.isInteger(message.w3pTargetPlayCount))
                    return "w3pTargetPlayCount: integer expected";
                if (!$util.isInteger(message.w3pTargetWinCount))
                    return "w3pTargetWinCount: integer expected";
                if (!$util.isInteger(message.w3pStorySuccessiveVictoryCount))
                    return "w3pStorySuccessiveVictoryCount: integer expected";
                if (typeof message.w3pHasStoryNolosePoint2 !== "boolean")
                    return "w3pHasStoryNolosePoint2: boolean expected";
                if (typeof message.w3pHasStoryClearPoint !== "boolean")
                    return "w3pHasStoryClearPoint: boolean expected";
                if (!$util.isInteger(message.w3pMaxiCoin))
                    return "w3pMaxiCoin: integer expected";
                if (!$util.isInteger(message.w3pStorySuccessiveVictoryCountMax))
                    return "w3pStorySuccessiveVictoryCountMax: integer expected";
                if (!$util.isInteger(message.w3pStoryClearCount))
                    return "w3pStoryClearCount: integer expected";
                if (!(message.w3pBinary && typeof message.w3pBinary.length === "number" || $util.isString(message.w3pBinary)))
                    return "w3pBinary: buffer expected";
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a PrepareCarSuccessionRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PrepareCarSuccessionRequest} PrepareCarSuccessionRequest
             */
            PrepareCarSuccessionRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PrepareCarSuccessionRequest)
                    return object;
                let message = new $root.v388.protobuf.PrepareCarSuccessionRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.w3pMark != null)
                    message.w3pMark = object.w3pMark >>> 0;
                if (object.w3pHasMaxi2NolosePoint != null)
                    message.w3pHasMaxi2NolosePoint = Boolean(object.w3pHasMaxi2NolosePoint);
                if (object.w3pId1 != null)
                    message.w3pId1 = object.w3pId1 >>> 0;
                if (object.w3pId2 != null)
                    message.w3pId2 = object.w3pId2 >>> 0;
                if (object.w3pTunePower != null)
                    message.w3pTunePower = object.w3pTunePower >>> 0;
                if (object.w3pTuneHandling != null)
                    message.w3pTuneHandling = object.w3pTuneHandling >>> 0;
                if (object.w3pDress != null)
                    message.w3pDress = object.w3pDress >>> 0;
                if (object.w3pRenewal != null)
                    message.w3pRenewal = object.w3pRenewal >>> 0;
                if (object.w3pClass != null)
                    message.w3pClass = object.w3pClass >>> 0;
                if (object.w3pOdoCount != null)
                    message.w3pOdoCount = object.w3pOdoCount >>> 0;
                if (object.w3pJoinPlayCount != null)
                    message.w3pJoinPlayCount = object.w3pJoinPlayCount >>> 0;
                if (object.w3pJoinStarCount != null)
                    message.w3pJoinStarCount = object.w3pJoinStarCount >>> 0;
                if (object.w3pHasStoryNolosePoint != null)
                    message.w3pHasStoryNolosePoint = Boolean(object.w3pHasStoryNolosePoint);
                if (object.w3pHasStoryLose != null)
                    message.w3pHasStoryLose = Boolean(object.w3pHasStoryLose);
                if (object.w3pTargetPlayCount != null)
                    message.w3pTargetPlayCount = object.w3pTargetPlayCount >>> 0;
                if (object.w3pTargetWinCount != null)
                    message.w3pTargetWinCount = object.w3pTargetWinCount >>> 0;
                if (object.w3pStorySuccessiveVictoryCount != null)
                    message.w3pStorySuccessiveVictoryCount = object.w3pStorySuccessiveVictoryCount >>> 0;
                if (object.w3pHasStoryNolosePoint2 != null)
                    message.w3pHasStoryNolosePoint2 = Boolean(object.w3pHasStoryNolosePoint2);
                if (object.w3pHasStoryClearPoint != null)
                    message.w3pHasStoryClearPoint = Boolean(object.w3pHasStoryClearPoint);
                if (object.w3pMaxiCoin != null)
                    message.w3pMaxiCoin = object.w3pMaxiCoin >>> 0;
                if (object.w3pStorySuccessiveVictoryCountMax != null)
                    message.w3pStorySuccessiveVictoryCountMax = object.w3pStorySuccessiveVictoryCountMax >>> 0;
                if (object.w3pStoryClearCount != null)
                    message.w3pStoryClearCount = object.w3pStoryClearCount >>> 0;
                if (object.w3pBinary != null)
                    if (typeof object.w3pBinary === "string")
                        $util.base64.decode(object.w3pBinary, message.w3pBinary = $util.newBuffer($util.base64.length(object.w3pBinary)), 0);
                    else if (object.w3pBinary.length >= 0)
                        message.w3pBinary = object.w3pBinary;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.PrepareCarSuccessionRequest.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PrepareCarSuccessionRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {v388.protobuf.PrepareCarSuccessionRequest} message PrepareCarSuccessionRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrepareCarSuccessionRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.w3pMark = 0;
                    object.w3pHasMaxi2NolosePoint = false;
                    object.w3pId1 = 0;
                    object.w3pId2 = 0;
                    object.w3pTunePower = 0;
                    object.w3pTuneHandling = 0;
                    object.w3pDress = 0;
                    object.w3pRenewal = 0;
                    object.w3pClass = 0;
                    object.w3pOdoCount = 0;
                    object.w3pJoinPlayCount = 0;
                    object.w3pJoinStarCount = 0;
                    object.w3pHasStoryNolosePoint = false;
                    object.w3pHasStoryLose = false;
                    object.w3pTargetPlayCount = 0;
                    object.w3pTargetWinCount = 0;
                    object.w3pStorySuccessiveVictoryCount = 0;
                    object.w3pHasStoryNolosePoint2 = false;
                    object.w3pHasStoryClearPoint = false;
                    object.w3pMaxiCoin = 0;
                    object.w3pStorySuccessiveVictoryCountMax = 0;
                    object.w3pStoryClearCount = 0;
                    if (options.bytes === String)
                        object.w3pBinary = "";
                    else {
                        object.w3pBinary = [];
                        if (options.bytes !== Array)
                            object.w3pBinary = $util.newBuffer(object.w3pBinary);
                    }
                    object.car = null;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.w3pMark != null && message.hasOwnProperty("w3pMark"))
                    object.w3pMark = message.w3pMark;
                if (message.w3pHasMaxi2NolosePoint != null && message.hasOwnProperty("w3pHasMaxi2NolosePoint"))
                    object.w3pHasMaxi2NolosePoint = message.w3pHasMaxi2NolosePoint;
                if (message.w3pId1 != null && message.hasOwnProperty("w3pId1"))
                    object.w3pId1 = message.w3pId1;
                if (message.w3pId2 != null && message.hasOwnProperty("w3pId2"))
                    object.w3pId2 = message.w3pId2;
                if (message.w3pTunePower != null && message.hasOwnProperty("w3pTunePower"))
                    object.w3pTunePower = message.w3pTunePower;
                if (message.w3pTuneHandling != null && message.hasOwnProperty("w3pTuneHandling"))
                    object.w3pTuneHandling = message.w3pTuneHandling;
                if (message.w3pDress != null && message.hasOwnProperty("w3pDress"))
                    object.w3pDress = message.w3pDress;
                if (message.w3pRenewal != null && message.hasOwnProperty("w3pRenewal"))
                    object.w3pRenewal = message.w3pRenewal;
                if (message.w3pClass != null && message.hasOwnProperty("w3pClass"))
                    object.w3pClass = message.w3pClass;
                if (message.w3pOdoCount != null && message.hasOwnProperty("w3pOdoCount"))
                    object.w3pOdoCount = message.w3pOdoCount;
                if (message.w3pJoinPlayCount != null && message.hasOwnProperty("w3pJoinPlayCount"))
                    object.w3pJoinPlayCount = message.w3pJoinPlayCount;
                if (message.w3pJoinStarCount != null && message.hasOwnProperty("w3pJoinStarCount"))
                    object.w3pJoinStarCount = message.w3pJoinStarCount;
                if (message.w3pHasStoryNolosePoint != null && message.hasOwnProperty("w3pHasStoryNolosePoint"))
                    object.w3pHasStoryNolosePoint = message.w3pHasStoryNolosePoint;
                if (message.w3pHasStoryLose != null && message.hasOwnProperty("w3pHasStoryLose"))
                    object.w3pHasStoryLose = message.w3pHasStoryLose;
                if (message.w3pTargetPlayCount != null && message.hasOwnProperty("w3pTargetPlayCount"))
                    object.w3pTargetPlayCount = message.w3pTargetPlayCount;
                if (message.w3pTargetWinCount != null && message.hasOwnProperty("w3pTargetWinCount"))
                    object.w3pTargetWinCount = message.w3pTargetWinCount;
                if (message.w3pStorySuccessiveVictoryCount != null && message.hasOwnProperty("w3pStorySuccessiveVictoryCount"))
                    object.w3pStorySuccessiveVictoryCount = message.w3pStorySuccessiveVictoryCount;
                if (message.w3pHasStoryNolosePoint2 != null && message.hasOwnProperty("w3pHasStoryNolosePoint2"))
                    object.w3pHasStoryNolosePoint2 = message.w3pHasStoryNolosePoint2;
                if (message.w3pHasStoryClearPoint != null && message.hasOwnProperty("w3pHasStoryClearPoint"))
                    object.w3pHasStoryClearPoint = message.w3pHasStoryClearPoint;
                if (message.w3pMaxiCoin != null && message.hasOwnProperty("w3pMaxiCoin"))
                    object.w3pMaxiCoin = message.w3pMaxiCoin;
                if (message.w3pStorySuccessiveVictoryCountMax != null && message.hasOwnProperty("w3pStorySuccessiveVictoryCountMax"))
                    object.w3pStorySuccessiveVictoryCountMax = message.w3pStorySuccessiveVictoryCountMax;
                if (message.w3pStoryClearCount != null && message.hasOwnProperty("w3pStoryClearCount"))
                    object.w3pStoryClearCount = message.w3pStoryClearCount;
                if (message.w3pBinary != null && message.hasOwnProperty("w3pBinary"))
                    object.w3pBinary = options.bytes === String ? $util.base64.encode(message.w3pBinary, 0, message.w3pBinary.length) : options.bytes === Array ? Array.prototype.slice.call(message.w3pBinary) : message.w3pBinary;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this PrepareCarSuccessionRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrepareCarSuccessionRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PrepareCarSuccessionRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.PrepareCarSuccessionRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PrepareCarSuccessionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PrepareCarSuccessionRequest";
            };

            return PrepareCarSuccessionRequest;
        })();

        protobuf.PrepareCarSuccessionResponse = (function() {

            /**
             * Properties of a PrepareCarSuccessionResponse.
             * @memberof v388.protobuf
             * @interface IPrepareCarSuccessionResponse
             * @property {v388.protobuf.ErrorCode} error PrepareCarSuccessionResponse error
             * @property {number} successionId PrepareCarSuccessionResponse successionId
             * @property {string} searchCode PrepareCarSuccessionResponse searchCode
             */

            /**
             * Constructs a new PrepareCarSuccessionResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a PrepareCarSuccessionResponse.
             * @implements IPrepareCarSuccessionResponse
             * @constructor
             * @param {v388.protobuf.IPrepareCarSuccessionResponse=} [properties] Properties to set
             */
            function PrepareCarSuccessionResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrepareCarSuccessionResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @instance
             */
            PrepareCarSuccessionResponse.prototype.error = 0;

            /**
             * PrepareCarSuccessionResponse successionId.
             * @member {number} successionId
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @instance
             */
            PrepareCarSuccessionResponse.prototype.successionId = 0;

            /**
             * PrepareCarSuccessionResponse searchCode.
             * @member {string} searchCode
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @instance
             */
            PrepareCarSuccessionResponse.prototype.searchCode = "";

            /**
             * Creates a new PrepareCarSuccessionResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionResponse=} [properties] Properties to set
             * @returns {v388.protobuf.PrepareCarSuccessionResponse} PrepareCarSuccessionResponse instance
             */
            PrepareCarSuccessionResponse.create = function create(properties) {
                return new PrepareCarSuccessionResponse(properties);
            };

            /**
             * Encodes the specified PrepareCarSuccessionResponse message. Does not implicitly {@link v388.protobuf.PrepareCarSuccessionResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionResponse} message PrepareCarSuccessionResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareCarSuccessionResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.successionId);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.searchCode);
                return writer;
            };

            /**
             * Encodes the specified PrepareCarSuccessionResponse message, length delimited. Does not implicitly {@link v388.protobuf.PrepareCarSuccessionResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {v388.protobuf.IPrepareCarSuccessionResponse} message PrepareCarSuccessionResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrepareCarSuccessionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrepareCarSuccessionResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PrepareCarSuccessionResponse} PrepareCarSuccessionResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareCarSuccessionResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PrepareCarSuccessionResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.successionId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.searchCode = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("successionId"))
                    throw $util.ProtocolError("missing required 'successionId'", { instance: message });
                if (!message.hasOwnProperty("searchCode"))
                    throw $util.ProtocolError("missing required 'searchCode'", { instance: message });
                return message;
            };

            /**
             * Decodes a PrepareCarSuccessionResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PrepareCarSuccessionResponse} PrepareCarSuccessionResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrepareCarSuccessionResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrepareCarSuccessionResponse message.
             * @function verify
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrepareCarSuccessionResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.successionId))
                    return "successionId: integer expected";
                if (!$util.isString(message.searchCode))
                    return "searchCode: string expected";
                return null;
            };

            /**
             * Creates a PrepareCarSuccessionResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PrepareCarSuccessionResponse} PrepareCarSuccessionResponse
             */
            PrepareCarSuccessionResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PrepareCarSuccessionResponse)
                    return object;
                let message = new $root.v388.protobuf.PrepareCarSuccessionResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.successionId != null)
                    message.successionId = object.successionId >>> 0;
                if (object.searchCode != null)
                    message.searchCode = String(object.searchCode);
                return message;
            };

            /**
             * Creates a plain object from a PrepareCarSuccessionResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {v388.protobuf.PrepareCarSuccessionResponse} message PrepareCarSuccessionResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrepareCarSuccessionResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.successionId = 0;
                    object.searchCode = "";
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.successionId != null && message.hasOwnProperty("successionId"))
                    object.successionId = message.successionId;
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    object.searchCode = message.searchCode;
                return object;
            };

            /**
             * Converts this PrepareCarSuccessionResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrepareCarSuccessionResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PrepareCarSuccessionResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.PrepareCarSuccessionResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PrepareCarSuccessionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PrepareCarSuccessionResponse";
            };

            return PrepareCarSuccessionResponse;
        })();

        protobuf.SucceedCarRequest = (function() {

            /**
             * Properties of a SucceedCarRequest.
             * @memberof v388.protobuf
             * @interface ISucceedCarRequest
             * @property {number} successionId SucceedCarRequest successionId
             */

            /**
             * Constructs a new SucceedCarRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SucceedCarRequest.
             * @implements ISucceedCarRequest
             * @constructor
             * @param {v388.protobuf.ISucceedCarRequest=} [properties] Properties to set
             */
            function SucceedCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SucceedCarRequest successionId.
             * @member {number} successionId
             * @memberof v388.protobuf.SucceedCarRequest
             * @instance
             */
            SucceedCarRequest.prototype.successionId = 0;

            /**
             * Creates a new SucceedCarRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {v388.protobuf.ISucceedCarRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SucceedCarRequest} SucceedCarRequest instance
             */
            SucceedCarRequest.create = function create(properties) {
                return new SucceedCarRequest(properties);
            };

            /**
             * Encodes the specified SucceedCarRequest message. Does not implicitly {@link v388.protobuf.SucceedCarRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {v388.protobuf.ISucceedCarRequest} message SucceedCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SucceedCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.successionId);
                return writer;
            };

            /**
             * Encodes the specified SucceedCarRequest message, length delimited. Does not implicitly {@link v388.protobuf.SucceedCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {v388.protobuf.ISucceedCarRequest} message SucceedCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SucceedCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SucceedCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SucceedCarRequest} SucceedCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SucceedCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SucceedCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.successionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("successionId"))
                    throw $util.ProtocolError("missing required 'successionId'", { instance: message });
                return message;
            };

            /**
             * Decodes a SucceedCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SucceedCarRequest} SucceedCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SucceedCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SucceedCarRequest message.
             * @function verify
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SucceedCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.successionId))
                    return "successionId: integer expected";
                return null;
            };

            /**
             * Creates a SucceedCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SucceedCarRequest} SucceedCarRequest
             */
            SucceedCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SucceedCarRequest)
                    return object;
                let message = new $root.v388.protobuf.SucceedCarRequest();
                if (object.successionId != null)
                    message.successionId = object.successionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SucceedCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {v388.protobuf.SucceedCarRequest} message SucceedCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SucceedCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.successionId = 0;
                if (message.successionId != null && message.hasOwnProperty("successionId"))
                    object.successionId = message.successionId;
                return object;
            };

            /**
             * Converts this SucceedCarRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SucceedCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SucceedCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SucceedCarRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SucceedCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SucceedCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SucceedCarRequest";
            };

            return SucceedCarRequest;
        })();

        protobuf.SucceedCarResponse = (function() {

            /**
             * Properties of a SucceedCarResponse.
             * @memberof v388.protobuf
             * @interface ISucceedCarResponse
             * @property {v388.protobuf.ErrorCode} error SucceedCarResponse error
             * @property {number} carId SucceedCarResponse carId
             */

            /**
             * Constructs a new SucceedCarResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SucceedCarResponse.
             * @implements ISucceedCarResponse
             * @constructor
             * @param {v388.protobuf.ISucceedCarResponse=} [properties] Properties to set
             */
            function SucceedCarResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SucceedCarResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SucceedCarResponse
             * @instance
             */
            SucceedCarResponse.prototype.error = 0;

            /**
             * SucceedCarResponse carId.
             * @member {number} carId
             * @memberof v388.protobuf.SucceedCarResponse
             * @instance
             */
            SucceedCarResponse.prototype.carId = 0;

            /**
             * Creates a new SucceedCarResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {v388.protobuf.ISucceedCarResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SucceedCarResponse} SucceedCarResponse instance
             */
            SucceedCarResponse.create = function create(properties) {
                return new SucceedCarResponse(properties);
            };

            /**
             * Encodes the specified SucceedCarResponse message. Does not implicitly {@link v388.protobuf.SucceedCarResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {v388.protobuf.ISucceedCarResponse} message SucceedCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SucceedCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified SucceedCarResponse message, length delimited. Does not implicitly {@link v388.protobuf.SucceedCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {v388.protobuf.ISucceedCarResponse} message SucceedCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SucceedCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SucceedCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SucceedCarResponse} SucceedCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SucceedCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SucceedCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a SucceedCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SucceedCarResponse} SucceedCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SucceedCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SucceedCarResponse message.
             * @function verify
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SucceedCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a SucceedCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SucceedCarResponse} SucceedCarResponse
             */
            SucceedCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SucceedCarResponse)
                    return object;
                let message = new $root.v388.protobuf.SucceedCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SucceedCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {v388.protobuf.SucceedCarResponse} message SucceedCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SucceedCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.carId = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this SucceedCarResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SucceedCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SucceedCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SucceedCarResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SucceedCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SucceedCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SucceedCarResponse";
            };

            return SucceedCarResponse;
        })();

        protobuf.RegisterOpponentGhostRequest = (function() {

            /**
             * Properties of a RegisterOpponentGhostRequest.
             * @memberof v388.protobuf
             * @interface IRegisterOpponentGhostRequest
             * @property {number} carId RegisterOpponentGhostRequest carId
             * @property {number} specialGhostId RegisterOpponentGhostRequest specialGhostId
             */

            /**
             * Constructs a new RegisterOpponentGhostRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterOpponentGhostRequest.
             * @implements IRegisterOpponentGhostRequest
             * @constructor
             * @param {v388.protobuf.IRegisterOpponentGhostRequest=} [properties] Properties to set
             */
            function RegisterOpponentGhostRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterOpponentGhostRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @instance
             */
            RegisterOpponentGhostRequest.prototype.carId = 0;

            /**
             * RegisterOpponentGhostRequest specialGhostId.
             * @member {number} specialGhostId
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @instance
             */
            RegisterOpponentGhostRequest.prototype.specialGhostId = 0;

            /**
             * Creates a new RegisterOpponentGhostRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostRequest=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest instance
             */
            RegisterOpponentGhostRequest.create = function create(properties) {
                return new RegisterOpponentGhostRequest(properties);
            };

            /**
             * Encodes the specified RegisterOpponentGhostRequest message. Does not implicitly {@link v388.protobuf.RegisterOpponentGhostRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostRequest} message RegisterOpponentGhostRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.specialGhostId);
                return writer;
            };

            /**
             * Encodes the specified RegisterOpponentGhostRequest message, length delimited. Does not implicitly {@link v388.protobuf.RegisterOpponentGhostRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostRequest} message RegisterOpponentGhostRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterOpponentGhostRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterOpponentGhostRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.specialGhostId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("specialGhostId"))
                    throw $util.ProtocolError("missing required 'specialGhostId'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterOpponentGhostRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterOpponentGhostRequest message.
             * @function verify
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterOpponentGhostRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.specialGhostId))
                    return "specialGhostId: integer expected";
                return null;
            };

            /**
             * Creates a RegisterOpponentGhostRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             */
            RegisterOpponentGhostRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterOpponentGhostRequest)
                    return object;
                let message = new $root.v388.protobuf.RegisterOpponentGhostRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.specialGhostId != null)
                    message.specialGhostId = object.specialGhostId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a RegisterOpponentGhostRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {v388.protobuf.RegisterOpponentGhostRequest} message RegisterOpponentGhostRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterOpponentGhostRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.specialGhostId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    object.specialGhostId = message.specialGhostId;
                return object;
            };

            /**
             * Converts this RegisterOpponentGhostRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterOpponentGhostRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterOpponentGhostRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterOpponentGhostRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterOpponentGhostRequest";
            };

            return RegisterOpponentGhostRequest;
        })();

        protobuf.RegisterOpponentGhostResponse = (function() {

            /**
             * Properties of a RegisterOpponentGhostResponse.
             * @memberof v388.protobuf
             * @interface IRegisterOpponentGhostResponse
             * @property {v388.protobuf.ErrorCode} error RegisterOpponentGhostResponse error
             */

            /**
             * Constructs a new RegisterOpponentGhostResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a RegisterOpponentGhostResponse.
             * @implements IRegisterOpponentGhostResponse
             * @constructor
             * @param {v388.protobuf.IRegisterOpponentGhostResponse=} [properties] Properties to set
             */
            function RegisterOpponentGhostResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterOpponentGhostResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @instance
             */
            RegisterOpponentGhostResponse.prototype.error = 0;

            /**
             * Creates a new RegisterOpponentGhostResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostResponse=} [properties] Properties to set
             * @returns {v388.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse instance
             */
            RegisterOpponentGhostResponse.create = function create(properties) {
                return new RegisterOpponentGhostResponse(properties);
            };

            /**
             * Encodes the specified RegisterOpponentGhostResponse message. Does not implicitly {@link v388.protobuf.RegisterOpponentGhostResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostResponse} message RegisterOpponentGhostResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterOpponentGhostResponse message, length delimited. Does not implicitly {@link v388.protobuf.RegisterOpponentGhostResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {v388.protobuf.IRegisterOpponentGhostResponse} message RegisterOpponentGhostResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterOpponentGhostResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.RegisterOpponentGhostResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterOpponentGhostResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterOpponentGhostResponse message.
             * @function verify
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterOpponentGhostResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterOpponentGhostResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             */
            RegisterOpponentGhostResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.RegisterOpponentGhostResponse)
                    return object;
                let message = new $root.v388.protobuf.RegisterOpponentGhostResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterOpponentGhostResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {v388.protobuf.RegisterOpponentGhostResponse} message RegisterOpponentGhostResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterOpponentGhostResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterOpponentGhostResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterOpponentGhostResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterOpponentGhostResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterOpponentGhostResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.RegisterOpponentGhostResponse";
            };

            return RegisterOpponentGhostResponse;
        })();

        protobuf.CheckTeamNameRequest = (function() {

            /**
             * Properties of a CheckTeamNameRequest.
             * @memberof v388.protobuf
             * @interface ICheckTeamNameRequest
             * @property {string} teamName CheckTeamNameRequest teamName
             */

            /**
             * Constructs a new CheckTeamNameRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a CheckTeamNameRequest.
             * @implements ICheckTeamNameRequest
             * @constructor
             * @param {v388.protobuf.ICheckTeamNameRequest=} [properties] Properties to set
             */
            function CheckTeamNameRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckTeamNameRequest teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @instance
             */
            CheckTeamNameRequest.prototype.teamName = "";

            /**
             * Creates a new CheckTeamNameRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {v388.protobuf.ICheckTeamNameRequest=} [properties] Properties to set
             * @returns {v388.protobuf.CheckTeamNameRequest} CheckTeamNameRequest instance
             */
            CheckTeamNameRequest.create = function create(properties) {
                return new CheckTeamNameRequest(properties);
            };

            /**
             * Encodes the specified CheckTeamNameRequest message. Does not implicitly {@link v388.protobuf.CheckTeamNameRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {v388.protobuf.ICheckTeamNameRequest} message CheckTeamNameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckTeamNameRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.teamName);
                return writer;
            };

            /**
             * Encodes the specified CheckTeamNameRequest message, length delimited. Does not implicitly {@link v388.protobuf.CheckTeamNameRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {v388.protobuf.ICheckTeamNameRequest} message CheckTeamNameRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckTeamNameRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckTeamNameRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CheckTeamNameRequest} CheckTeamNameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckTeamNameRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CheckTeamNameRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.teamName = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("teamName"))
                    throw $util.ProtocolError("missing required 'teamName'", { instance: message });
                return message;
            };

            /**
             * Decodes a CheckTeamNameRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CheckTeamNameRequest} CheckTeamNameRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckTeamNameRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckTeamNameRequest message.
             * @function verify
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckTeamNameRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.teamName))
                    return "teamName: string expected";
                return null;
            };

            /**
             * Creates a CheckTeamNameRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CheckTeamNameRequest} CheckTeamNameRequest
             */
            CheckTeamNameRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CheckTeamNameRequest)
                    return object;
                let message = new $root.v388.protobuf.CheckTeamNameRequest();
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                return message;
            };

            /**
             * Creates a plain object from a CheckTeamNameRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {v388.protobuf.CheckTeamNameRequest} message CheckTeamNameRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckTeamNameRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.teamName = "";
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                return object;
            };

            /**
             * Converts this CheckTeamNameRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckTeamNameRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CheckTeamNameRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.CheckTeamNameRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CheckTeamNameRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CheckTeamNameRequest";
            };

            return CheckTeamNameRequest;
        })();

        protobuf.CheckTeamNameResponse = (function() {

            /**
             * Properties of a CheckTeamNameResponse.
             * @memberof v388.protobuf
             * @interface ICheckTeamNameResponse
             * @property {v388.protobuf.ErrorCode} error CheckTeamNameResponse error
             */

            /**
             * Constructs a new CheckTeamNameResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a CheckTeamNameResponse.
             * @implements ICheckTeamNameResponse
             * @constructor
             * @param {v388.protobuf.ICheckTeamNameResponse=} [properties] Properties to set
             */
            function CheckTeamNameResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckTeamNameResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @instance
             */
            CheckTeamNameResponse.prototype.error = 0;

            /**
             * Creates a new CheckTeamNameResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {v388.protobuf.ICheckTeamNameResponse=} [properties] Properties to set
             * @returns {v388.protobuf.CheckTeamNameResponse} CheckTeamNameResponse instance
             */
            CheckTeamNameResponse.create = function create(properties) {
                return new CheckTeamNameResponse(properties);
            };

            /**
             * Encodes the specified CheckTeamNameResponse message. Does not implicitly {@link v388.protobuf.CheckTeamNameResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {v388.protobuf.ICheckTeamNameResponse} message CheckTeamNameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckTeamNameResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified CheckTeamNameResponse message, length delimited. Does not implicitly {@link v388.protobuf.CheckTeamNameResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {v388.protobuf.ICheckTeamNameResponse} message CheckTeamNameResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckTeamNameResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckTeamNameResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CheckTeamNameResponse} CheckTeamNameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckTeamNameResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CheckTeamNameResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a CheckTeamNameResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CheckTeamNameResponse} CheckTeamNameResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckTeamNameResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckTeamNameResponse message.
             * @function verify
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckTeamNameResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a CheckTeamNameResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CheckTeamNameResponse} CheckTeamNameResponse
             */
            CheckTeamNameResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CheckTeamNameResponse)
                    return object;
                let message = new $root.v388.protobuf.CheckTeamNameResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckTeamNameResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {v388.protobuf.CheckTeamNameResponse} message CheckTeamNameResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckTeamNameResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this CheckTeamNameResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckTeamNameResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CheckTeamNameResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.CheckTeamNameResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CheckTeamNameResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CheckTeamNameResponse";
            };

            return CheckTeamNameResponse;
        })();

        protobuf.CreateTeamRequest = (function() {

            /**
             * Properties of a CreateTeamRequest.
             * @memberof v388.protobuf
             * @interface ICreateTeamRequest
             * @property {number} userId CreateTeamRequest userId
             * @property {string} teamName CreateTeamRequest teamName
             * @property {number} timestamp CreateTeamRequest timestamp
             */

            /**
             * Constructs a new CreateTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateTeamRequest.
             * @implements ICreateTeamRequest
             * @constructor
             * @param {v388.protobuf.ICreateTeamRequest=} [properties] Properties to set
             */
            function CreateTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateTeamRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.CreateTeamRequest
             * @instance
             */
            CreateTeamRequest.prototype.userId = 0;

            /**
             * CreateTeamRequest teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.CreateTeamRequest
             * @instance
             */
            CreateTeamRequest.prototype.teamName = "";

            /**
             * CreateTeamRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.CreateTeamRequest
             * @instance
             */
            CreateTeamRequest.prototype.timestamp = 0;

            /**
             * Creates a new CreateTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {v388.protobuf.ICreateTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.CreateTeamRequest} CreateTeamRequest instance
             */
            CreateTeamRequest.create = function create(properties) {
                return new CreateTeamRequest(properties);
            };

            /**
             * Encodes the specified CreateTeamRequest message. Does not implicitly {@link v388.protobuf.CreateTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {v388.protobuf.ICreateTeamRequest} message CreateTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamName);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified CreateTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.CreateTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {v388.protobuf.ICreateTeamRequest} message CreateTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateTeamRequest} CreateTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamName = reader.string();
                            break;
                        }
                    case 3: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("teamName"))
                    throw $util.ProtocolError("missing required 'teamName'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateTeamRequest} CreateTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isString(message.teamName))
                    return "teamName: string expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a CreateTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateTeamRequest} CreateTeamRequest
             */
            CreateTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.CreateTeamRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {v388.protobuf.CreateTeamRequest} message CreateTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.teamName = "";
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this CreateTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateTeamRequest";
            };

            return CreateTeamRequest;
        })();

        protobuf.CreateTeamResponse = (function() {

            /**
             * Properties of a CreateTeamResponse.
             * @memberof v388.protobuf
             * @interface ICreateTeamResponse
             * @property {v388.protobuf.ErrorCode} error CreateTeamResponse error
             */

            /**
             * Constructs a new CreateTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a CreateTeamResponse.
             * @implements ICreateTeamResponse
             * @constructor
             * @param {v388.protobuf.ICreateTeamResponse=} [properties] Properties to set
             */
            function CreateTeamResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.CreateTeamResponse
             * @instance
             */
            CreateTeamResponse.prototype.error = 0;

            /**
             * Creates a new CreateTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {v388.protobuf.ICreateTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.CreateTeamResponse} CreateTeamResponse instance
             */
            CreateTeamResponse.create = function create(properties) {
                return new CreateTeamResponse(properties);
            };

            /**
             * Encodes the specified CreateTeamResponse message. Does not implicitly {@link v388.protobuf.CreateTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {v388.protobuf.ICreateTeamResponse} message CreateTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified CreateTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.CreateTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {v388.protobuf.ICreateTeamResponse} message CreateTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CreateTeamResponse} CreateTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CreateTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CreateTeamResponse} CreateTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a CreateTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CreateTeamResponse} CreateTeamResponse
             */
            CreateTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CreateTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.CreateTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a CreateTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {v388.protobuf.CreateTeamResponse} message CreateTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this CreateTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CreateTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.CreateTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CreateTeamResponse";
            };

            return CreateTeamResponse;
        })();

        protobuf.SearchTeamRequest = (function() {

            /**
             * Properties of a SearchTeamRequest.
             * @memberof v388.protobuf
             * @interface ISearchTeamRequest
             * @property {string|null} [name] SearchTeamRequest name
             * @property {string|null} [placeId] SearchTeamRequest placeId
             */

            /**
             * Constructs a new SearchTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SearchTeamRequest.
             * @implements ISearchTeamRequest
             * @constructor
             * @param {v388.protobuf.ISearchTeamRequest=} [properties] Properties to set
             */
            function SearchTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchTeamRequest name.
             * @member {string} name
             * @memberof v388.protobuf.SearchTeamRequest
             * @instance
             */
            SearchTeamRequest.prototype.name = "";

            /**
             * SearchTeamRequest placeId.
             * @member {string} placeId
             * @memberof v388.protobuf.SearchTeamRequest
             * @instance
             */
            SearchTeamRequest.prototype.placeId = "";

            /**
             * Creates a new SearchTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {v388.protobuf.ISearchTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SearchTeamRequest} SearchTeamRequest instance
             */
            SearchTeamRequest.create = function create(properties) {
                return new SearchTeamRequest(properties);
            };

            /**
             * Encodes the specified SearchTeamRequest message. Does not implicitly {@link v388.protobuf.SearchTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {v388.protobuf.ISearchTeamRequest} message SearchTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.placeId != null && Object.hasOwnProperty.call(message, "placeId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.placeId);
                return writer;
            };

            /**
             * Encodes the specified SearchTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.SearchTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {v388.protobuf.ISearchTeamRequest} message SearchTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SearchTeamRequest} SearchTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SearchTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.placeId = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SearchTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SearchTeamRequest} SearchTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                return null;
            };

            /**
             * Creates a SearchTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SearchTeamRequest} SearchTeamRequest
             */
            SearchTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SearchTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.SearchTeamRequest();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                return message;
            };

            /**
             * Creates a plain object from a SearchTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {v388.protobuf.SearchTeamRequest} message SearchTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.placeId = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                return object;
            };

            /**
             * Converts this SearchTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SearchTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SearchTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SearchTeamRequest";
            };

            return SearchTeamRequest;
        })();

        protobuf.SearchTeamResponse = (function() {

            /**
             * Properties of a SearchTeamResponse.
             * @memberof v388.protobuf
             * @interface ISearchTeamResponse
             * @property {v388.protobuf.ErrorCode} error SearchTeamResponse error
             * @property {Array.<v388.protobuf.ITeam>|null} [teams] SearchTeamResponse teams
             * @property {v388.protobuf.ITeam|null} [nameMatchedTeam] SearchTeamResponse nameMatchedTeam
             */

            /**
             * Constructs a new SearchTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SearchTeamResponse.
             * @implements ISearchTeamResponse
             * @constructor
             * @param {v388.protobuf.ISearchTeamResponse=} [properties] Properties to set
             */
            function SearchTeamResponse(properties) {
                this.teams = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SearchTeamResponse
             * @instance
             */
            SearchTeamResponse.prototype.error = 0;

            /**
             * SearchTeamResponse teams.
             * @member {Array.<v388.protobuf.ITeam>} teams
             * @memberof v388.protobuf.SearchTeamResponse
             * @instance
             */
            SearchTeamResponse.prototype.teams = $util.emptyArray;

            /**
             * SearchTeamResponse nameMatchedTeam.
             * @member {v388.protobuf.ITeam|null|undefined} nameMatchedTeam
             * @memberof v388.protobuf.SearchTeamResponse
             * @instance
             */
            SearchTeamResponse.prototype.nameMatchedTeam = null;

            /**
             * Creates a new SearchTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {v388.protobuf.ISearchTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SearchTeamResponse} SearchTeamResponse instance
             */
            SearchTeamResponse.create = function create(properties) {
                return new SearchTeamResponse(properties);
            };

            /**
             * Encodes the specified SearchTeamResponse message. Does not implicitly {@link v388.protobuf.SearchTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {v388.protobuf.ISearchTeamResponse} message SearchTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.teams != null && message.teams.length)
                    for (let i = 0; i < message.teams.length; ++i)
                        $root.v388.protobuf.Team.encode(message.teams[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nameMatchedTeam != null && Object.hasOwnProperty.call(message, "nameMatchedTeam"))
                    $root.v388.protobuf.Team.encode(message.nameMatchedTeam, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SearchTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.SearchTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {v388.protobuf.ISearchTeamResponse} message SearchTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SearchTeamResponse} SearchTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SearchTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.teams && message.teams.length))
                                message.teams = [];
                            message.teams.push($root.v388.protobuf.Team.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.nameMatchedTeam = $root.v388.protobuf.Team.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SearchTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SearchTeamResponse} SearchTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.teams != null && message.hasOwnProperty("teams")) {
                    if (!Array.isArray(message.teams))
                        return "teams: array expected";
                    for (let i = 0; i < message.teams.length; ++i) {
                        let error = $root.v388.protobuf.Team.verify(message.teams[i]);
                        if (error)
                            return "teams." + error;
                    }
                }
                if (message.nameMatchedTeam != null && message.hasOwnProperty("nameMatchedTeam")) {
                    let error = $root.v388.protobuf.Team.verify(message.nameMatchedTeam);
                    if (error)
                        return "nameMatchedTeam." + error;
                }
                return null;
            };

            /**
             * Creates a SearchTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SearchTeamResponse} SearchTeamResponse
             */
            SearchTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SearchTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.SearchTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.teams) {
                    if (!Array.isArray(object.teams))
                        throw TypeError(".v388.protobuf.SearchTeamResponse.teams: array expected");
                    message.teams = [];
                    for (let i = 0; i < object.teams.length; ++i) {
                        if (typeof object.teams[i] !== "object")
                            throw TypeError(".v388.protobuf.SearchTeamResponse.teams: object expected");
                        message.teams[i] = $root.v388.protobuf.Team.fromObject(object.teams[i]);
                    }
                }
                if (object.nameMatchedTeam != null) {
                    if (typeof object.nameMatchedTeam !== "object")
                        throw TypeError(".v388.protobuf.SearchTeamResponse.nameMatchedTeam: object expected");
                    message.nameMatchedTeam = $root.v388.protobuf.Team.fromObject(object.nameMatchedTeam);
                }
                return message;
            };

            /**
             * Creates a plain object from a SearchTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {v388.protobuf.SearchTeamResponse} message SearchTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.teams = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.nameMatchedTeam = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.teams && message.teams.length) {
                    object.teams = [];
                    for (let j = 0; j < message.teams.length; ++j)
                        object.teams[j] = $root.v388.protobuf.Team.toObject(message.teams[j], options);
                }
                if (message.nameMatchedTeam != null && message.hasOwnProperty("nameMatchedTeam"))
                    object.nameMatchedTeam = $root.v388.protobuf.Team.toObject(message.nameMatchedTeam, options);
                return object;
            };

            /**
             * Converts this SearchTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SearchTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SearchTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SearchTeamResponse";
            };

            return SearchTeamResponse;
        })();

        protobuf.JoinTeamRequest = (function() {

            /**
             * Properties of a JoinTeamRequest.
             * @memberof v388.protobuf
             * @interface IJoinTeamRequest
             * @property {number} userId JoinTeamRequest userId
             * @property {number} teamId JoinTeamRequest teamId
             */

            /**
             * Constructs a new JoinTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a JoinTeamRequest.
             * @implements IJoinTeamRequest
             * @constructor
             * @param {v388.protobuf.IJoinTeamRequest=} [properties] Properties to set
             */
            function JoinTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * JoinTeamRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.JoinTeamRequest
             * @instance
             */
            JoinTeamRequest.prototype.userId = 0;

            /**
             * JoinTeamRequest teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.JoinTeamRequest
             * @instance
             */
            JoinTeamRequest.prototype.teamId = 0;

            /**
             * Creates a new JoinTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {v388.protobuf.IJoinTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.JoinTeamRequest} JoinTeamRequest instance
             */
            JoinTeamRequest.create = function create(properties) {
                return new JoinTeamRequest(properties);
            };

            /**
             * Encodes the specified JoinTeamRequest message. Does not implicitly {@link v388.protobuf.JoinTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {v388.protobuf.IJoinTeamRequest} message JoinTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamId);
                return writer;
            };

            /**
             * Encodes the specified JoinTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.JoinTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {v388.protobuf.IJoinTeamRequest} message JoinTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a JoinTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.JoinTeamRequest} JoinTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.JoinTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("teamId"))
                    throw $util.ProtocolError("missing required 'teamId'", { instance: message });
                return message;
            };

            /**
             * Decodes a JoinTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.JoinTeamRequest} JoinTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a JoinTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JoinTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.teamId))
                    return "teamId: integer expected";
                return null;
            };

            /**
             * Creates a JoinTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.JoinTeamRequest} JoinTeamRequest
             */
            JoinTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.JoinTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.JoinTeamRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a JoinTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {v388.protobuf.JoinTeamRequest} message JoinTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JoinTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.teamId = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                return object;
            };

            /**
             * Converts this JoinTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.JoinTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JoinTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for JoinTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.JoinTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            JoinTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.JoinTeamRequest";
            };

            return JoinTeamRequest;
        })();

        protobuf.JoinTeamResponse = (function() {

            /**
             * Properties of a JoinTeamResponse.
             * @memberof v388.protobuf
             * @interface IJoinTeamResponse
             * @property {v388.protobuf.ErrorCode} error JoinTeamResponse error
             */

            /**
             * Constructs a new JoinTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a JoinTeamResponse.
             * @implements IJoinTeamResponse
             * @constructor
             * @param {v388.protobuf.IJoinTeamResponse=} [properties] Properties to set
             */
            function JoinTeamResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * JoinTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.JoinTeamResponse
             * @instance
             */
            JoinTeamResponse.prototype.error = 0;

            /**
             * Creates a new JoinTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {v388.protobuf.IJoinTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.JoinTeamResponse} JoinTeamResponse instance
             */
            JoinTeamResponse.create = function create(properties) {
                return new JoinTeamResponse(properties);
            };

            /**
             * Encodes the specified JoinTeamResponse message. Does not implicitly {@link v388.protobuf.JoinTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {v388.protobuf.IJoinTeamResponse} message JoinTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified JoinTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.JoinTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {v388.protobuf.IJoinTeamResponse} message JoinTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JoinTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a JoinTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.JoinTeamResponse} JoinTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.JoinTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a JoinTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.JoinTeamResponse} JoinTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JoinTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a JoinTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JoinTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a JoinTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.JoinTeamResponse} JoinTeamResponse
             */
            JoinTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.JoinTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.JoinTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a JoinTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {v388.protobuf.JoinTeamResponse} message JoinTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JoinTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this JoinTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.JoinTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JoinTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for JoinTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.JoinTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            JoinTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.JoinTeamResponse";
            };

            return JoinTeamResponse;
        })();

        protobuf.ApproveTeamApplicantsRequest = (function() {

            /**
             * Properties of an ApproveTeamApplicantsRequest.
             * @memberof v388.protobuf
             * @interface IApproveTeamApplicantsRequest
             * @property {number} userId ApproveTeamApplicantsRequest userId
             * @property {Array.<number>|null} [approvedUsers] ApproveTeamApplicantsRequest approvedUsers
             * @property {Array.<number>|null} [rejectedUsers] ApproveTeamApplicantsRequest rejectedUsers
             */

            /**
             * Constructs a new ApproveTeamApplicantsRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an ApproveTeamApplicantsRequest.
             * @implements IApproveTeamApplicantsRequest
             * @constructor
             * @param {v388.protobuf.IApproveTeamApplicantsRequest=} [properties] Properties to set
             */
            function ApproveTeamApplicantsRequest(properties) {
                this.approvedUsers = [];
                this.rejectedUsers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApproveTeamApplicantsRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @instance
             */
            ApproveTeamApplicantsRequest.prototype.userId = 0;

            /**
             * ApproveTeamApplicantsRequest approvedUsers.
             * @member {Array.<number>} approvedUsers
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @instance
             */
            ApproveTeamApplicantsRequest.prototype.approvedUsers = $util.emptyArray;

            /**
             * ApproveTeamApplicantsRequest rejectedUsers.
             * @member {Array.<number>} rejectedUsers
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @instance
             */
            ApproveTeamApplicantsRequest.prototype.rejectedUsers = $util.emptyArray;

            /**
             * Creates a new ApproveTeamApplicantsRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsRequest=} [properties] Properties to set
             * @returns {v388.protobuf.ApproveTeamApplicantsRequest} ApproveTeamApplicantsRequest instance
             */
            ApproveTeamApplicantsRequest.create = function create(properties) {
                return new ApproveTeamApplicantsRequest(properties);
            };

            /**
             * Encodes the specified ApproveTeamApplicantsRequest message. Does not implicitly {@link v388.protobuf.ApproveTeamApplicantsRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsRequest} message ApproveTeamApplicantsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApproveTeamApplicantsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.approvedUsers != null && message.approvedUsers.length)
                    for (let i = 0; i < message.approvedUsers.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.approvedUsers[i]);
                if (message.rejectedUsers != null && message.rejectedUsers.length)
                    for (let i = 0; i < message.rejectedUsers.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rejectedUsers[i]);
                return writer;
            };

            /**
             * Encodes the specified ApproveTeamApplicantsRequest message, length delimited. Does not implicitly {@link v388.protobuf.ApproveTeamApplicantsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsRequest} message ApproveTeamApplicantsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApproveTeamApplicantsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApproveTeamApplicantsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.ApproveTeamApplicantsRequest} ApproveTeamApplicantsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApproveTeamApplicantsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ApproveTeamApplicantsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.approvedUsers && message.approvedUsers.length))
                                message.approvedUsers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.approvedUsers.push(reader.uint32());
                            } else
                                message.approvedUsers.push(reader.uint32());
                            break;
                        }
                    case 3: {
                            if (!(message.rejectedUsers && message.rejectedUsers.length))
                                message.rejectedUsers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.rejectedUsers.push(reader.uint32());
                            } else
                                message.rejectedUsers.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes an ApproveTeamApplicantsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.ApproveTeamApplicantsRequest} ApproveTeamApplicantsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApproveTeamApplicantsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApproveTeamApplicantsRequest message.
             * @function verify
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApproveTeamApplicantsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (message.approvedUsers != null && message.hasOwnProperty("approvedUsers")) {
                    if (!Array.isArray(message.approvedUsers))
                        return "approvedUsers: array expected";
                    for (let i = 0; i < message.approvedUsers.length; ++i)
                        if (!$util.isInteger(message.approvedUsers[i]))
                            return "approvedUsers: integer[] expected";
                }
                if (message.rejectedUsers != null && message.hasOwnProperty("rejectedUsers")) {
                    if (!Array.isArray(message.rejectedUsers))
                        return "rejectedUsers: array expected";
                    for (let i = 0; i < message.rejectedUsers.length; ++i)
                        if (!$util.isInteger(message.rejectedUsers[i]))
                            return "rejectedUsers: integer[] expected";
                }
                return null;
            };

            /**
             * Creates an ApproveTeamApplicantsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.ApproveTeamApplicantsRequest} ApproveTeamApplicantsRequest
             */
            ApproveTeamApplicantsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.ApproveTeamApplicantsRequest)
                    return object;
                let message = new $root.v388.protobuf.ApproveTeamApplicantsRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.approvedUsers) {
                    if (!Array.isArray(object.approvedUsers))
                        throw TypeError(".v388.protobuf.ApproveTeamApplicantsRequest.approvedUsers: array expected");
                    message.approvedUsers = [];
                    for (let i = 0; i < object.approvedUsers.length; ++i)
                        message.approvedUsers[i] = object.approvedUsers[i] >>> 0;
                }
                if (object.rejectedUsers) {
                    if (!Array.isArray(object.rejectedUsers))
                        throw TypeError(".v388.protobuf.ApproveTeamApplicantsRequest.rejectedUsers: array expected");
                    message.rejectedUsers = [];
                    for (let i = 0; i < object.rejectedUsers.length; ++i)
                        message.rejectedUsers[i] = object.rejectedUsers[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from an ApproveTeamApplicantsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.ApproveTeamApplicantsRequest} message ApproveTeamApplicantsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApproveTeamApplicantsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.approvedUsers = [];
                    object.rejectedUsers = [];
                }
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.approvedUsers && message.approvedUsers.length) {
                    object.approvedUsers = [];
                    for (let j = 0; j < message.approvedUsers.length; ++j)
                        object.approvedUsers[j] = message.approvedUsers[j];
                }
                if (message.rejectedUsers && message.rejectedUsers.length) {
                    object.rejectedUsers = [];
                    for (let j = 0; j < message.rejectedUsers.length; ++j)
                        object.rejectedUsers[j] = message.rejectedUsers[j];
                }
                return object;
            };

            /**
             * Converts this ApproveTeamApplicantsRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApproveTeamApplicantsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ApproveTeamApplicantsRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.ApproveTeamApplicantsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ApproveTeamApplicantsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.ApproveTeamApplicantsRequest";
            };

            return ApproveTeamApplicantsRequest;
        })();

        protobuf.ApproveTeamApplicantsResponse = (function() {

            /**
             * Properties of an ApproveTeamApplicantsResponse.
             * @memberof v388.protobuf
             * @interface IApproveTeamApplicantsResponse
             * @property {v388.protobuf.ErrorCode} error ApproveTeamApplicantsResponse error
             * @property {number} numOfMembers ApproveTeamApplicantsResponse numOfMembers
             * @property {number} numOfMemberCars ApproveTeamApplicantsResponse numOfMemberCars
             * @property {number} numOfApplicants ApproveTeamApplicantsResponse numOfApplicants
             */

            /**
             * Constructs a new ApproveTeamApplicantsResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an ApproveTeamApplicantsResponse.
             * @implements IApproveTeamApplicantsResponse
             * @constructor
             * @param {v388.protobuf.IApproveTeamApplicantsResponse=} [properties] Properties to set
             */
            function ApproveTeamApplicantsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApproveTeamApplicantsResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @instance
             */
            ApproveTeamApplicantsResponse.prototype.error = 0;

            /**
             * ApproveTeamApplicantsResponse numOfMembers.
             * @member {number} numOfMembers
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @instance
             */
            ApproveTeamApplicantsResponse.prototype.numOfMembers = 0;

            /**
             * ApproveTeamApplicantsResponse numOfMemberCars.
             * @member {number} numOfMemberCars
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @instance
             */
            ApproveTeamApplicantsResponse.prototype.numOfMemberCars = 0;

            /**
             * ApproveTeamApplicantsResponse numOfApplicants.
             * @member {number} numOfApplicants
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @instance
             */
            ApproveTeamApplicantsResponse.prototype.numOfApplicants = 0;

            /**
             * Creates a new ApproveTeamApplicantsResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsResponse=} [properties] Properties to set
             * @returns {v388.protobuf.ApproveTeamApplicantsResponse} ApproveTeamApplicantsResponse instance
             */
            ApproveTeamApplicantsResponse.create = function create(properties) {
                return new ApproveTeamApplicantsResponse(properties);
            };

            /**
             * Encodes the specified ApproveTeamApplicantsResponse message. Does not implicitly {@link v388.protobuf.ApproveTeamApplicantsResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsResponse} message ApproveTeamApplicantsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApproveTeamApplicantsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.numOfMembers);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfMemberCars);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfApplicants);
                return writer;
            };

            /**
             * Encodes the specified ApproveTeamApplicantsResponse message, length delimited. Does not implicitly {@link v388.protobuf.ApproveTeamApplicantsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.IApproveTeamApplicantsResponse} message ApproveTeamApplicantsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApproveTeamApplicantsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApproveTeamApplicantsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.ApproveTeamApplicantsResponse} ApproveTeamApplicantsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApproveTeamApplicantsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ApproveTeamApplicantsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.numOfMembers = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.numOfMemberCars = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfApplicants = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfMembers"))
                    throw $util.ProtocolError("missing required 'numOfMembers'", { instance: message });
                if (!message.hasOwnProperty("numOfMemberCars"))
                    throw $util.ProtocolError("missing required 'numOfMemberCars'", { instance: message });
                if (!message.hasOwnProperty("numOfApplicants"))
                    throw $util.ProtocolError("missing required 'numOfApplicants'", { instance: message });
                return message;
            };

            /**
             * Decodes an ApproveTeamApplicantsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.ApproveTeamApplicantsResponse} ApproveTeamApplicantsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApproveTeamApplicantsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApproveTeamApplicantsResponse message.
             * @function verify
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApproveTeamApplicantsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.numOfMembers))
                    return "numOfMembers: integer expected";
                if (!$util.isInteger(message.numOfMemberCars))
                    return "numOfMemberCars: integer expected";
                if (!$util.isInteger(message.numOfApplicants))
                    return "numOfApplicants: integer expected";
                return null;
            };

            /**
             * Creates an ApproveTeamApplicantsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.ApproveTeamApplicantsResponse} ApproveTeamApplicantsResponse
             */
            ApproveTeamApplicantsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.ApproveTeamApplicantsResponse)
                    return object;
                let message = new $root.v388.protobuf.ApproveTeamApplicantsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.numOfMembers != null)
                    message.numOfMembers = object.numOfMembers >>> 0;
                if (object.numOfMemberCars != null)
                    message.numOfMemberCars = object.numOfMemberCars >>> 0;
                if (object.numOfApplicants != null)
                    message.numOfApplicants = object.numOfApplicants >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an ApproveTeamApplicantsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.ApproveTeamApplicantsResponse} message ApproveTeamApplicantsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApproveTeamApplicantsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.numOfMembers = 0;
                    object.numOfMemberCars = 0;
                    object.numOfApplicants = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.numOfMembers != null && message.hasOwnProperty("numOfMembers"))
                    object.numOfMembers = message.numOfMembers;
                if (message.numOfMemberCars != null && message.hasOwnProperty("numOfMemberCars"))
                    object.numOfMemberCars = message.numOfMemberCars;
                if (message.numOfApplicants != null && message.hasOwnProperty("numOfApplicants"))
                    object.numOfApplicants = message.numOfApplicants;
                return object;
            };

            /**
             * Converts this ApproveTeamApplicantsResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApproveTeamApplicantsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ApproveTeamApplicantsResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.ApproveTeamApplicantsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ApproveTeamApplicantsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.ApproveTeamApplicantsResponse";
            };

            return ApproveTeamApplicantsResponse;
        })();

        protobuf.LeaveTeamRequest = (function() {

            /**
             * Properties of a LeaveTeamRequest.
             * @memberof v388.protobuf
             * @interface ILeaveTeamRequest
             * @property {number} userId LeaveTeamRequest userId
             */

            /**
             * Constructs a new LeaveTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LeaveTeamRequest.
             * @implements ILeaveTeamRequest
             * @constructor
             * @param {v388.protobuf.ILeaveTeamRequest=} [properties] Properties to set
             */
            function LeaveTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LeaveTeamRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.LeaveTeamRequest
             * @instance
             */
            LeaveTeamRequest.prototype.userId = 0;

            /**
             * Creates a new LeaveTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {v388.protobuf.ILeaveTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LeaveTeamRequest} LeaveTeamRequest instance
             */
            LeaveTeamRequest.create = function create(properties) {
                return new LeaveTeamRequest(properties);
            };

            /**
             * Encodes the specified LeaveTeamRequest message. Does not implicitly {@link v388.protobuf.LeaveTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {v388.protobuf.ILeaveTeamRequest} message LeaveTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LeaveTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.LeaveTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {v388.protobuf.ILeaveTeamRequest} message LeaveTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LeaveTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LeaveTeamRequest} LeaveTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LeaveTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LeaveTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LeaveTeamRequest} LeaveTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LeaveTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LeaveTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LeaveTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LeaveTeamRequest} LeaveTeamRequest
             */
            LeaveTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LeaveTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.LeaveTeamRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LeaveTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {v388.protobuf.LeaveTeamRequest} message LeaveTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LeaveTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LeaveTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LeaveTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LeaveTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LeaveTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LeaveTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LeaveTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LeaveTeamRequest";
            };

            return LeaveTeamRequest;
        })();

        protobuf.LeaveTeamResponse = (function() {

            /**
             * Properties of a LeaveTeamResponse.
             * @memberof v388.protobuf
             * @interface ILeaveTeamResponse
             * @property {v388.protobuf.ErrorCode} error LeaveTeamResponse error
             */

            /**
             * Constructs a new LeaveTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LeaveTeamResponse.
             * @implements ILeaveTeamResponse
             * @constructor
             * @param {v388.protobuf.ILeaveTeamResponse=} [properties] Properties to set
             */
            function LeaveTeamResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LeaveTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LeaveTeamResponse
             * @instance
             */
            LeaveTeamResponse.prototype.error = 0;

            /**
             * Creates a new LeaveTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {v388.protobuf.ILeaveTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LeaveTeamResponse} LeaveTeamResponse instance
             */
            LeaveTeamResponse.create = function create(properties) {
                return new LeaveTeamResponse(properties);
            };

            /**
             * Encodes the specified LeaveTeamResponse message. Does not implicitly {@link v388.protobuf.LeaveTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {v388.protobuf.ILeaveTeamResponse} message LeaveTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified LeaveTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.LeaveTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {v388.protobuf.ILeaveTeamResponse} message LeaveTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LeaveTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LeaveTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LeaveTeamResponse} LeaveTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LeaveTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LeaveTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LeaveTeamResponse} LeaveTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LeaveTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LeaveTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LeaveTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a LeaveTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LeaveTeamResponse} LeaveTeamResponse
             */
            LeaveTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LeaveTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.LeaveTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a LeaveTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {v388.protobuf.LeaveTeamResponse} message LeaveTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LeaveTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this LeaveTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LeaveTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LeaveTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LeaveTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LeaveTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LeaveTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LeaveTeamResponse";
            };

            return LeaveTeamResponse;
        })();

        protobuf.DissolveTeamRequest = (function() {

            /**
             * Properties of a DissolveTeamRequest.
             * @memberof v388.protobuf
             * @interface IDissolveTeamRequest
             * @property {number} userId DissolveTeamRequest userId
             */

            /**
             * Constructs a new DissolveTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a DissolveTeamRequest.
             * @implements IDissolveTeamRequest
             * @constructor
             * @param {v388.protobuf.IDissolveTeamRequest=} [properties] Properties to set
             */
            function DissolveTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DissolveTeamRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.DissolveTeamRequest
             * @instance
             */
            DissolveTeamRequest.prototype.userId = 0;

            /**
             * Creates a new DissolveTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {v388.protobuf.IDissolveTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.DissolveTeamRequest} DissolveTeamRequest instance
             */
            DissolveTeamRequest.create = function create(properties) {
                return new DissolveTeamRequest(properties);
            };

            /**
             * Encodes the specified DissolveTeamRequest message. Does not implicitly {@link v388.protobuf.DissolveTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {v388.protobuf.IDissolveTeamRequest} message DissolveTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DissolveTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified DissolveTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.DissolveTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {v388.protobuf.IDissolveTeamRequest} message DissolveTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DissolveTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DissolveTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.DissolveTeamRequest} DissolveTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DissolveTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.DissolveTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a DissolveTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.DissolveTeamRequest} DissolveTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DissolveTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DissolveTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DissolveTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a DissolveTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.DissolveTeamRequest} DissolveTeamRequest
             */
            DissolveTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.DissolveTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.DissolveTeamRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a DissolveTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {v388.protobuf.DissolveTeamRequest} message DissolveTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DissolveTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this DissolveTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.DissolveTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DissolveTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DissolveTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.DissolveTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DissolveTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.DissolveTeamRequest";
            };

            return DissolveTeamRequest;
        })();

        protobuf.DissolveTeamResponse = (function() {

            /**
             * Properties of a DissolveTeamResponse.
             * @memberof v388.protobuf
             * @interface IDissolveTeamResponse
             * @property {v388.protobuf.ErrorCode} error DissolveTeamResponse error
             */

            /**
             * Constructs a new DissolveTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a DissolveTeamResponse.
             * @implements IDissolveTeamResponse
             * @constructor
             * @param {v388.protobuf.IDissolveTeamResponse=} [properties] Properties to set
             */
            function DissolveTeamResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DissolveTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.DissolveTeamResponse
             * @instance
             */
            DissolveTeamResponse.prototype.error = 0;

            /**
             * Creates a new DissolveTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {v388.protobuf.IDissolveTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.DissolveTeamResponse} DissolveTeamResponse instance
             */
            DissolveTeamResponse.create = function create(properties) {
                return new DissolveTeamResponse(properties);
            };

            /**
             * Encodes the specified DissolveTeamResponse message. Does not implicitly {@link v388.protobuf.DissolveTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {v388.protobuf.IDissolveTeamResponse} message DissolveTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DissolveTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified DissolveTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.DissolveTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {v388.protobuf.IDissolveTeamResponse} message DissolveTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DissolveTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DissolveTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.DissolveTeamResponse} DissolveTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DissolveTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.DissolveTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a DissolveTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.DissolveTeamResponse} DissolveTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DissolveTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DissolveTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DissolveTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a DissolveTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.DissolveTeamResponse} DissolveTeamResponse
             */
            DissolveTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.DissolveTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.DissolveTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a DissolveTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {v388.protobuf.DissolveTeamResponse} message DissolveTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DissolveTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this DissolveTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.DissolveTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DissolveTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DissolveTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.DissolveTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DissolveTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.DissolveTeamResponse";
            };

            return DissolveTeamResponse;
        })();

        protobuf.LoadTeamMembersRequest = (function() {

            /**
             * Properties of a LoadTeamMembersRequest.
             * @memberof v388.protobuf
             * @interface ILoadTeamMembersRequest
             * @property {number} teamId LoadTeamMembersRequest teamId
             */

            /**
             * Constructs a new LoadTeamMembersRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamMembersRequest.
             * @implements ILoadTeamMembersRequest
             * @constructor
             * @param {v388.protobuf.ILoadTeamMembersRequest=} [properties] Properties to set
             */
            function LoadTeamMembersRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamMembersRequest teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @instance
             */
            LoadTeamMembersRequest.prototype.teamId = 0;

            /**
             * Creates a new LoadTeamMembersRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {v388.protobuf.ILoadTeamMembersRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamMembersRequest} LoadTeamMembersRequest instance
             */
            LoadTeamMembersRequest.create = function create(properties) {
                return new LoadTeamMembersRequest(properties);
            };

            /**
             * Encodes the specified LoadTeamMembersRequest message. Does not implicitly {@link v388.protobuf.LoadTeamMembersRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {v388.protobuf.ILoadTeamMembersRequest} message LoadTeamMembersRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamMembersRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamId);
                return writer;
            };

            /**
             * Encodes the specified LoadTeamMembersRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamMembersRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {v388.protobuf.ILoadTeamMembersRequest} message LoadTeamMembersRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamMembersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamMembersRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamMembersRequest} LoadTeamMembersRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamMembersRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamMembersRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("teamId"))
                    throw $util.ProtocolError("missing required 'teamId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamMembersRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamMembersRequest} LoadTeamMembersRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamMembersRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamMembersRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamMembersRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.teamId))
                    return "teamId: integer expected";
                return null;
            };

            /**
             * Creates a LoadTeamMembersRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamMembersRequest} LoadTeamMembersRequest
             */
            LoadTeamMembersRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamMembersRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamMembersRequest();
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamMembersRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {v388.protobuf.LoadTeamMembersRequest} message LoadTeamMembersRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamMembersRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.teamId = 0;
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                return object;
            };

            /**
             * Converts this LoadTeamMembersRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamMembersRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamMembersRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamMembersRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamMembersRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamMembersRequest";
            };

            return LoadTeamMembersRequest;
        })();

        protobuf.LoadTeamMembersResponse = (function() {

            /**
             * Properties of a LoadTeamMembersResponse.
             * @memberof v388.protobuf
             * @interface ILoadTeamMembersResponse
             * @property {v388.protobuf.ErrorCode} error LoadTeamMembersResponse error
             * @property {v388.protobuf.ITeam|null} [team] LoadTeamMembersResponse team
             * @property {Array.<v388.protobuf.ITeamMember>|null} [members] LoadTeamMembersResponse members
             */

            /**
             * Constructs a new LoadTeamMembersResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamMembersResponse.
             * @implements ILoadTeamMembersResponse
             * @constructor
             * @param {v388.protobuf.ILoadTeamMembersResponse=} [properties] Properties to set
             */
            function LoadTeamMembersResponse(properties) {
                this.members = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamMembersResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @instance
             */
            LoadTeamMembersResponse.prototype.error = 0;

            /**
             * LoadTeamMembersResponse team.
             * @member {v388.protobuf.ITeam|null|undefined} team
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @instance
             */
            LoadTeamMembersResponse.prototype.team = null;

            /**
             * LoadTeamMembersResponse members.
             * @member {Array.<v388.protobuf.ITeamMember>} members
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @instance
             */
            LoadTeamMembersResponse.prototype.members = $util.emptyArray;

            /**
             * Creates a new LoadTeamMembersResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {v388.protobuf.ILoadTeamMembersResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamMembersResponse} LoadTeamMembersResponse instance
             */
            LoadTeamMembersResponse.create = function create(properties) {
                return new LoadTeamMembersResponse(properties);
            };

            /**
             * Encodes the specified LoadTeamMembersResponse message. Does not implicitly {@link v388.protobuf.LoadTeamMembersResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {v388.protobuf.ILoadTeamMembersResponse} message LoadTeamMembersResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamMembersResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.team != null && Object.hasOwnProperty.call(message, "team"))
                    $root.v388.protobuf.Team.encode(message.team, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.members != null && message.members.length)
                    for (let i = 0; i < message.members.length; ++i)
                        $root.v388.protobuf.TeamMember.encode(message.members[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadTeamMembersResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamMembersResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {v388.protobuf.ILoadTeamMembersResponse} message LoadTeamMembersResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamMembersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamMembersResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamMembersResponse} LoadTeamMembersResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamMembersResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamMembersResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.team = $root.v388.protobuf.Team.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            if (!(message.members && message.members.length))
                                message.members = [];
                            message.members.push($root.v388.protobuf.TeamMember.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamMembersResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamMembersResponse} LoadTeamMembersResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamMembersResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamMembersResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamMembersResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.team != null && message.hasOwnProperty("team")) {
                    let error = $root.v388.protobuf.Team.verify(message.team);
                    if (error)
                        return "team." + error;
                }
                if (message.members != null && message.hasOwnProperty("members")) {
                    if (!Array.isArray(message.members))
                        return "members: array expected";
                    for (let i = 0; i < message.members.length; ++i) {
                        let error = $root.v388.protobuf.TeamMember.verify(message.members[i]);
                        if (error)
                            return "members." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadTeamMembersResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamMembersResponse} LoadTeamMembersResponse
             */
            LoadTeamMembersResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamMembersResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamMembersResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.team != null) {
                    if (typeof object.team !== "object")
                        throw TypeError(".v388.protobuf.LoadTeamMembersResponse.team: object expected");
                    message.team = $root.v388.protobuf.Team.fromObject(object.team);
                }
                if (object.members) {
                    if (!Array.isArray(object.members))
                        throw TypeError(".v388.protobuf.LoadTeamMembersResponse.members: array expected");
                    message.members = [];
                    for (let i = 0; i < object.members.length; ++i) {
                        if (typeof object.members[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadTeamMembersResponse.members: object expected");
                        message.members[i] = $root.v388.protobuf.TeamMember.fromObject(object.members[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamMembersResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {v388.protobuf.LoadTeamMembersResponse} message LoadTeamMembersResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamMembersResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.members = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.team = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.team != null && message.hasOwnProperty("team"))
                    object.team = $root.v388.protobuf.Team.toObject(message.team, options);
                if (message.members && message.members.length) {
                    object.members = [];
                    for (let j = 0; j < message.members.length; ++j)
                        object.members[j] = $root.v388.protobuf.TeamMember.toObject(message.members[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadTeamMembersResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamMembersResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamMembersResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamMembersResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamMembersResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamMembersResponse";
            };

            return LoadTeamMembersResponse;
        })();

        protobuf.LoadTeamApplicantsRequest = (function() {

            /**
             * Properties of a LoadTeamApplicantsRequest.
             * @memberof v388.protobuf
             * @interface ILoadTeamApplicantsRequest
             * @property {number} teamId LoadTeamApplicantsRequest teamId
             */

            /**
             * Constructs a new LoadTeamApplicantsRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamApplicantsRequest.
             * @implements ILoadTeamApplicantsRequest
             * @constructor
             * @param {v388.protobuf.ILoadTeamApplicantsRequest=} [properties] Properties to set
             */
            function LoadTeamApplicantsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamApplicantsRequest teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @instance
             */
            LoadTeamApplicantsRequest.prototype.teamId = 0;

            /**
             * Creates a new LoadTeamApplicantsRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamApplicantsRequest} LoadTeamApplicantsRequest instance
             */
            LoadTeamApplicantsRequest.create = function create(properties) {
                return new LoadTeamApplicantsRequest(properties);
            };

            /**
             * Encodes the specified LoadTeamApplicantsRequest message. Does not implicitly {@link v388.protobuf.LoadTeamApplicantsRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsRequest} message LoadTeamApplicantsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamApplicantsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamId);
                return writer;
            };

            /**
             * Encodes the specified LoadTeamApplicantsRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamApplicantsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsRequest} message LoadTeamApplicantsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamApplicantsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamApplicantsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamApplicantsRequest} LoadTeamApplicantsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamApplicantsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamApplicantsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("teamId"))
                    throw $util.ProtocolError("missing required 'teamId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamApplicantsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamApplicantsRequest} LoadTeamApplicantsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamApplicantsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamApplicantsRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamApplicantsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.teamId))
                    return "teamId: integer expected";
                return null;
            };

            /**
             * Creates a LoadTeamApplicantsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamApplicantsRequest} LoadTeamApplicantsRequest
             */
            LoadTeamApplicantsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamApplicantsRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamApplicantsRequest();
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamApplicantsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {v388.protobuf.LoadTeamApplicantsRequest} message LoadTeamApplicantsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamApplicantsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.teamId = 0;
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                return object;
            };

            /**
             * Converts this LoadTeamApplicantsRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamApplicantsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamApplicantsRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamApplicantsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamApplicantsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamApplicantsRequest";
            };

            return LoadTeamApplicantsRequest;
        })();

        protobuf.LoadTeamApplicantsResponse = (function() {

            /**
             * Properties of a LoadTeamApplicantsResponse.
             * @memberof v388.protobuf
             * @interface ILoadTeamApplicantsResponse
             * @property {v388.protobuf.ErrorCode} error LoadTeamApplicantsResponse error
             * @property {Array.<v388.protobuf.ITeamApplicant>|null} [applicants] LoadTeamApplicantsResponse applicants
             */

            /**
             * Constructs a new LoadTeamApplicantsResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadTeamApplicantsResponse.
             * @implements ILoadTeamApplicantsResponse
             * @constructor
             * @param {v388.protobuf.ILoadTeamApplicantsResponse=} [properties] Properties to set
             */
            function LoadTeamApplicantsResponse(properties) {
                this.applicants = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTeamApplicantsResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @instance
             */
            LoadTeamApplicantsResponse.prototype.error = 0;

            /**
             * LoadTeamApplicantsResponse applicants.
             * @member {Array.<v388.protobuf.ITeamApplicant>} applicants
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @instance
             */
            LoadTeamApplicantsResponse.prototype.applicants = $util.emptyArray;

            /**
             * Creates a new LoadTeamApplicantsResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadTeamApplicantsResponse} LoadTeamApplicantsResponse instance
             */
            LoadTeamApplicantsResponse.create = function create(properties) {
                return new LoadTeamApplicantsResponse(properties);
            };

            /**
             * Encodes the specified LoadTeamApplicantsResponse message. Does not implicitly {@link v388.protobuf.LoadTeamApplicantsResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsResponse} message LoadTeamApplicantsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamApplicantsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.applicants != null && message.applicants.length)
                    for (let i = 0; i < message.applicants.length; ++i)
                        $root.v388.protobuf.TeamApplicant.encode(message.applicants[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadTeamApplicantsResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadTeamApplicantsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.ILoadTeamApplicantsResponse} message LoadTeamApplicantsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTeamApplicantsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTeamApplicantsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadTeamApplicantsResponse} LoadTeamApplicantsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamApplicantsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadTeamApplicantsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.applicants && message.applicants.length))
                                message.applicants = [];
                            message.applicants.push($root.v388.protobuf.TeamApplicant.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTeamApplicantsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadTeamApplicantsResponse} LoadTeamApplicantsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTeamApplicantsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTeamApplicantsResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTeamApplicantsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.applicants != null && message.hasOwnProperty("applicants")) {
                    if (!Array.isArray(message.applicants))
                        return "applicants: array expected";
                    for (let i = 0; i < message.applicants.length; ++i) {
                        let error = $root.v388.protobuf.TeamApplicant.verify(message.applicants[i]);
                        if (error)
                            return "applicants." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadTeamApplicantsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadTeamApplicantsResponse} LoadTeamApplicantsResponse
             */
            LoadTeamApplicantsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadTeamApplicantsResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadTeamApplicantsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.applicants) {
                    if (!Array.isArray(object.applicants))
                        throw TypeError(".v388.protobuf.LoadTeamApplicantsResponse.applicants: array expected");
                    message.applicants = [];
                    for (let i = 0; i < object.applicants.length; ++i) {
                        if (typeof object.applicants[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadTeamApplicantsResponse.applicants: object expected");
                        message.applicants[i] = $root.v388.protobuf.TeamApplicant.fromObject(object.applicants[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadTeamApplicantsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {v388.protobuf.LoadTeamApplicantsResponse} message LoadTeamApplicantsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTeamApplicantsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.applicants = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.applicants && message.applicants.length) {
                    object.applicants = [];
                    for (let j = 0; j < message.applicants.length; ++j)
                        object.applicants[j] = $root.v388.protobuf.TeamApplicant.toObject(message.applicants[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadTeamApplicantsResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTeamApplicantsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTeamApplicantsResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadTeamApplicantsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTeamApplicantsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadTeamApplicantsResponse";
            };

            return LoadTeamApplicantsResponse;
        })();

        protobuf.UpdateTeamStickersRequest = (function() {

            /**
             * Properties of an UpdateTeamStickersRequest.
             * @memberof v388.protobuf
             * @interface IUpdateTeamStickersRequest
             * @property {number} userId UpdateTeamStickersRequest userId
             * @property {number} timestamp UpdateTeamStickersRequest timestamp
             */

            /**
             * Constructs a new UpdateTeamStickersRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateTeamStickersRequest.
             * @implements IUpdateTeamStickersRequest
             * @constructor
             * @param {v388.protobuf.IUpdateTeamStickersRequest=} [properties] Properties to set
             */
            function UpdateTeamStickersRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateTeamStickersRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @instance
             */
            UpdateTeamStickersRequest.prototype.userId = 0;

            /**
             * UpdateTeamStickersRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @instance
             */
            UpdateTeamStickersRequest.prototype.timestamp = 0;

            /**
             * Creates a new UpdateTeamStickersRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersRequest=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateTeamStickersRequest} UpdateTeamStickersRequest instance
             */
            UpdateTeamStickersRequest.create = function create(properties) {
                return new UpdateTeamStickersRequest(properties);
            };

            /**
             * Encodes the specified UpdateTeamStickersRequest message. Does not implicitly {@link v388.protobuf.UpdateTeamStickersRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersRequest} message UpdateTeamStickersRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamStickersRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified UpdateTeamStickersRequest message, length delimited. Does not implicitly {@link v388.protobuf.UpdateTeamStickersRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersRequest} message UpdateTeamStickersRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamStickersRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateTeamStickersRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateTeamStickersRequest} UpdateTeamStickersRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamStickersRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateTeamStickersRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateTeamStickersRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateTeamStickersRequest} UpdateTeamStickersRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamStickersRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateTeamStickersRequest message.
             * @function verify
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateTeamStickersRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates an UpdateTeamStickersRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateTeamStickersRequest} UpdateTeamStickersRequest
             */
            UpdateTeamStickersRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateTeamStickersRequest)
                    return object;
                let message = new $root.v388.protobuf.UpdateTeamStickersRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateTeamStickersRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {v388.protobuf.UpdateTeamStickersRequest} message UpdateTeamStickersRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateTeamStickersRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this UpdateTeamStickersRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateTeamStickersRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateTeamStickersRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateTeamStickersRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateTeamStickersRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateTeamStickersRequest";
            };

            return UpdateTeamStickersRequest;
        })();

        protobuf.UpdateTeamStickersResponse = (function() {

            /**
             * Properties of an UpdateTeamStickersResponse.
             * @memberof v388.protobuf
             * @interface IUpdateTeamStickersResponse
             * @property {v388.protobuf.ErrorCode} error UpdateTeamStickersResponse error
             * @property {Array.<v388.protobuf.ITeamSticker>|null} [earnedStickers] UpdateTeamStickersResponse earnedStickers
             * @property {Array.<v388.protobuf.ITeamSticker>|null} [teamStickers] UpdateTeamStickersResponse teamStickers
             * @property {number} numOfEarnedStickersBefore UpdateTeamStickersResponse numOfEarnedStickersBefore
             * @property {number} numOfEarnedStickersAfter UpdateTeamStickersResponse numOfEarnedStickersAfter
             * @property {number} numOfEarnedStickersToday UpdateTeamStickersResponse numOfEarnedStickersToday
             * @property {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice|null} [notice] UpdateTeamStickersResponse notice
             */

            /**
             * Constructs a new UpdateTeamStickersResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateTeamStickersResponse.
             * @implements IUpdateTeamStickersResponse
             * @constructor
             * @param {v388.protobuf.IUpdateTeamStickersResponse=} [properties] Properties to set
             */
            function UpdateTeamStickersResponse(properties) {
                this.earnedStickers = [];
                this.teamStickers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateTeamStickersResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.error = 0;

            /**
             * UpdateTeamStickersResponse earnedStickers.
             * @member {Array.<v388.protobuf.ITeamSticker>} earnedStickers
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.earnedStickers = $util.emptyArray;

            /**
             * UpdateTeamStickersResponse teamStickers.
             * @member {Array.<v388.protobuf.ITeamSticker>} teamStickers
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.teamStickers = $util.emptyArray;

            /**
             * UpdateTeamStickersResponse numOfEarnedStickersBefore.
             * @member {number} numOfEarnedStickersBefore
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.numOfEarnedStickersBefore = 0;

            /**
             * UpdateTeamStickersResponse numOfEarnedStickersAfter.
             * @member {number} numOfEarnedStickersAfter
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.numOfEarnedStickersAfter = 0;

            /**
             * UpdateTeamStickersResponse numOfEarnedStickersToday.
             * @member {number} numOfEarnedStickersToday
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.numOfEarnedStickersToday = 0;

            /**
             * UpdateTeamStickersResponse notice.
             * @member {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice|null|undefined} notice
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             */
            UpdateTeamStickersResponse.prototype.notice = null;

            /**
             * Creates a new UpdateTeamStickersResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersResponse=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateTeamStickersResponse} UpdateTeamStickersResponse instance
             */
            UpdateTeamStickersResponse.create = function create(properties) {
                return new UpdateTeamStickersResponse(properties);
            };

            /**
             * Encodes the specified UpdateTeamStickersResponse message. Does not implicitly {@link v388.protobuf.UpdateTeamStickersResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersResponse} message UpdateTeamStickersResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamStickersResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.earnedStickers != null && message.earnedStickers.length)
                    for (let i = 0; i < message.earnedStickers.length; ++i)
                        $root.v388.protobuf.TeamSticker.encode(message.earnedStickers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.teamStickers != null && message.teamStickers.length)
                    for (let i = 0; i < message.teamStickers.length; ++i)
                        $root.v388.protobuf.TeamSticker.encode(message.teamStickers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfEarnedStickersBefore);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.numOfEarnedStickersAfter);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.numOfEarnedStickersToday);
                if (message.notice != null && Object.hasOwnProperty.call(message, "notice"))
                    $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.encode(message.notice, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UpdateTeamStickersResponse message, length delimited. Does not implicitly {@link v388.protobuf.UpdateTeamStickersResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamStickersResponse} message UpdateTeamStickersResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamStickersResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateTeamStickersResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateTeamStickersResponse} UpdateTeamStickersResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamStickersResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateTeamStickersResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.earnedStickers && message.earnedStickers.length))
                                message.earnedStickers = [];
                            message.earnedStickers.push($root.v388.protobuf.TeamSticker.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.teamStickers && message.teamStickers.length))
                                message.teamStickers = [];
                            message.teamStickers.push($root.v388.protobuf.TeamSticker.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.numOfEarnedStickersBefore = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.numOfEarnedStickersAfter = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.numOfEarnedStickersToday = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.notice = $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfEarnedStickersBefore"))
                    throw $util.ProtocolError("missing required 'numOfEarnedStickersBefore'", { instance: message });
                if (!message.hasOwnProperty("numOfEarnedStickersAfter"))
                    throw $util.ProtocolError("missing required 'numOfEarnedStickersAfter'", { instance: message });
                if (!message.hasOwnProperty("numOfEarnedStickersToday"))
                    throw $util.ProtocolError("missing required 'numOfEarnedStickersToday'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateTeamStickersResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateTeamStickersResponse} UpdateTeamStickersResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamStickersResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateTeamStickersResponse message.
             * @function verify
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateTeamStickersResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.earnedStickers != null && message.hasOwnProperty("earnedStickers")) {
                    if (!Array.isArray(message.earnedStickers))
                        return "earnedStickers: array expected";
                    for (let i = 0; i < message.earnedStickers.length; ++i) {
                        let error = $root.v388.protobuf.TeamSticker.verify(message.earnedStickers[i]);
                        if (error)
                            return "earnedStickers." + error;
                    }
                }
                if (message.teamStickers != null && message.hasOwnProperty("teamStickers")) {
                    if (!Array.isArray(message.teamStickers))
                        return "teamStickers: array expected";
                    for (let i = 0; i < message.teamStickers.length; ++i) {
                        let error = $root.v388.protobuf.TeamSticker.verify(message.teamStickers[i]);
                        if (error)
                            return "teamStickers." + error;
                    }
                }
                if (!$util.isInteger(message.numOfEarnedStickersBefore))
                    return "numOfEarnedStickersBefore: integer expected";
                if (!$util.isInteger(message.numOfEarnedStickersAfter))
                    return "numOfEarnedStickersAfter: integer expected";
                if (!$util.isInteger(message.numOfEarnedStickersToday))
                    return "numOfEarnedStickersToday: integer expected";
                if (message.notice != null && message.hasOwnProperty("notice")) {
                    let error = $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.verify(message.notice);
                    if (error)
                        return "notice." + error;
                }
                return null;
            };

            /**
             * Creates an UpdateTeamStickersResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateTeamStickersResponse} UpdateTeamStickersResponse
             */
            UpdateTeamStickersResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateTeamStickersResponse)
                    return object;
                let message = new $root.v388.protobuf.UpdateTeamStickersResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.earnedStickers) {
                    if (!Array.isArray(object.earnedStickers))
                        throw TypeError(".v388.protobuf.UpdateTeamStickersResponse.earnedStickers: array expected");
                    message.earnedStickers = [];
                    for (let i = 0; i < object.earnedStickers.length; ++i) {
                        if (typeof object.earnedStickers[i] !== "object")
                            throw TypeError(".v388.protobuf.UpdateTeamStickersResponse.earnedStickers: object expected");
                        message.earnedStickers[i] = $root.v388.protobuf.TeamSticker.fromObject(object.earnedStickers[i]);
                    }
                }
                if (object.teamStickers) {
                    if (!Array.isArray(object.teamStickers))
                        throw TypeError(".v388.protobuf.UpdateTeamStickersResponse.teamStickers: array expected");
                    message.teamStickers = [];
                    for (let i = 0; i < object.teamStickers.length; ++i) {
                        if (typeof object.teamStickers[i] !== "object")
                            throw TypeError(".v388.protobuf.UpdateTeamStickersResponse.teamStickers: object expected");
                        message.teamStickers[i] = $root.v388.protobuf.TeamSticker.fromObject(object.teamStickers[i]);
                    }
                }
                if (object.numOfEarnedStickersBefore != null)
                    message.numOfEarnedStickersBefore = object.numOfEarnedStickersBefore >>> 0;
                if (object.numOfEarnedStickersAfter != null)
                    message.numOfEarnedStickersAfter = object.numOfEarnedStickersAfter >>> 0;
                if (object.numOfEarnedStickersToday != null)
                    message.numOfEarnedStickersToday = object.numOfEarnedStickersToday >>> 0;
                if (object.notice != null) {
                    if (typeof object.notice !== "object")
                        throw TypeError(".v388.protobuf.UpdateTeamStickersResponse.notice: object expected");
                    message.notice = $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.fromObject(object.notice);
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateTeamStickersResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {v388.protobuf.UpdateTeamStickersResponse} message UpdateTeamStickersResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateTeamStickersResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.earnedStickers = [];
                    object.teamStickers = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.numOfEarnedStickersBefore = 0;
                    object.numOfEarnedStickersAfter = 0;
                    object.numOfEarnedStickersToday = 0;
                    object.notice = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.earnedStickers && message.earnedStickers.length) {
                    object.earnedStickers = [];
                    for (let j = 0; j < message.earnedStickers.length; ++j)
                        object.earnedStickers[j] = $root.v388.protobuf.TeamSticker.toObject(message.earnedStickers[j], options);
                }
                if (message.teamStickers && message.teamStickers.length) {
                    object.teamStickers = [];
                    for (let j = 0; j < message.teamStickers.length; ++j)
                        object.teamStickers[j] = $root.v388.protobuf.TeamSticker.toObject(message.teamStickers[j], options);
                }
                if (message.numOfEarnedStickersBefore != null && message.hasOwnProperty("numOfEarnedStickersBefore"))
                    object.numOfEarnedStickersBefore = message.numOfEarnedStickersBefore;
                if (message.numOfEarnedStickersAfter != null && message.hasOwnProperty("numOfEarnedStickersAfter"))
                    object.numOfEarnedStickersAfter = message.numOfEarnedStickersAfter;
                if (message.numOfEarnedStickersToday != null && message.hasOwnProperty("numOfEarnedStickersToday"))
                    object.numOfEarnedStickersToday = message.numOfEarnedStickersToday;
                if (message.notice != null && message.hasOwnProperty("notice"))
                    object.notice = $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.toObject(message.notice, options);
                return object;
            };

            /**
             * Converts this UpdateTeamStickersResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateTeamStickersResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateTeamStickersResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateTeamStickersResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateTeamStickersResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateTeamStickersResponse";
            };

            UpdateTeamStickersResponse.PrizeNotice = (function() {

                /**
                 * Properties of a PrizeNotice.
                 * @memberof v388.protobuf.UpdateTeamStickersResponse
                 * @interface IPrizeNotice
                 * @property {string} name PrizeNotice name
                 * @property {number} number PrizeNotice number
                 */

                /**
                 * Constructs a new PrizeNotice.
                 * @memberof v388.protobuf.UpdateTeamStickersResponse
                 * @classdesc Represents a PrizeNotice.
                 * @implements IPrizeNotice
                 * @constructor
                 * @param {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice=} [properties] Properties to set
                 */
                function PrizeNotice(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PrizeNotice name.
                 * @member {string} name
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @instance
                 */
                PrizeNotice.prototype.name = "";

                /**
                 * PrizeNotice number.
                 * @member {number} number
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @instance
                 */
                PrizeNotice.prototype.number = 0;

                /**
                 * Creates a new PrizeNotice instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice=} [properties] Properties to set
                 * @returns {v388.protobuf.UpdateTeamStickersResponse.PrizeNotice} PrizeNotice instance
                 */
                PrizeNotice.create = function create(properties) {
                    return new PrizeNotice(properties);
                };

                /**
                 * Encodes the specified PrizeNotice message. Does not implicitly {@link v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice} message PrizeNotice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrizeNotice.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.number);
                    return writer;
                };

                /**
                 * Encodes the specified PrizeNotice message, length delimited. Does not implicitly {@link v388.protobuf.UpdateTeamStickersResponse.PrizeNotice.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {v388.protobuf.UpdateTeamStickersResponse.IPrizeNotice} message PrizeNotice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrizeNotice.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PrizeNotice message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.UpdateTeamStickersResponse.PrizeNotice} PrizeNotice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrizeNotice.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("number"))
                        throw $util.ProtocolError("missing required 'number'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a PrizeNotice message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.UpdateTeamStickersResponse.PrizeNotice} PrizeNotice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrizeNotice.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PrizeNotice message.
                 * @function verify
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PrizeNotice.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                    return null;
                };

                /**
                 * Creates a PrizeNotice message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.UpdateTeamStickersResponse.PrizeNotice} PrizeNotice
                 */
                PrizeNotice.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice)
                        return object;
                    let message = new $root.v388.protobuf.UpdateTeamStickersResponse.PrizeNotice();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a PrizeNotice message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {v388.protobuf.UpdateTeamStickersResponse.PrizeNotice} message PrizeNotice
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PrizeNotice.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    return object;
                };

                /**
                 * Converts this PrizeNotice to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PrizeNotice.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for PrizeNotice
                 * @function getTypeUrl
                 * @memberof v388.protobuf.UpdateTeamStickersResponse.PrizeNotice
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PrizeNotice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.UpdateTeamStickersResponse.PrizeNotice";
                };

                return PrizeNotice;
            })();

            return UpdateTeamStickersResponse;
        })();

        protobuf.UpdateTeamRequest = (function() {

            /**
             * Properties of an UpdateTeamRequest.
             * @memberof v388.protobuf
             * @interface IUpdateTeamRequest
             * @property {number} userId UpdateTeamRequest userId
             * @property {number|null} [teamStickerFont] UpdateTeamRequest teamStickerFont
             * @property {boolean|null} [closed] UpdateTeamRequest closed
             * @property {number} timestamp UpdateTeamRequest timestamp
             */

            /**
             * Constructs a new UpdateTeamRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateTeamRequest.
             * @implements IUpdateTeamRequest
             * @constructor
             * @param {v388.protobuf.IUpdateTeamRequest=} [properties] Properties to set
             */
            function UpdateTeamRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateTeamRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.UpdateTeamRequest
             * @instance
             */
            UpdateTeamRequest.prototype.userId = 0;

            /**
             * UpdateTeamRequest teamStickerFont.
             * @member {number} teamStickerFont
             * @memberof v388.protobuf.UpdateTeamRequest
             * @instance
             */
            UpdateTeamRequest.prototype.teamStickerFont = 0;

            /**
             * UpdateTeamRequest closed.
             * @member {boolean} closed
             * @memberof v388.protobuf.UpdateTeamRequest
             * @instance
             */
            UpdateTeamRequest.prototype.closed = false;

            /**
             * UpdateTeamRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.UpdateTeamRequest
             * @instance
             */
            UpdateTeamRequest.prototype.timestamp = 0;

            /**
             * Creates a new UpdateTeamRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamRequest=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateTeamRequest} UpdateTeamRequest instance
             */
            UpdateTeamRequest.create = function create(properties) {
                return new UpdateTeamRequest(properties);
            };

            /**
             * Encodes the specified UpdateTeamRequest message. Does not implicitly {@link v388.protobuf.UpdateTeamRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamRequest} message UpdateTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.teamStickerFont != null && Object.hasOwnProperty.call(message, "teamStickerFont"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.teamStickerFont);
                if (message.closed != null && Object.hasOwnProperty.call(message, "closed"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.closed);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified UpdateTeamRequest message, length delimited. Does not implicitly {@link v388.protobuf.UpdateTeamRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {v388.protobuf.IUpdateTeamRequest} message UpdateTeamRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateTeamRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateTeamRequest} UpdateTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateTeamRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamStickerFont = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.closed = reader.bool();
                            break;
                        }
                    case 4: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateTeamRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateTeamRequest} UpdateTeamRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateTeamRequest message.
             * @function verify
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateTeamRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    if (!$util.isInteger(message.teamStickerFont))
                        return "teamStickerFont: integer expected";
                if (message.closed != null && message.hasOwnProperty("closed"))
                    if (typeof message.closed !== "boolean")
                        return "closed: boolean expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates an UpdateTeamRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateTeamRequest} UpdateTeamRequest
             */
            UpdateTeamRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateTeamRequest)
                    return object;
                let message = new $root.v388.protobuf.UpdateTeamRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.teamStickerFont != null)
                    message.teamStickerFont = object.teamStickerFont >>> 0;
                if (object.closed != null)
                    message.closed = Boolean(object.closed);
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateTeamRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {v388.protobuf.UpdateTeamRequest} message UpdateTeamRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateTeamRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.teamStickerFont = 0;
                    object.closed = false;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    object.teamStickerFont = message.teamStickerFont;
                if (message.closed != null && message.hasOwnProperty("closed"))
                    object.closed = message.closed;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this UpdateTeamRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateTeamRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateTeamRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateTeamRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateTeamRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateTeamRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateTeamRequest";
            };

            return UpdateTeamRequest;
        })();

        protobuf.UpdateTeamResponse = (function() {

            /**
             * Properties of an UpdateTeamResponse.
             * @memberof v388.protobuf
             * @interface IUpdateTeamResponse
             * @property {v388.protobuf.ErrorCode} error UpdateTeamResponse error
             */

            /**
             * Constructs a new UpdateTeamResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an UpdateTeamResponse.
             * @implements IUpdateTeamResponse
             * @constructor
             * @param {v388.protobuf.IUpdateTeamResponse=} [properties] Properties to set
             */
            function UpdateTeamResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateTeamResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.UpdateTeamResponse
             * @instance
             */
            UpdateTeamResponse.prototype.error = 0;

            /**
             * Creates a new UpdateTeamResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamResponse=} [properties] Properties to set
             * @returns {v388.protobuf.UpdateTeamResponse} UpdateTeamResponse instance
             */
            UpdateTeamResponse.create = function create(properties) {
                return new UpdateTeamResponse(properties);
            };

            /**
             * Encodes the specified UpdateTeamResponse message. Does not implicitly {@link v388.protobuf.UpdateTeamResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamResponse} message UpdateTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified UpdateTeamResponse message, length delimited. Does not implicitly {@link v388.protobuf.UpdateTeamResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {v388.protobuf.IUpdateTeamResponse} message UpdateTeamResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateTeamResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateTeamResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.UpdateTeamResponse} UpdateTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.UpdateTeamResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateTeamResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.UpdateTeamResponse} UpdateTeamResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateTeamResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateTeamResponse message.
             * @function verify
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateTeamResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates an UpdateTeamResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.UpdateTeamResponse} UpdateTeamResponse
             */
            UpdateTeamResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.UpdateTeamResponse)
                    return object;
                let message = new $root.v388.protobuf.UpdateTeamResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateTeamResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {v388.protobuf.UpdateTeamResponse} message UpdateTeamResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateTeamResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this UpdateTeamResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.UpdateTeamResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateTeamResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateTeamResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.UpdateTeamResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateTeamResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.UpdateTeamResponse";
            };

            return UpdateTeamResponse;
        })();

        protobuf.GrantCarRightRequest = (function() {

            /**
             * Properties of a GrantCarRightRequest.
             * @memberof v388.protobuf
             * @interface IGrantCarRightRequest
             * @property {number} userId GrantCarRightRequest userId
             * @property {number} targetUserId GrantCarRightRequest targetUserId
             * @property {number} timestamp GrantCarRightRequest timestamp
             */

            /**
             * Constructs a new GrantCarRightRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a GrantCarRightRequest.
             * @implements IGrantCarRightRequest
             * @constructor
             * @param {v388.protobuf.IGrantCarRightRequest=} [properties] Properties to set
             */
            function GrantCarRightRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GrantCarRightRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.userId = 0;

            /**
             * GrantCarRightRequest targetUserId.
             * @member {number} targetUserId
             * @memberof v388.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.targetUserId = 0;

            /**
             * GrantCarRightRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.timestamp = 0;

            /**
             * Creates a new GrantCarRightRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {v388.protobuf.IGrantCarRightRequest=} [properties] Properties to set
             * @returns {v388.protobuf.GrantCarRightRequest} GrantCarRightRequest instance
             */
            GrantCarRightRequest.create = function create(properties) {
                return new GrantCarRightRequest(properties);
            };

            /**
             * Encodes the specified GrantCarRightRequest message. Does not implicitly {@link v388.protobuf.GrantCarRightRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {v388.protobuf.IGrantCarRightRequest} message GrantCarRightRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetUserId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified GrantCarRightRequest message, length delimited. Does not implicitly {@link v388.protobuf.GrantCarRightRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {v388.protobuf.IGrantCarRightRequest} message GrantCarRightRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GrantCarRightRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GrantCarRightRequest} GrantCarRightRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GrantCarRightRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.targetUserId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("targetUserId"))
                    throw $util.ProtocolError("missing required 'targetUserId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a GrantCarRightRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GrantCarRightRequest} GrantCarRightRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GrantCarRightRequest message.
             * @function verify
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GrantCarRightRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.targetUserId))
                    return "targetUserId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a GrantCarRightRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GrantCarRightRequest} GrantCarRightRequest
             */
            GrantCarRightRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GrantCarRightRequest)
                    return object;
                let message = new $root.v388.protobuf.GrantCarRightRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.targetUserId != null)
                    message.targetUserId = object.targetUserId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GrantCarRightRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {v388.protobuf.GrantCarRightRequest} message GrantCarRightRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GrantCarRightRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.targetUserId = 0;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.targetUserId != null && message.hasOwnProperty("targetUserId"))
                    object.targetUserId = message.targetUserId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this GrantCarRightRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GrantCarRightRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GrantCarRightRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GrantCarRightRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.GrantCarRightRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GrantCarRightRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GrantCarRightRequest";
            };

            return GrantCarRightRequest;
        })();

        protobuf.GrantCarRightResponse = (function() {

            /**
             * Properties of a GrantCarRightResponse.
             * @memberof v388.protobuf
             * @interface IGrantCarRightResponse
             * @property {v388.protobuf.ErrorCode} error GrantCarRightResponse error
             */

            /**
             * Constructs a new GrantCarRightResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a GrantCarRightResponse.
             * @implements IGrantCarRightResponse
             * @constructor
             * @param {v388.protobuf.IGrantCarRightResponse=} [properties] Properties to set
             */
            function GrantCarRightResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GrantCarRightResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.GrantCarRightResponse
             * @instance
             */
            GrantCarRightResponse.prototype.error = 0;

            /**
             * Creates a new GrantCarRightResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {v388.protobuf.IGrantCarRightResponse=} [properties] Properties to set
             * @returns {v388.protobuf.GrantCarRightResponse} GrantCarRightResponse instance
             */
            GrantCarRightResponse.create = function create(properties) {
                return new GrantCarRightResponse(properties);
            };

            /**
             * Encodes the specified GrantCarRightResponse message. Does not implicitly {@link v388.protobuf.GrantCarRightResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {v388.protobuf.IGrantCarRightResponse} message GrantCarRightResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified GrantCarRightResponse message, length delimited. Does not implicitly {@link v388.protobuf.GrantCarRightResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {v388.protobuf.IGrantCarRightResponse} message GrantCarRightResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GrantCarRightResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GrantCarRightResponse} GrantCarRightResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GrantCarRightResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a GrantCarRightResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GrantCarRightResponse} GrantCarRightResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GrantCarRightResponse message.
             * @function verify
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GrantCarRightResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a GrantCarRightResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GrantCarRightResponse} GrantCarRightResponse
             */
            GrantCarRightResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GrantCarRightResponse)
                    return object;
                let message = new $root.v388.protobuf.GrantCarRightResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a GrantCarRightResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {v388.protobuf.GrantCarRightResponse} message GrantCarRightResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GrantCarRightResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this GrantCarRightResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GrantCarRightResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GrantCarRightResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GrantCarRightResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.GrantCarRightResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GrantCarRightResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GrantCarRightResponse";
            };

            return GrantCarRightResponse;
        })();

        protobuf.GetTeamCampaignStatusRequest = (function() {

            /**
             * Properties of a GetTeamCampaignStatusRequest.
             * @memberof v388.protobuf
             * @interface IGetTeamCampaignStatusRequest
             * @property {number} userId GetTeamCampaignStatusRequest userId
             */

            /**
             * Constructs a new GetTeamCampaignStatusRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a GetTeamCampaignStatusRequest.
             * @implements IGetTeamCampaignStatusRequest
             * @constructor
             * @param {v388.protobuf.IGetTeamCampaignStatusRequest=} [properties] Properties to set
             */
            function GetTeamCampaignStatusRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetTeamCampaignStatusRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @instance
             */
            GetTeamCampaignStatusRequest.prototype.userId = 0;

            /**
             * Creates a new GetTeamCampaignStatusRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusRequest=} [properties] Properties to set
             * @returns {v388.protobuf.GetTeamCampaignStatusRequest} GetTeamCampaignStatusRequest instance
             */
            GetTeamCampaignStatusRequest.create = function create(properties) {
                return new GetTeamCampaignStatusRequest(properties);
            };

            /**
             * Encodes the specified GetTeamCampaignStatusRequest message. Does not implicitly {@link v388.protobuf.GetTeamCampaignStatusRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusRequest} message GetTeamCampaignStatusRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetTeamCampaignStatusRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified GetTeamCampaignStatusRequest message, length delimited. Does not implicitly {@link v388.protobuf.GetTeamCampaignStatusRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusRequest} message GetTeamCampaignStatusRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetTeamCampaignStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetTeamCampaignStatusRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GetTeamCampaignStatusRequest} GetTeamCampaignStatusRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetTeamCampaignStatusRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GetTeamCampaignStatusRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GetTeamCampaignStatusRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GetTeamCampaignStatusRequest} GetTeamCampaignStatusRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetTeamCampaignStatusRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetTeamCampaignStatusRequest message.
             * @function verify
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetTeamCampaignStatusRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a GetTeamCampaignStatusRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GetTeamCampaignStatusRequest} GetTeamCampaignStatusRequest
             */
            GetTeamCampaignStatusRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GetTeamCampaignStatusRequest)
                    return object;
                let message = new $root.v388.protobuf.GetTeamCampaignStatusRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GetTeamCampaignStatusRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {v388.protobuf.GetTeamCampaignStatusRequest} message GetTeamCampaignStatusRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetTeamCampaignStatusRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this GetTeamCampaignStatusRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetTeamCampaignStatusRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GetTeamCampaignStatusRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.GetTeamCampaignStatusRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GetTeamCampaignStatusRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GetTeamCampaignStatusRequest";
            };

            return GetTeamCampaignStatusRequest;
        })();

        protobuf.GetTeamCampaignStatusResponse = (function() {

            /**
             * Properties of a GetTeamCampaignStatusResponse.
             * @memberof v388.protobuf
             * @interface IGetTeamCampaignStatusResponse
             * @property {v388.protobuf.ErrorCode} error GetTeamCampaignStatusResponse error
             * @property {boolean} applied GetTeamCampaignStatusResponse applied
             * @property {string|null} [teamName] GetTeamCampaignStatusResponse teamName
             * @property {number|null} [numOfApplicants] GetTeamCampaignStatusResponse numOfApplicants
             */

            /**
             * Constructs a new GetTeamCampaignStatusResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a GetTeamCampaignStatusResponse.
             * @implements IGetTeamCampaignStatusResponse
             * @constructor
             * @param {v388.protobuf.IGetTeamCampaignStatusResponse=} [properties] Properties to set
             */
            function GetTeamCampaignStatusResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetTeamCampaignStatusResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @instance
             */
            GetTeamCampaignStatusResponse.prototype.error = 0;

            /**
             * GetTeamCampaignStatusResponse applied.
             * @member {boolean} applied
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @instance
             */
            GetTeamCampaignStatusResponse.prototype.applied = false;

            /**
             * GetTeamCampaignStatusResponse teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @instance
             */
            GetTeamCampaignStatusResponse.prototype.teamName = "";

            /**
             * GetTeamCampaignStatusResponse numOfApplicants.
             * @member {number} numOfApplicants
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @instance
             */
            GetTeamCampaignStatusResponse.prototype.numOfApplicants = 0;

            /**
             * Creates a new GetTeamCampaignStatusResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusResponse=} [properties] Properties to set
             * @returns {v388.protobuf.GetTeamCampaignStatusResponse} GetTeamCampaignStatusResponse instance
             */
            GetTeamCampaignStatusResponse.create = function create(properties) {
                return new GetTeamCampaignStatusResponse(properties);
            };

            /**
             * Encodes the specified GetTeamCampaignStatusResponse message. Does not implicitly {@link v388.protobuf.GetTeamCampaignStatusResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusResponse} message GetTeamCampaignStatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetTeamCampaignStatusResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.applied);
                if (message.teamName != null && Object.hasOwnProperty.call(message, "teamName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.teamName);
                if (message.numOfApplicants != null && Object.hasOwnProperty.call(message, "numOfApplicants"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfApplicants);
                return writer;
            };

            /**
             * Encodes the specified GetTeamCampaignStatusResponse message, length delimited. Does not implicitly {@link v388.protobuf.GetTeamCampaignStatusResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {v388.protobuf.IGetTeamCampaignStatusResponse} message GetTeamCampaignStatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetTeamCampaignStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetTeamCampaignStatusResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GetTeamCampaignStatusResponse} GetTeamCampaignStatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetTeamCampaignStatusResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GetTeamCampaignStatusResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.applied = reader.bool();
                            break;
                        }
                    case 3: {
                            message.teamName = reader.string();
                            break;
                        }
                    case 4: {
                            message.numOfApplicants = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("applied"))
                    throw $util.ProtocolError("missing required 'applied'", { instance: message });
                return message;
            };

            /**
             * Decodes a GetTeamCampaignStatusResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GetTeamCampaignStatusResponse} GetTeamCampaignStatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetTeamCampaignStatusResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetTeamCampaignStatusResponse message.
             * @function verify
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetTeamCampaignStatusResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (typeof message.applied !== "boolean")
                    return "applied: boolean expected";
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    if (!$util.isString(message.teamName))
                        return "teamName: string expected";
                if (message.numOfApplicants != null && message.hasOwnProperty("numOfApplicants"))
                    if (!$util.isInteger(message.numOfApplicants))
                        return "numOfApplicants: integer expected";
                return null;
            };

            /**
             * Creates a GetTeamCampaignStatusResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GetTeamCampaignStatusResponse} GetTeamCampaignStatusResponse
             */
            GetTeamCampaignStatusResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GetTeamCampaignStatusResponse)
                    return object;
                let message = new $root.v388.protobuf.GetTeamCampaignStatusResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.applied != null)
                    message.applied = Boolean(object.applied);
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                if (object.numOfApplicants != null)
                    message.numOfApplicants = object.numOfApplicants >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GetTeamCampaignStatusResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {v388.protobuf.GetTeamCampaignStatusResponse} message GetTeamCampaignStatusResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetTeamCampaignStatusResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.applied = false;
                    object.teamName = "";
                    object.numOfApplicants = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.applied != null && message.hasOwnProperty("applied"))
                    object.applied = message.applied;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                if (message.numOfApplicants != null && message.hasOwnProperty("numOfApplicants"))
                    object.numOfApplicants = message.numOfApplicants;
                return object;
            };

            /**
             * Converts this GetTeamCampaignStatusResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetTeamCampaignStatusResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GetTeamCampaignStatusResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.GetTeamCampaignStatusResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GetTeamCampaignStatusResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GetTeamCampaignStatusResponse";
            };

            return GetTeamCampaignStatusResponse;
        })();

        protobuf.PreApplyTeamCampaignRequest = (function() {

            /**
             * Properties of a PreApplyTeamCampaignRequest.
             * @memberof v388.protobuf
             * @interface IPreApplyTeamCampaignRequest
             * @property {number} userId PreApplyTeamCampaignRequest userId
             * @property {string} teamName PreApplyTeamCampaignRequest teamName
             */

            /**
             * Constructs a new PreApplyTeamCampaignRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a PreApplyTeamCampaignRequest.
             * @implements IPreApplyTeamCampaignRequest
             * @constructor
             * @param {v388.protobuf.IPreApplyTeamCampaignRequest=} [properties] Properties to set
             */
            function PreApplyTeamCampaignRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PreApplyTeamCampaignRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @instance
             */
            PreApplyTeamCampaignRequest.prototype.userId = 0;

            /**
             * PreApplyTeamCampaignRequest teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @instance
             */
            PreApplyTeamCampaignRequest.prototype.teamName = "";

            /**
             * Creates a new PreApplyTeamCampaignRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignRequest=} [properties] Properties to set
             * @returns {v388.protobuf.PreApplyTeamCampaignRequest} PreApplyTeamCampaignRequest instance
             */
            PreApplyTeamCampaignRequest.create = function create(properties) {
                return new PreApplyTeamCampaignRequest(properties);
            };

            /**
             * Encodes the specified PreApplyTeamCampaignRequest message. Does not implicitly {@link v388.protobuf.PreApplyTeamCampaignRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignRequest} message PreApplyTeamCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreApplyTeamCampaignRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamName);
                return writer;
            };

            /**
             * Encodes the specified PreApplyTeamCampaignRequest message, length delimited. Does not implicitly {@link v388.protobuf.PreApplyTeamCampaignRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignRequest} message PreApplyTeamCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreApplyTeamCampaignRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PreApplyTeamCampaignRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PreApplyTeamCampaignRequest} PreApplyTeamCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreApplyTeamCampaignRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PreApplyTeamCampaignRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamName = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("teamName"))
                    throw $util.ProtocolError("missing required 'teamName'", { instance: message });
                return message;
            };

            /**
             * Decodes a PreApplyTeamCampaignRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PreApplyTeamCampaignRequest} PreApplyTeamCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreApplyTeamCampaignRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PreApplyTeamCampaignRequest message.
             * @function verify
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PreApplyTeamCampaignRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isString(message.teamName))
                    return "teamName: string expected";
                return null;
            };

            /**
             * Creates a PreApplyTeamCampaignRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PreApplyTeamCampaignRequest} PreApplyTeamCampaignRequest
             */
            PreApplyTeamCampaignRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PreApplyTeamCampaignRequest)
                    return object;
                let message = new $root.v388.protobuf.PreApplyTeamCampaignRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                return message;
            };

            /**
             * Creates a plain object from a PreApplyTeamCampaignRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.PreApplyTeamCampaignRequest} message PreApplyTeamCampaignRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PreApplyTeamCampaignRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.teamName = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                return object;
            };

            /**
             * Converts this PreApplyTeamCampaignRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PreApplyTeamCampaignRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PreApplyTeamCampaignRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.PreApplyTeamCampaignRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PreApplyTeamCampaignRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PreApplyTeamCampaignRequest";
            };

            return PreApplyTeamCampaignRequest;
        })();

        protobuf.PreApplyTeamCampaignResponse = (function() {

            /**
             * Properties of a PreApplyTeamCampaignResponse.
             * @memberof v388.protobuf
             * @interface IPreApplyTeamCampaignResponse
             * @property {v388.protobuf.ErrorCode} error PreApplyTeamCampaignResponse error
             * @property {boolean} allowed PreApplyTeamCampaignResponse allowed
             * @property {number} numOfApplicants PreApplyTeamCampaignResponse numOfApplicants
             */

            /**
             * Constructs a new PreApplyTeamCampaignResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a PreApplyTeamCampaignResponse.
             * @implements IPreApplyTeamCampaignResponse
             * @constructor
             * @param {v388.protobuf.IPreApplyTeamCampaignResponse=} [properties] Properties to set
             */
            function PreApplyTeamCampaignResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PreApplyTeamCampaignResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @instance
             */
            PreApplyTeamCampaignResponse.prototype.error = 0;

            /**
             * PreApplyTeamCampaignResponse allowed.
             * @member {boolean} allowed
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @instance
             */
            PreApplyTeamCampaignResponse.prototype.allowed = false;

            /**
             * PreApplyTeamCampaignResponse numOfApplicants.
             * @member {number} numOfApplicants
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @instance
             */
            PreApplyTeamCampaignResponse.prototype.numOfApplicants = 0;

            /**
             * Creates a new PreApplyTeamCampaignResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignResponse=} [properties] Properties to set
             * @returns {v388.protobuf.PreApplyTeamCampaignResponse} PreApplyTeamCampaignResponse instance
             */
            PreApplyTeamCampaignResponse.create = function create(properties) {
                return new PreApplyTeamCampaignResponse(properties);
            };

            /**
             * Encodes the specified PreApplyTeamCampaignResponse message. Does not implicitly {@link v388.protobuf.PreApplyTeamCampaignResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignResponse} message PreApplyTeamCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreApplyTeamCampaignResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowed);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfApplicants);
                return writer;
            };

            /**
             * Encodes the specified PreApplyTeamCampaignResponse message, length delimited. Does not implicitly {@link v388.protobuf.PreApplyTeamCampaignResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IPreApplyTeamCampaignResponse} message PreApplyTeamCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreApplyTeamCampaignResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PreApplyTeamCampaignResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PreApplyTeamCampaignResponse} PreApplyTeamCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreApplyTeamCampaignResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PreApplyTeamCampaignResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.allowed = reader.bool();
                            break;
                        }
                    case 3: {
                            message.numOfApplicants = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("allowed"))
                    throw $util.ProtocolError("missing required 'allowed'", { instance: message });
                if (!message.hasOwnProperty("numOfApplicants"))
                    throw $util.ProtocolError("missing required 'numOfApplicants'", { instance: message });
                return message;
            };

            /**
             * Decodes a PreApplyTeamCampaignResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PreApplyTeamCampaignResponse} PreApplyTeamCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreApplyTeamCampaignResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PreApplyTeamCampaignResponse message.
             * @function verify
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PreApplyTeamCampaignResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (typeof message.allowed !== "boolean")
                    return "allowed: boolean expected";
                if (!$util.isInteger(message.numOfApplicants))
                    return "numOfApplicants: integer expected";
                return null;
            };

            /**
             * Creates a PreApplyTeamCampaignResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PreApplyTeamCampaignResponse} PreApplyTeamCampaignResponse
             */
            PreApplyTeamCampaignResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PreApplyTeamCampaignResponse)
                    return object;
                let message = new $root.v388.protobuf.PreApplyTeamCampaignResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.allowed != null)
                    message.allowed = Boolean(object.allowed);
                if (object.numOfApplicants != null)
                    message.numOfApplicants = object.numOfApplicants >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PreApplyTeamCampaignResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.PreApplyTeamCampaignResponse} message PreApplyTeamCampaignResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PreApplyTeamCampaignResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.allowed = false;
                    object.numOfApplicants = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.allowed != null && message.hasOwnProperty("allowed"))
                    object.allowed = message.allowed;
                if (message.numOfApplicants != null && message.hasOwnProperty("numOfApplicants"))
                    object.numOfApplicants = message.numOfApplicants;
                return object;
            };

            /**
             * Converts this PreApplyTeamCampaignResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PreApplyTeamCampaignResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PreApplyTeamCampaignResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.PreApplyTeamCampaignResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PreApplyTeamCampaignResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PreApplyTeamCampaignResponse";
            };

            return PreApplyTeamCampaignResponse;
        })();

        protobuf.ApplyTeamCampaignRequest = (function() {

            /**
             * Properties of an ApplyTeamCampaignRequest.
             * @memberof v388.protobuf
             * @interface IApplyTeamCampaignRequest
             * @property {number} userId ApplyTeamCampaignRequest userId
             * @property {string} teamName ApplyTeamCampaignRequest teamName
             */

            /**
             * Constructs a new ApplyTeamCampaignRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an ApplyTeamCampaignRequest.
             * @implements IApplyTeamCampaignRequest
             * @constructor
             * @param {v388.protobuf.IApplyTeamCampaignRequest=} [properties] Properties to set
             */
            function ApplyTeamCampaignRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApplyTeamCampaignRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @instance
             */
            ApplyTeamCampaignRequest.prototype.userId = 0;

            /**
             * ApplyTeamCampaignRequest teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @instance
             */
            ApplyTeamCampaignRequest.prototype.teamName = "";

            /**
             * Creates a new ApplyTeamCampaignRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignRequest=} [properties] Properties to set
             * @returns {v388.protobuf.ApplyTeamCampaignRequest} ApplyTeamCampaignRequest instance
             */
            ApplyTeamCampaignRequest.create = function create(properties) {
                return new ApplyTeamCampaignRequest(properties);
            };

            /**
             * Encodes the specified ApplyTeamCampaignRequest message. Does not implicitly {@link v388.protobuf.ApplyTeamCampaignRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignRequest} message ApplyTeamCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplyTeamCampaignRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamName);
                return writer;
            };

            /**
             * Encodes the specified ApplyTeamCampaignRequest message, length delimited. Does not implicitly {@link v388.protobuf.ApplyTeamCampaignRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignRequest} message ApplyTeamCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplyTeamCampaignRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApplyTeamCampaignRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.ApplyTeamCampaignRequest} ApplyTeamCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplyTeamCampaignRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ApplyTeamCampaignRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamName = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("teamName"))
                    throw $util.ProtocolError("missing required 'teamName'", { instance: message });
                return message;
            };

            /**
             * Decodes an ApplyTeamCampaignRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.ApplyTeamCampaignRequest} ApplyTeamCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplyTeamCampaignRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApplyTeamCampaignRequest message.
             * @function verify
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApplyTeamCampaignRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isString(message.teamName))
                    return "teamName: string expected";
                return null;
            };

            /**
             * Creates an ApplyTeamCampaignRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.ApplyTeamCampaignRequest} ApplyTeamCampaignRequest
             */
            ApplyTeamCampaignRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.ApplyTeamCampaignRequest)
                    return object;
                let message = new $root.v388.protobuf.ApplyTeamCampaignRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                return message;
            };

            /**
             * Creates a plain object from an ApplyTeamCampaignRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {v388.protobuf.ApplyTeamCampaignRequest} message ApplyTeamCampaignRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApplyTeamCampaignRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.teamName = "";
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                return object;
            };

            /**
             * Converts this ApplyTeamCampaignRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApplyTeamCampaignRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ApplyTeamCampaignRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.ApplyTeamCampaignRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ApplyTeamCampaignRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.ApplyTeamCampaignRequest";
            };

            return ApplyTeamCampaignRequest;
        })();

        protobuf.ApplyTeamCampaignResponse = (function() {

            /**
             * Properties of an ApplyTeamCampaignResponse.
             * @memberof v388.protobuf
             * @interface IApplyTeamCampaignResponse
             * @property {v388.protobuf.ErrorCode} error ApplyTeamCampaignResponse error
             * @property {number} numOfApplicants ApplyTeamCampaignResponse numOfApplicants
             */

            /**
             * Constructs a new ApplyTeamCampaignResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an ApplyTeamCampaignResponse.
             * @implements IApplyTeamCampaignResponse
             * @constructor
             * @param {v388.protobuf.IApplyTeamCampaignResponse=} [properties] Properties to set
             */
            function ApplyTeamCampaignResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApplyTeamCampaignResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @instance
             */
            ApplyTeamCampaignResponse.prototype.error = 0;

            /**
             * ApplyTeamCampaignResponse numOfApplicants.
             * @member {number} numOfApplicants
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @instance
             */
            ApplyTeamCampaignResponse.prototype.numOfApplicants = 0;

            /**
             * Creates a new ApplyTeamCampaignResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignResponse=} [properties] Properties to set
             * @returns {v388.protobuf.ApplyTeamCampaignResponse} ApplyTeamCampaignResponse instance
             */
            ApplyTeamCampaignResponse.create = function create(properties) {
                return new ApplyTeamCampaignResponse(properties);
            };

            /**
             * Encodes the specified ApplyTeamCampaignResponse message. Does not implicitly {@link v388.protobuf.ApplyTeamCampaignResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignResponse} message ApplyTeamCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplyTeamCampaignResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.numOfApplicants);
                return writer;
            };

            /**
             * Encodes the specified ApplyTeamCampaignResponse message, length delimited. Does not implicitly {@link v388.protobuf.ApplyTeamCampaignResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.IApplyTeamCampaignResponse} message ApplyTeamCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplyTeamCampaignResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApplyTeamCampaignResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.ApplyTeamCampaignResponse} ApplyTeamCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplyTeamCampaignResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ApplyTeamCampaignResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.numOfApplicants = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfApplicants"))
                    throw $util.ProtocolError("missing required 'numOfApplicants'", { instance: message });
                return message;
            };

            /**
             * Decodes an ApplyTeamCampaignResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.ApplyTeamCampaignResponse} ApplyTeamCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplyTeamCampaignResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApplyTeamCampaignResponse message.
             * @function verify
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApplyTeamCampaignResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (!$util.isInteger(message.numOfApplicants))
                    return "numOfApplicants: integer expected";
                return null;
            };

            /**
             * Creates an ApplyTeamCampaignResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.ApplyTeamCampaignResponse} ApplyTeamCampaignResponse
             */
            ApplyTeamCampaignResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.ApplyTeamCampaignResponse)
                    return object;
                let message = new $root.v388.protobuf.ApplyTeamCampaignResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.numOfApplicants != null)
                    message.numOfApplicants = object.numOfApplicants >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an ApplyTeamCampaignResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {v388.protobuf.ApplyTeamCampaignResponse} message ApplyTeamCampaignResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApplyTeamCampaignResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.numOfApplicants = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.numOfApplicants != null && message.hasOwnProperty("numOfApplicants"))
                    object.numOfApplicants = message.numOfApplicants;
                return object;
            };

            /**
             * Converts this ApplyTeamCampaignResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApplyTeamCampaignResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ApplyTeamCampaignResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.ApplyTeamCampaignResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ApplyTeamCampaignResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.ApplyTeamCampaignResponse";
            };

            return ApplyTeamCampaignResponse;
        })();

        protobuf.LoadCarCampaignInfoRequest = (function() {

            /**
             * Properties of a LoadCarCampaignInfoRequest.
             * @memberof v388.protobuf
             * @interface ILoadCarCampaignInfoRequest
             * @property {number} userId LoadCarCampaignInfoRequest userId
             */

            /**
             * Constructs a new LoadCarCampaignInfoRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadCarCampaignInfoRequest.
             * @implements ILoadCarCampaignInfoRequest
             * @constructor
             * @param {v388.protobuf.ILoadCarCampaignInfoRequest=} [properties] Properties to set
             */
            function LoadCarCampaignInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarCampaignInfoRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @instance
             */
            LoadCarCampaignInfoRequest.prototype.userId = 0;

            /**
             * Creates a new LoadCarCampaignInfoRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadCarCampaignInfoRequest} LoadCarCampaignInfoRequest instance
             */
            LoadCarCampaignInfoRequest.create = function create(properties) {
                return new LoadCarCampaignInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadCarCampaignInfoRequest message. Does not implicitly {@link v388.protobuf.LoadCarCampaignInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoRequest} message LoadCarCampaignInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarCampaignInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadCarCampaignInfoRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadCarCampaignInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoRequest} message LoadCarCampaignInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarCampaignInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarCampaignInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadCarCampaignInfoRequest} LoadCarCampaignInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarCampaignInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadCarCampaignInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarCampaignInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadCarCampaignInfoRequest} LoadCarCampaignInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarCampaignInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarCampaignInfoRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarCampaignInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadCarCampaignInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadCarCampaignInfoRequest} LoadCarCampaignInfoRequest
             */
            LoadCarCampaignInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadCarCampaignInfoRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadCarCampaignInfoRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadCarCampaignInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.LoadCarCampaignInfoRequest} message LoadCarCampaignInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarCampaignInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadCarCampaignInfoRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarCampaignInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarCampaignInfoRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadCarCampaignInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarCampaignInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadCarCampaignInfoRequest";
            };

            return LoadCarCampaignInfoRequest;
        })();

        protobuf.LoadCarCampaignInfoResponse = (function() {

            /**
             * Properties of a LoadCarCampaignInfoResponse.
             * @memberof v388.protobuf
             * @interface ILoadCarCampaignInfoResponse
             * @property {v388.protobuf.ErrorCode} error LoadCarCampaignInfoResponse error
             * @property {v388.protobuf.CarCampaignUserState} carCampaignUserState LoadCarCampaignInfoResponse carCampaignUserState
             * @property {number} numOfPieces LoadCarCampaignInfoResponse numOfPieces
             * @property {number} numOfRemainingLotteries LoadCarCampaignInfoResponse numOfRemainingLotteries
             * @property {number} lotteryOpenBits LoadCarCampaignInfoResponse lotteryOpenBits
             */

            /**
             * Constructs a new LoadCarCampaignInfoResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadCarCampaignInfoResponse.
             * @implements ILoadCarCampaignInfoResponse
             * @constructor
             * @param {v388.protobuf.ILoadCarCampaignInfoResponse=} [properties] Properties to set
             */
            function LoadCarCampaignInfoResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarCampaignInfoResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             */
            LoadCarCampaignInfoResponse.prototype.error = 0;

            /**
             * LoadCarCampaignInfoResponse carCampaignUserState.
             * @member {v388.protobuf.CarCampaignUserState} carCampaignUserState
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             */
            LoadCarCampaignInfoResponse.prototype.carCampaignUserState = 1;

            /**
             * LoadCarCampaignInfoResponse numOfPieces.
             * @member {number} numOfPieces
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             */
            LoadCarCampaignInfoResponse.prototype.numOfPieces = 0;

            /**
             * LoadCarCampaignInfoResponse numOfRemainingLotteries.
             * @member {number} numOfRemainingLotteries
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             */
            LoadCarCampaignInfoResponse.prototype.numOfRemainingLotteries = 0;

            /**
             * LoadCarCampaignInfoResponse lotteryOpenBits.
             * @member {number} lotteryOpenBits
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             */
            LoadCarCampaignInfoResponse.prototype.lotteryOpenBits = 0;

            /**
             * Creates a new LoadCarCampaignInfoResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadCarCampaignInfoResponse} LoadCarCampaignInfoResponse instance
             */
            LoadCarCampaignInfoResponse.create = function create(properties) {
                return new LoadCarCampaignInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadCarCampaignInfoResponse message. Does not implicitly {@link v388.protobuf.LoadCarCampaignInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoResponse} message LoadCarCampaignInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarCampaignInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.carCampaignUserState);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfPieces);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfRemainingLotteries);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.lotteryOpenBits);
                return writer;
            };

            /**
             * Encodes the specified LoadCarCampaignInfoResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadCarCampaignInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ILoadCarCampaignInfoResponse} message LoadCarCampaignInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarCampaignInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarCampaignInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadCarCampaignInfoResponse} LoadCarCampaignInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarCampaignInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadCarCampaignInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.carCampaignUserState = reader.int32();
                            break;
                        }
                    case 3: {
                            message.numOfPieces = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfRemainingLotteries = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.lotteryOpenBits = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("carCampaignUserState"))
                    throw $util.ProtocolError("missing required 'carCampaignUserState'", { instance: message });
                if (!message.hasOwnProperty("numOfPieces"))
                    throw $util.ProtocolError("missing required 'numOfPieces'", { instance: message });
                if (!message.hasOwnProperty("numOfRemainingLotteries"))
                    throw $util.ProtocolError("missing required 'numOfRemainingLotteries'", { instance: message });
                if (!message.hasOwnProperty("lotteryOpenBits"))
                    throw $util.ProtocolError("missing required 'lotteryOpenBits'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarCampaignInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadCarCampaignInfoResponse} LoadCarCampaignInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarCampaignInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarCampaignInfoResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarCampaignInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                switch (message.carCampaignUserState) {
                default:
                    return "carCampaignUserState: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
                if (!$util.isInteger(message.numOfPieces))
                    return "numOfPieces: integer expected";
                if (!$util.isInteger(message.numOfRemainingLotteries))
                    return "numOfRemainingLotteries: integer expected";
                if (!$util.isInteger(message.lotteryOpenBits))
                    return "lotteryOpenBits: integer expected";
                return null;
            };

            /**
             * Creates a LoadCarCampaignInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadCarCampaignInfoResponse} LoadCarCampaignInfoResponse
             */
            LoadCarCampaignInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadCarCampaignInfoResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadCarCampaignInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                switch (object.carCampaignUserState) {
                default:
                    if (typeof object.carCampaignUserState === "number") {
                        message.carCampaignUserState = object.carCampaignUserState;
                        break;
                    }
                    break;
                case "CAR_CAMPAIGN_NOT_ACCEPTED":
                case 1:
                    message.carCampaignUserState = 1;
                    break;
                case "CAR_CAMPAIGN_ACCEPTED":
                case 2:
                    message.carCampaignUserState = 2;
                    break;
                case "CAR_CAMPAIGN_FINISHED":
                case 3:
                    message.carCampaignUserState = 3;
                    break;
                }
                if (object.numOfPieces != null)
                    message.numOfPieces = object.numOfPieces >>> 0;
                if (object.numOfRemainingLotteries != null)
                    message.numOfRemainingLotteries = object.numOfRemainingLotteries >>> 0;
                if (object.lotteryOpenBits != null)
                    message.lotteryOpenBits = object.lotteryOpenBits >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadCarCampaignInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.LoadCarCampaignInfoResponse} message LoadCarCampaignInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarCampaignInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.carCampaignUserState = options.enums === String ? "CAR_CAMPAIGN_NOT_ACCEPTED" : 1;
                    object.numOfPieces = 0;
                    object.numOfRemainingLotteries = 0;
                    object.lotteryOpenBits = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.carCampaignUserState != null && message.hasOwnProperty("carCampaignUserState"))
                    object.carCampaignUserState = options.enums === String ? $root.v388.protobuf.CarCampaignUserState[message.carCampaignUserState] === undefined ? message.carCampaignUserState : $root.v388.protobuf.CarCampaignUserState[message.carCampaignUserState] : message.carCampaignUserState;
                if (message.numOfPieces != null && message.hasOwnProperty("numOfPieces"))
                    object.numOfPieces = message.numOfPieces;
                if (message.numOfRemainingLotteries != null && message.hasOwnProperty("numOfRemainingLotteries"))
                    object.numOfRemainingLotteries = message.numOfRemainingLotteries;
                if (message.lotteryOpenBits != null && message.hasOwnProperty("lotteryOpenBits"))
                    object.lotteryOpenBits = message.lotteryOpenBits;
                return object;
            };

            /**
             * Converts this LoadCarCampaignInfoResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarCampaignInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarCampaignInfoResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadCarCampaignInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarCampaignInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadCarCampaignInfoResponse";
            };

            return LoadCarCampaignInfoResponse;
        })();

        protobuf.SaveCarCampaignInfoRequest = (function() {

            /**
             * Properties of a SaveCarCampaignInfoRequest.
             * @memberof v388.protobuf
             * @interface ISaveCarCampaignInfoRequest
             * @property {number} userId SaveCarCampaignInfoRequest userId
             * @property {number} lotteryOpenBits SaveCarCampaignInfoRequest lotteryOpenBits
             * @property {number} timestamp SaveCarCampaignInfoRequest timestamp
             */

            /**
             * Constructs a new SaveCarCampaignInfoRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveCarCampaignInfoRequest.
             * @implements ISaveCarCampaignInfoRequest
             * @constructor
             * @param {v388.protobuf.ISaveCarCampaignInfoRequest=} [properties] Properties to set
             */
            function SaveCarCampaignInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveCarCampaignInfoRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @instance
             */
            SaveCarCampaignInfoRequest.prototype.userId = 0;

            /**
             * SaveCarCampaignInfoRequest lotteryOpenBits.
             * @member {number} lotteryOpenBits
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @instance
             */
            SaveCarCampaignInfoRequest.prototype.lotteryOpenBits = 0;

            /**
             * SaveCarCampaignInfoRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @instance
             */
            SaveCarCampaignInfoRequest.prototype.timestamp = 0;

            /**
             * Creates a new SaveCarCampaignInfoRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveCarCampaignInfoRequest} SaveCarCampaignInfoRequest instance
             */
            SaveCarCampaignInfoRequest.create = function create(properties) {
                return new SaveCarCampaignInfoRequest(properties);
            };

            /**
             * Encodes the specified SaveCarCampaignInfoRequest message. Does not implicitly {@link v388.protobuf.SaveCarCampaignInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoRequest} message SaveCarCampaignInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveCarCampaignInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.lotteryOpenBits);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified SaveCarCampaignInfoRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveCarCampaignInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoRequest} message SaveCarCampaignInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveCarCampaignInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveCarCampaignInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveCarCampaignInfoRequest} SaveCarCampaignInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveCarCampaignInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveCarCampaignInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.lotteryOpenBits = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("lotteryOpenBits"))
                    throw $util.ProtocolError("missing required 'lotteryOpenBits'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveCarCampaignInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveCarCampaignInfoRequest} SaveCarCampaignInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveCarCampaignInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveCarCampaignInfoRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveCarCampaignInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.lotteryOpenBits))
                    return "lotteryOpenBits: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a SaveCarCampaignInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveCarCampaignInfoRequest} SaveCarCampaignInfoRequest
             */
            SaveCarCampaignInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveCarCampaignInfoRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveCarCampaignInfoRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.lotteryOpenBits != null)
                    message.lotteryOpenBits = object.lotteryOpenBits >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SaveCarCampaignInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {v388.protobuf.SaveCarCampaignInfoRequest} message SaveCarCampaignInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveCarCampaignInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.lotteryOpenBits = 0;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.lotteryOpenBits != null && message.hasOwnProperty("lotteryOpenBits"))
                    object.lotteryOpenBits = message.lotteryOpenBits;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this SaveCarCampaignInfoRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveCarCampaignInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveCarCampaignInfoRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveCarCampaignInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveCarCampaignInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveCarCampaignInfoRequest";
            };

            return SaveCarCampaignInfoRequest;
        })();

        protobuf.SaveCarCampaignInfoResponse = (function() {

            /**
             * Properties of a SaveCarCampaignInfoResponse.
             * @memberof v388.protobuf
             * @interface ISaveCarCampaignInfoResponse
             * @property {v388.protobuf.ErrorCode} error SaveCarCampaignInfoResponse error
             */

            /**
             * Constructs a new SaveCarCampaignInfoResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveCarCampaignInfoResponse.
             * @implements ISaveCarCampaignInfoResponse
             * @constructor
             * @param {v388.protobuf.ISaveCarCampaignInfoResponse=} [properties] Properties to set
             */
            function SaveCarCampaignInfoResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveCarCampaignInfoResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @instance
             */
            SaveCarCampaignInfoResponse.prototype.error = 0;

            /**
             * Creates a new SaveCarCampaignInfoResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveCarCampaignInfoResponse} SaveCarCampaignInfoResponse instance
             */
            SaveCarCampaignInfoResponse.create = function create(properties) {
                return new SaveCarCampaignInfoResponse(properties);
            };

            /**
             * Encodes the specified SaveCarCampaignInfoResponse message. Does not implicitly {@link v388.protobuf.SaveCarCampaignInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoResponse} message SaveCarCampaignInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveCarCampaignInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveCarCampaignInfoResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveCarCampaignInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.ISaveCarCampaignInfoResponse} message SaveCarCampaignInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveCarCampaignInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveCarCampaignInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveCarCampaignInfoResponse} SaveCarCampaignInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveCarCampaignInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveCarCampaignInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveCarCampaignInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveCarCampaignInfoResponse} SaveCarCampaignInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveCarCampaignInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveCarCampaignInfoResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveCarCampaignInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveCarCampaignInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveCarCampaignInfoResponse} SaveCarCampaignInfoResponse
             */
            SaveCarCampaignInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveCarCampaignInfoResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveCarCampaignInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveCarCampaignInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {v388.protobuf.SaveCarCampaignInfoResponse} message SaveCarCampaignInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveCarCampaignInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveCarCampaignInfoResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveCarCampaignInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveCarCampaignInfoResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveCarCampaignInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveCarCampaignInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveCarCampaignInfoResponse";
            };

            return SaveCarCampaignInfoResponse;
        })();

        protobuf.AcceptCarCampaignRequest = (function() {

            /**
             * Properties of an AcceptCarCampaignRequest.
             * @memberof v388.protobuf
             * @interface IAcceptCarCampaignRequest
             * @property {number} userId AcceptCarCampaignRequest userId
             */

            /**
             * Constructs a new AcceptCarCampaignRequest.
             * @memberof v388.protobuf
             * @classdesc Represents an AcceptCarCampaignRequest.
             * @implements IAcceptCarCampaignRequest
             * @constructor
             * @param {v388.protobuf.IAcceptCarCampaignRequest=} [properties] Properties to set
             */
            function AcceptCarCampaignRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AcceptCarCampaignRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @instance
             */
            AcceptCarCampaignRequest.prototype.userId = 0;

            /**
             * Creates a new AcceptCarCampaignRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignRequest=} [properties] Properties to set
             * @returns {v388.protobuf.AcceptCarCampaignRequest} AcceptCarCampaignRequest instance
             */
            AcceptCarCampaignRequest.create = function create(properties) {
                return new AcceptCarCampaignRequest(properties);
            };

            /**
             * Encodes the specified AcceptCarCampaignRequest message. Does not implicitly {@link v388.protobuf.AcceptCarCampaignRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignRequest} message AcceptCarCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AcceptCarCampaignRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified AcceptCarCampaignRequest message, length delimited. Does not implicitly {@link v388.protobuf.AcceptCarCampaignRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignRequest} message AcceptCarCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AcceptCarCampaignRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AcceptCarCampaignRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.AcceptCarCampaignRequest} AcceptCarCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AcceptCarCampaignRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.AcceptCarCampaignRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes an AcceptCarCampaignRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.AcceptCarCampaignRequest} AcceptCarCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AcceptCarCampaignRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AcceptCarCampaignRequest message.
             * @function verify
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AcceptCarCampaignRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates an AcceptCarCampaignRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.AcceptCarCampaignRequest} AcceptCarCampaignRequest
             */
            AcceptCarCampaignRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.AcceptCarCampaignRequest)
                    return object;
                let message = new $root.v388.protobuf.AcceptCarCampaignRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an AcceptCarCampaignRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {v388.protobuf.AcceptCarCampaignRequest} message AcceptCarCampaignRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AcceptCarCampaignRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this AcceptCarCampaignRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AcceptCarCampaignRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AcceptCarCampaignRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.AcceptCarCampaignRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AcceptCarCampaignRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.AcceptCarCampaignRequest";
            };

            return AcceptCarCampaignRequest;
        })();

        protobuf.AcceptCarCampaignResponse = (function() {

            /**
             * Properties of an AcceptCarCampaignResponse.
             * @memberof v388.protobuf
             * @interface IAcceptCarCampaignResponse
             * @property {v388.protobuf.ErrorCode} error AcceptCarCampaignResponse error
             */

            /**
             * Constructs a new AcceptCarCampaignResponse.
             * @memberof v388.protobuf
             * @classdesc Represents an AcceptCarCampaignResponse.
             * @implements IAcceptCarCampaignResponse
             * @constructor
             * @param {v388.protobuf.IAcceptCarCampaignResponse=} [properties] Properties to set
             */
            function AcceptCarCampaignResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AcceptCarCampaignResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @instance
             */
            AcceptCarCampaignResponse.prototype.error = 0;

            /**
             * Creates a new AcceptCarCampaignResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignResponse=} [properties] Properties to set
             * @returns {v388.protobuf.AcceptCarCampaignResponse} AcceptCarCampaignResponse instance
             */
            AcceptCarCampaignResponse.create = function create(properties) {
                return new AcceptCarCampaignResponse(properties);
            };

            /**
             * Encodes the specified AcceptCarCampaignResponse message. Does not implicitly {@link v388.protobuf.AcceptCarCampaignResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignResponse} message AcceptCarCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AcceptCarCampaignResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified AcceptCarCampaignResponse message, length delimited. Does not implicitly {@link v388.protobuf.AcceptCarCampaignResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {v388.protobuf.IAcceptCarCampaignResponse} message AcceptCarCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AcceptCarCampaignResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AcceptCarCampaignResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.AcceptCarCampaignResponse} AcceptCarCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AcceptCarCampaignResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.AcceptCarCampaignResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an AcceptCarCampaignResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.AcceptCarCampaignResponse} AcceptCarCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AcceptCarCampaignResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AcceptCarCampaignResponse message.
             * @function verify
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AcceptCarCampaignResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates an AcceptCarCampaignResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.AcceptCarCampaignResponse} AcceptCarCampaignResponse
             */
            AcceptCarCampaignResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.AcceptCarCampaignResponse)
                    return object;
                let message = new $root.v388.protobuf.AcceptCarCampaignResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an AcceptCarCampaignResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {v388.protobuf.AcceptCarCampaignResponse} message AcceptCarCampaignResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AcceptCarCampaignResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this AcceptCarCampaignResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AcceptCarCampaignResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AcceptCarCampaignResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.AcceptCarCampaignResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AcceptCarCampaignResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.AcceptCarCampaignResponse";
            };

            return AcceptCarCampaignResponse;
        })();

        protobuf.LoadGhostCompetitionRankingRequest = (function() {

            /**
             * Properties of a LoadGhostCompetitionRankingRequest.
             * @memberof v388.protobuf
             * @interface ILoadGhostCompetitionRankingRequest
             * @property {number} carId LoadGhostCompetitionRankingRequest carId
             * @property {number} competitionId LoadGhostCompetitionRankingRequest competitionId
             */

            /**
             * Constructs a new LoadGhostCompetitionRankingRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostCompetitionRankingRequest.
             * @implements ILoadGhostCompetitionRankingRequest
             * @constructor
             * @param {v388.protobuf.ILoadGhostCompetitionRankingRequest=} [properties] Properties to set
             */
            function LoadGhostCompetitionRankingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionRankingRequest carId.
             * @member {number} carId
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             */
            LoadGhostCompetitionRankingRequest.prototype.carId = 0;

            /**
             * LoadGhostCompetitionRankingRequest competitionId.
             * @member {number} competitionId
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             */
            LoadGhostCompetitionRankingRequest.prototype.competitionId = 0;

            /**
             * Creates a new LoadGhostCompetitionRankingRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingRequest=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest instance
             */
            LoadGhostCompetitionRankingRequest.create = function create(properties) {
                return new LoadGhostCompetitionRankingRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingRequest message. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.competitionId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingRequest message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionRankingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostCompetitionRankingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionRankingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionRankingRequest message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionRankingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionRankingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             */
            LoadGhostCompetitionRankingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostCompetitionRankingRequest)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostCompetitionRankingRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionRankingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {v388.protobuf.LoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionRankingRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.competitionId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionRankingRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionRankingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionRankingRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionRankingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostCompetitionRankingRequest";
            };

            return LoadGhostCompetitionRankingRequest;
        })();

        protobuf.LoadGhostCompetitionRankingResponse = (function() {

            /**
             * Properties of a LoadGhostCompetitionRankingResponse.
             * @memberof v388.protobuf
             * @interface ILoadGhostCompetitionRankingResponse
             * @property {v388.protobuf.ErrorCode} error LoadGhostCompetitionRankingResponse error
             * @property {number|null} [periodId] LoadGhostCompetitionRankingResponse periodId
             * @property {number} numOfParticipants LoadGhostCompetitionRankingResponse numOfParticipants
             * @property {v388.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] LoadGhostCompetitionRankingResponse competitionSchedule
             * @property {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry|null} [ownRecord] LoadGhostCompetitionRankingResponse ownRecord
             * @property {Array.<v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry>|null} [topRecords] LoadGhostCompetitionRankingResponse topRecords
             */

            /**
             * Constructs a new LoadGhostCompetitionRankingResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a LoadGhostCompetitionRankingResponse.
             * @implements ILoadGhostCompetitionRankingResponse
             * @constructor
             * @param {v388.protobuf.ILoadGhostCompetitionRankingResponse=} [properties] Properties to set
             */
            function LoadGhostCompetitionRankingResponse(properties) {
                this.topRecords = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionRankingResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.error = 0;

            /**
             * LoadGhostCompetitionRankingResponse periodId.
             * @member {number} periodId
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.periodId = 0;

            /**
             * LoadGhostCompetitionRankingResponse numOfParticipants.
             * @member {number} numOfParticipants
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.numOfParticipants = 0;

            /**
             * LoadGhostCompetitionRankingResponse competitionSchedule.
             * @member {v388.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.competitionSchedule = null;

            /**
             * LoadGhostCompetitionRankingResponse ownRecord.
             * @member {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry|null|undefined} ownRecord
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.ownRecord = null;

            /**
             * LoadGhostCompetitionRankingResponse topRecords.
             * @member {Array.<v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry>} topRecords
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.topRecords = $util.emptyArray;

            /**
             * Creates a new LoadGhostCompetitionRankingResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingResponse=} [properties] Properties to set
             * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse instance
             */
            LoadGhostCompetitionRankingResponse.create = function create(properties) {
                return new LoadGhostCompetitionRankingResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingResponse message. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.periodId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfParticipants);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.v388.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.ownRecord != null && Object.hasOwnProperty.call(message, "ownRecord"))
                    $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.encode(message.ownRecord, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.topRecords != null && message.topRecords.length)
                    for (let i = 0; i < message.topRecords.length; ++i)
                        $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.encode(message.topRecords[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingResponse message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {v388.protobuf.ILoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionRankingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostCompetitionRankingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.periodId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.numOfParticipants = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.ownRecord = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            if (!(message.topRecords && message.topRecords.length))
                                message.topRecords = [];
                            message.topRecords.push($root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfParticipants"))
                    throw $util.ProtocolError("missing required 'numOfParticipants'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionRankingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionRankingResponse message.
             * @function verify
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionRankingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    if (!$util.isInteger(message.periodId))
                        return "periodId: integer expected";
                if (!$util.isInteger(message.numOfParticipants))
                    return "numOfParticipants: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.v388.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord")) {
                    let error = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify(message.ownRecord);
                    if (error)
                        return "ownRecord." + error;
                }
                if (message.topRecords != null && message.hasOwnProperty("topRecords")) {
                    if (!Array.isArray(message.topRecords))
                        return "topRecords: array expected";
                    for (let i = 0; i < message.topRecords.length; ++i) {
                        let error = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify(message.topRecords[i]);
                        if (error)
                            return "topRecords." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionRankingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             */
            LoadGhostCompetitionRankingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.LoadGhostCompetitionRankingResponse)
                    return object;
                let message = new $root.v388.protobuf.LoadGhostCompetitionRankingResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                if (object.periodId != null)
                    message.periodId = object.periodId >>> 0;
                if (object.numOfParticipants != null)
                    message.numOfParticipants = object.numOfParticipants >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".v388.protobuf.LoadGhostCompetitionRankingResponse.competitionSchedule: object expected");
                    message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                if (object.ownRecord != null) {
                    if (typeof object.ownRecord !== "object")
                        throw TypeError(".v388.protobuf.LoadGhostCompetitionRankingResponse.ownRecord: object expected");
                    message.ownRecord = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.fromObject(object.ownRecord);
                }
                if (object.topRecords) {
                    if (!Array.isArray(object.topRecords))
                        throw TypeError(".v388.protobuf.LoadGhostCompetitionRankingResponse.topRecords: array expected");
                    message.topRecords = [];
                    for (let i = 0; i < object.topRecords.length; ++i) {
                        if (typeof object.topRecords[i] !== "object")
                            throw TypeError(".v388.protobuf.LoadGhostCompetitionRankingResponse.topRecords: object expected");
                        message.topRecords[i] = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.fromObject(object.topRecords[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionRankingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {v388.protobuf.LoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionRankingResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.topRecords = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.periodId = 0;
                    object.numOfParticipants = 0;
                    object.competitionSchedule = null;
                    object.ownRecord = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    object.periodId = message.periodId;
                if (message.numOfParticipants != null && message.hasOwnProperty("numOfParticipants"))
                    object.numOfParticipants = message.numOfParticipants;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord"))
                    object.ownRecord = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.toObject(message.ownRecord, options);
                if (message.topRecords && message.topRecords.length) {
                    object.topRecords = [];
                    for (let j = 0; j < message.topRecords.length; ++j)
                        object.topRecords[j] = $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.toObject(message.topRecords[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionRankingResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionRankingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionRankingResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionRankingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.LoadGhostCompetitionRankingResponse";
            };

            LoadGhostCompetitionRankingResponse.Entry = (function() {

                /**
                 * Properties of an Entry.
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
                 * @interface IEntry
                 * @property {number} rank Entry rank
                 * @property {number} result Entry result
                 * @property {number} carId Entry carId
                 * @property {string} name Entry name
                 * @property {number} regionId Entry regionId
                 * @property {number} model Entry model
                 * @property {number} visualModel Entry visualModel
                 * @property {number} defaultColor Entry defaultColor
                 * @property {number} title Entry title
                 * @property {number} level Entry level
                 * @property {string|null} [teamName] Entry teamName
                 * @property {string} playedShopName Entry playedShopName
                 * @property {number} playedAt Entry playedAt
                 */

                /**
                 * Constructs a new Entry.
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse
                 * @classdesc Represents an Entry.
                 * @implements IEntry
                 * @constructor
                 * @param {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry=} [properties] Properties to set
                 */
                function Entry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Entry rank.
                 * @member {number} rank
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.rank = 0;

                /**
                 * Entry result.
                 * @member {number} result
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.result = 0;

                /**
                 * Entry carId.
                 * @member {number} carId
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.carId = 0;

                /**
                 * Entry name.
                 * @member {string} name
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.name = "";

                /**
                 * Entry regionId.
                 * @member {number} regionId
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.regionId = 0;

                /**
                 * Entry model.
                 * @member {number} model
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.model = 0;

                /**
                 * Entry visualModel.
                 * @member {number} visualModel
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.visualModel = 0;

                /**
                 * Entry defaultColor.
                 * @member {number} defaultColor
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.defaultColor = 0;

                /**
                 * Entry title.
                 * @member {number} title
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.title = 0;

                /**
                 * Entry level.
                 * @member {number} level
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.level = 0;

                /**
                 * Entry teamName.
                 * @member {string} teamName
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.teamName = "";

                /**
                 * Entry playedShopName.
                 * @member {string} playedShopName
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.playedShopName = "";

                /**
                 * Entry playedAt.
                 * @member {number} playedAt
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.playedAt = 0;

                /**
                 * Creates a new Entry instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry=} [properties] Properties to set
                 * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry instance
                 */
                Entry.create = function create(properties) {
                    return new Entry(properties);
                };

                /**
                 * Encodes the specified Entry message. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
                    writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.result);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carId);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.regionId);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.model);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.visualModel);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.defaultColor);
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.title);
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.level);
                    if (message.teamName != null && Object.hasOwnProperty.call(message, "teamName"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.teamName);
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.playedShopName);
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.playedAt);
                    return writer;
                };

                /**
                 * Encodes the specified Entry message, length delimited. Does not implicitly {@link v388.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {v388.protobuf.LoadGhostCompetitionRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.rank = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 3: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 5: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.model = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.visualModel = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.defaultColor = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.title = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.level = reader.uint32();
                                break;
                            }
                        case 12: {
                                message.teamName = reader.string();
                                break;
                            }
                        case 13: {
                                message.playedShopName = reader.string();
                                break;
                            }
                        case 14: {
                                message.playedAt = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("rank"))
                        throw $util.ProtocolError("missing required 'rank'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    if (!message.hasOwnProperty("model"))
                        throw $util.ProtocolError("missing required 'model'", { instance: message });
                    if (!message.hasOwnProperty("visualModel"))
                        throw $util.ProtocolError("missing required 'visualModel'", { instance: message });
                    if (!message.hasOwnProperty("defaultColor"))
                        throw $util.ProtocolError("missing required 'defaultColor'", { instance: message });
                    if (!message.hasOwnProperty("title"))
                        throw $util.ProtocolError("missing required 'title'", { instance: message });
                    if (!message.hasOwnProperty("level"))
                        throw $util.ProtocolError("missing required 'level'", { instance: message });
                    if (!message.hasOwnProperty("playedShopName"))
                        throw $util.ProtocolError("missing required 'playedShopName'", { instance: message });
                    if (!message.hasOwnProperty("playedAt"))
                        throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Entry message.
                 * @function verify
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Entry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                    if (!$util.isInteger(message.title))
                        return "title: integer expected";
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                    if (message.teamName != null && message.hasOwnProperty("teamName"))
                        if (!$util.isString(message.teamName))
                            return "teamName: string expected";
                    if (!$util.isString(message.playedShopName))
                        return "playedShopName: string expected";
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                    return null;
                };

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 */
                Entry.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry)
                        return object;
                    let message = new $root.v388.protobuf.LoadGhostCompetitionRankingResponse.Entry();
                    if (object.rank != null)
                        message.rank = object.rank >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    if (object.model != null)
                        message.model = object.model >>> 0;
                    if (object.visualModel != null)
                        message.visualModel = object.visualModel >>> 0;
                    if (object.defaultColor != null)
                        message.defaultColor = object.defaultColor >>> 0;
                    if (object.title != null)
                        message.title = object.title >>> 0;
                    if (object.level != null)
                        message.level = object.level >>> 0;
                    if (object.teamName != null)
                        message.teamName = String(object.teamName);
                    if (object.playedShopName != null)
                        message.playedShopName = String(object.playedShopName);
                    if (object.playedAt != null)
                        message.playedAt = object.playedAt >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Entry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {v388.protobuf.LoadGhostCompetitionRankingResponse.Entry} message Entry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Entry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.rank = 0;
                        object.result = 0;
                        object.carId = 0;
                        object.name = "";
                        object.regionId = 0;
                        object.model = 0;
                        object.visualModel = 0;
                        object.defaultColor = 0;
                        object.title = 0;
                        object.level = 0;
                        object.teamName = "";
                        object.playedShopName = "";
                        object.playedAt = 0;
                    }
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        object.rank = message.rank;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                        object.visualModel = message.visualModel;
                    if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                        object.defaultColor = message.defaultColor;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.level != null && message.hasOwnProperty("level"))
                        object.level = message.level;
                    if (message.teamName != null && message.hasOwnProperty("teamName"))
                        object.teamName = message.teamName;
                    if (message.playedShopName != null && message.hasOwnProperty("playedShopName"))
                        object.playedShopName = message.playedShopName;
                    if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                        object.playedAt = message.playedAt;
                    return object;
                };

                /**
                 * Converts this Entry to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Entry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Entry
                 * @function getTypeUrl
                 * @memberof v388.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.LoadGhostCompetitionRankingResponse.Entry";
                };

                return Entry;
            })();

            return LoadGhostCompetitionRankingResponse;
        })();

        protobuf.SaveFaceRecognitionResultRequest = (function() {

            /**
             * Properties of a SaveFaceRecognitionResultRequest.
             * @memberof v388.protobuf
             * @interface ISaveFaceRecognitionResultRequest
             * @property {number} userId SaveFaceRecognitionResultRequest userId
             * @property {number} timestamp SaveFaceRecognitionResultRequest timestamp
             * @property {string} placeId SaveFaceRecognitionResultRequest placeId
             * @property {string} pcbSerial SaveFaceRecognitionResultRequest pcbSerial
             * @property {number} age SaveFaceRecognitionResultRequest age
             * @property {number} ageConfidence SaveFaceRecognitionResultRequest ageConfidence
             * @property {number} ageIntegrations SaveFaceRecognitionResultRequest ageIntegrations
             * @property {number} gender SaveFaceRecognitionResultRequest gender
             * @property {number} genderConfidence SaveFaceRecognitionResultRequest genderConfidence
             * @property {number} genderIntegrations SaveFaceRecognitionResultRequest genderIntegrations
             */

            /**
             * Constructs a new SaveFaceRecognitionResultRequest.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveFaceRecognitionResultRequest.
             * @implements ISaveFaceRecognitionResultRequest
             * @constructor
             * @param {v388.protobuf.ISaveFaceRecognitionResultRequest=} [properties] Properties to set
             */
            function SaveFaceRecognitionResultRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveFaceRecognitionResultRequest userId.
             * @member {number} userId
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.userId = 0;

            /**
             * SaveFaceRecognitionResultRequest timestamp.
             * @member {number} timestamp
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.timestamp = 0;

            /**
             * SaveFaceRecognitionResultRequest placeId.
             * @member {string} placeId
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.placeId = "";

            /**
             * SaveFaceRecognitionResultRequest pcbSerial.
             * @member {string} pcbSerial
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.pcbSerial = "";

            /**
             * SaveFaceRecognitionResultRequest age.
             * @member {number} age
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.age = 0;

            /**
             * SaveFaceRecognitionResultRequest ageConfidence.
             * @member {number} ageConfidence
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.ageConfidence = 0;

            /**
             * SaveFaceRecognitionResultRequest ageIntegrations.
             * @member {number} ageIntegrations
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.ageIntegrations = 0;

            /**
             * SaveFaceRecognitionResultRequest gender.
             * @member {number} gender
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.gender = 0;

            /**
             * SaveFaceRecognitionResultRequest genderConfidence.
             * @member {number} genderConfidence
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.genderConfidence = 0;

            /**
             * SaveFaceRecognitionResultRequest genderIntegrations.
             * @member {number} genderIntegrations
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             */
            SaveFaceRecognitionResultRequest.prototype.genderIntegrations = 0;

            /**
             * Creates a new SaveFaceRecognitionResultRequest instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultRequest=} [properties] Properties to set
             * @returns {v388.protobuf.SaveFaceRecognitionResultRequest} SaveFaceRecognitionResultRequest instance
             */
            SaveFaceRecognitionResultRequest.create = function create(properties) {
                return new SaveFaceRecognitionResultRequest(properties);
            };

            /**
             * Encodes the specified SaveFaceRecognitionResultRequest message. Does not implicitly {@link v388.protobuf.SaveFaceRecognitionResultRequest.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultRequest} message SaveFaceRecognitionResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveFaceRecognitionResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.pcbSerial);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.age);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ageConfidence);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.ageIntegrations);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.gender);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.genderConfidence);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.genderIntegrations);
                return writer;
            };

            /**
             * Encodes the specified SaveFaceRecognitionResultRequest message, length delimited. Does not implicitly {@link v388.protobuf.SaveFaceRecognitionResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultRequest} message SaveFaceRecognitionResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveFaceRecognitionResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveFaceRecognitionResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveFaceRecognitionResultRequest} SaveFaceRecognitionResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveFaceRecognitionResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveFaceRecognitionResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 4: {
                            message.pcbSerial = reader.string();
                            break;
                        }
                    case 5: {
                            message.age = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.ageConfidence = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.ageIntegrations = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.gender = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.genderConfidence = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.genderIntegrations = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("pcbSerial"))
                    throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                if (!message.hasOwnProperty("age"))
                    throw $util.ProtocolError("missing required 'age'", { instance: message });
                if (!message.hasOwnProperty("ageConfidence"))
                    throw $util.ProtocolError("missing required 'ageConfidence'", { instance: message });
                if (!message.hasOwnProperty("ageIntegrations"))
                    throw $util.ProtocolError("missing required 'ageIntegrations'", { instance: message });
                if (!message.hasOwnProperty("gender"))
                    throw $util.ProtocolError("missing required 'gender'", { instance: message });
                if (!message.hasOwnProperty("genderConfidence"))
                    throw $util.ProtocolError("missing required 'genderConfidence'", { instance: message });
                if (!message.hasOwnProperty("genderIntegrations"))
                    throw $util.ProtocolError("missing required 'genderIntegrations'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveFaceRecognitionResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveFaceRecognitionResultRequest} SaveFaceRecognitionResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveFaceRecognitionResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveFaceRecognitionResultRequest message.
             * @function verify
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveFaceRecognitionResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (!$util.isString(message.pcbSerial))
                    return "pcbSerial: string expected";
                if (!$util.isInteger(message.age))
                    return "age: integer expected";
                if (!$util.isInteger(message.ageConfidence))
                    return "ageConfidence: integer expected";
                if (!$util.isInteger(message.ageIntegrations))
                    return "ageIntegrations: integer expected";
                if (!$util.isInteger(message.gender))
                    return "gender: integer expected";
                if (!$util.isInteger(message.genderConfidence))
                    return "genderConfidence: integer expected";
                if (!$util.isInteger(message.genderIntegrations))
                    return "genderIntegrations: integer expected";
                return null;
            };

            /**
             * Creates a SaveFaceRecognitionResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveFaceRecognitionResultRequest} SaveFaceRecognitionResultRequest
             */
            SaveFaceRecognitionResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveFaceRecognitionResultRequest)
                    return object;
                let message = new $root.v388.protobuf.SaveFaceRecognitionResultRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.pcbSerial != null)
                    message.pcbSerial = String(object.pcbSerial);
                if (object.age != null)
                    message.age = object.age >>> 0;
                if (object.ageConfidence != null)
                    message.ageConfidence = object.ageConfidence >>> 0;
                if (object.ageIntegrations != null)
                    message.ageIntegrations = object.ageIntegrations >>> 0;
                if (object.gender != null)
                    message.gender = object.gender >>> 0;
                if (object.genderConfidence != null)
                    message.genderConfidence = object.genderConfidence >>> 0;
                if (object.genderIntegrations != null)
                    message.genderIntegrations = object.genderIntegrations >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SaveFaceRecognitionResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {v388.protobuf.SaveFaceRecognitionResultRequest} message SaveFaceRecognitionResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveFaceRecognitionResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.timestamp = 0;
                    object.placeId = "";
                    object.pcbSerial = "";
                    object.age = 0;
                    object.ageConfidence = 0;
                    object.ageIntegrations = 0;
                    object.gender = 0;
                    object.genderConfidence = 0;
                    object.genderIntegrations = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                    object.pcbSerial = message.pcbSerial;
                if (message.age != null && message.hasOwnProperty("age"))
                    object.age = message.age;
                if (message.ageConfidence != null && message.hasOwnProperty("ageConfidence"))
                    object.ageConfidence = message.ageConfidence;
                if (message.ageIntegrations != null && message.hasOwnProperty("ageIntegrations"))
                    object.ageIntegrations = message.ageIntegrations;
                if (message.gender != null && message.hasOwnProperty("gender"))
                    object.gender = message.gender;
                if (message.genderConfidence != null && message.hasOwnProperty("genderConfidence"))
                    object.genderConfidence = message.genderConfidence;
                if (message.genderIntegrations != null && message.hasOwnProperty("genderIntegrations"))
                    object.genderIntegrations = message.genderIntegrations;
                return object;
            };

            /**
             * Converts this SaveFaceRecognitionResultRequest to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveFaceRecognitionResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveFaceRecognitionResultRequest
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveFaceRecognitionResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveFaceRecognitionResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveFaceRecognitionResultRequest";
            };

            return SaveFaceRecognitionResultRequest;
        })();

        protobuf.SaveFaceRecognitionResultResponse = (function() {

            /**
             * Properties of a SaveFaceRecognitionResultResponse.
             * @memberof v388.protobuf
             * @interface ISaveFaceRecognitionResultResponse
             * @property {v388.protobuf.ErrorCode} error SaveFaceRecognitionResultResponse error
             */

            /**
             * Constructs a new SaveFaceRecognitionResultResponse.
             * @memberof v388.protobuf
             * @classdesc Represents a SaveFaceRecognitionResultResponse.
             * @implements ISaveFaceRecognitionResultResponse
             * @constructor
             * @param {v388.protobuf.ISaveFaceRecognitionResultResponse=} [properties] Properties to set
             */
            function SaveFaceRecognitionResultResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveFaceRecognitionResultResponse error.
             * @member {v388.protobuf.ErrorCode} error
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @instance
             */
            SaveFaceRecognitionResultResponse.prototype.error = 0;

            /**
             * Creates a new SaveFaceRecognitionResultResponse instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultResponse=} [properties] Properties to set
             * @returns {v388.protobuf.SaveFaceRecognitionResultResponse} SaveFaceRecognitionResultResponse instance
             */
            SaveFaceRecognitionResultResponse.create = function create(properties) {
                return new SaveFaceRecognitionResultResponse(properties);
            };

            /**
             * Encodes the specified SaveFaceRecognitionResultResponse message. Does not implicitly {@link v388.protobuf.SaveFaceRecognitionResultResponse.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultResponse} message SaveFaceRecognitionResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveFaceRecognitionResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveFaceRecognitionResultResponse message, length delimited. Does not implicitly {@link v388.protobuf.SaveFaceRecognitionResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {v388.protobuf.ISaveFaceRecognitionResultResponse} message SaveFaceRecognitionResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveFaceRecognitionResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveFaceRecognitionResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SaveFaceRecognitionResultResponse} SaveFaceRecognitionResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveFaceRecognitionResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SaveFaceRecognitionResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveFaceRecognitionResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SaveFaceRecognitionResultResponse} SaveFaceRecognitionResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveFaceRecognitionResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveFaceRecognitionResultResponse message.
             * @function verify
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveFaceRecognitionResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveFaceRecognitionResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SaveFaceRecognitionResultResponse} SaveFaceRecognitionResultResponse
             */
            SaveFaceRecognitionResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SaveFaceRecognitionResultResponse)
                    return object;
                let message = new $root.v388.protobuf.SaveFaceRecognitionResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_TEAM_LOCKED":
                case 8:
                    message.error = 8;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_TEAM_DISSOLVED":
                case 10:
                    message.error = 10;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveFaceRecognitionResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {v388.protobuf.SaveFaceRecognitionResultResponse} message SaveFaceRecognitionResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveFaceRecognitionResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.v388.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.v388.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveFaceRecognitionResultResponse to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveFaceRecognitionResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveFaceRecognitionResultResponse
             * @function getTypeUrl
             * @memberof v388.protobuf.SaveFaceRecognitionResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveFaceRecognitionResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SaveFaceRecognitionResultResponse";
            };

            return SaveFaceRecognitionResultResponse;
        })();

        protobuf.Car = (function() {

            /**
             * Properties of a Car.
             * @memberof v388.protobuf
             * @interface ICar
             * @property {number|null} [carId] Car carId
             * @property {number|null} [regionId] Car regionId
             * @property {string|null} [name] Car name
             * @property {string|null} [searchCode] Car searchCode
             * @property {number|null} [manufacturer] Car manufacturer
             * @property {number|null} [model] Car model
             * @property {number|null} [visualModel] Car visualModel
             * @property {number|null} [defaultColor] Car defaultColor
             * @property {number} customColor Car customColor
             * @property {number} wheel Car wheel
             * @property {number} wheelColor Car wheelColor
             * @property {number} aero Car aero
             * @property {number} bonnet Car bonnet
             * @property {number} wing Car wing
             * @property {number} mirror Car mirror
             * @property {number} sticker Car sticker
             * @property {number} stickerColor Car stickerColor
             * @property {number} neon Car neon
             * @property {number} trunk Car trunk
             * @property {number} plate Car plate
             * @property {number} plateColor Car plateColor
             * @property {number} specialSticker Car specialSticker
             * @property {number} specialStickerColor Car specialStickerColor
             * @property {number} tunePower Car tunePower
             * @property {number} tuneHandling Car tuneHandling
             * @property {number} title Car title
             * @property {number} level Car level
             * @property {boolean|null} [teamSticker] Car teamSticker
             * @property {number|null} [teamId] Car teamId
             * @property {string|null} [teamName] Car teamName
             * @property {number|null} [teamStickerFont] Car teamStickerFont
             * @property {number|null} [lastPlayedAt] Car lastPlayedAt
             * @property {v388.protobuf.IPlace|null} [lastPlayedPlace] Car lastPlayedPlace
             * @property {number|null} [aura] Car aura
             * @property {number|null} [ghostLevel] Car ghostLevel
             * @property {string|null} [country] Car country
             */

            /**
             * Constructs a new Car.
             * @memberof v388.protobuf
             * @classdesc Represents a Car.
             * @implements ICar
             * @constructor
             * @param {v388.protobuf.ICar=} [properties] Properties to set
             */
            function Car(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Car carId.
             * @member {number} carId
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.carId = 0;

            /**
             * Car regionId.
             * @member {number} regionId
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.regionId = 0;

            /**
             * Car name.
             * @member {string} name
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.name = "";

            /**
             * Car searchCode.
             * @member {string} searchCode
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.searchCode = "";

            /**
             * Car manufacturer.
             * @member {number} manufacturer
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.manufacturer = 0;

            /**
             * Car model.
             * @member {number} model
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.model = 0;

            /**
             * Car visualModel.
             * @member {number} visualModel
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.visualModel = 0;

            /**
             * Car defaultColor.
             * @member {number} defaultColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.defaultColor = 0;

            /**
             * Car customColor.
             * @member {number} customColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.customColor = 0;

            /**
             * Car wheel.
             * @member {number} wheel
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.wheel = 0;

            /**
             * Car wheelColor.
             * @member {number} wheelColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.wheelColor = 0;

            /**
             * Car aero.
             * @member {number} aero
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.aero = 0;

            /**
             * Car bonnet.
             * @member {number} bonnet
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.bonnet = 0;

            /**
             * Car wing.
             * @member {number} wing
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.wing = 0;

            /**
             * Car mirror.
             * @member {number} mirror
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.mirror = 0;

            /**
             * Car sticker.
             * @member {number} sticker
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.sticker = 0;

            /**
             * Car stickerColor.
             * @member {number} stickerColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.stickerColor = 0;

            /**
             * Car neon.
             * @member {number} neon
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.neon = 0;

            /**
             * Car trunk.
             * @member {number} trunk
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.trunk = 0;

            /**
             * Car plate.
             * @member {number} plate
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.plate = 0;

            /**
             * Car plateColor.
             * @member {number} plateColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.plateColor = 0;

            /**
             * Car specialSticker.
             * @member {number} specialSticker
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.specialSticker = 0;

            /**
             * Car specialStickerColor.
             * @member {number} specialStickerColor
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.specialStickerColor = 0;

            /**
             * Car tunePower.
             * @member {number} tunePower
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.tunePower = 0;

            /**
             * Car tuneHandling.
             * @member {number} tuneHandling
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.tuneHandling = 0;

            /**
             * Car title.
             * @member {number} title
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.title = 0;

            /**
             * Car level.
             * @member {number} level
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.level = 0;

            /**
             * Car teamSticker.
             * @member {boolean} teamSticker
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.teamSticker = false;

            /**
             * Car teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.teamId = 0;

            /**
             * Car teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.teamName = "";

            /**
             * Car teamStickerFont.
             * @member {number} teamStickerFont
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.teamStickerFont = 0;

            /**
             * Car lastPlayedAt.
             * @member {number} lastPlayedAt
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.lastPlayedAt = 0;

            /**
             * Car lastPlayedPlace.
             * @member {v388.protobuf.IPlace|null|undefined} lastPlayedPlace
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.lastPlayedPlace = null;

            /**
             * Car aura.
             * @member {number} aura
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.aura = 0;

            /**
             * Car ghostLevel.
             * @member {number} ghostLevel
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.ghostLevel = 0;

            /**
             * Car country.
             * @member {string} country
             * @memberof v388.protobuf.Car
             * @instance
             */
            Car.prototype.country = "";

            /**
             * Creates a new Car instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.Car
             * @static
             * @param {v388.protobuf.ICar=} [properties] Properties to set
             * @returns {v388.protobuf.Car} Car instance
             */
            Car.create = function create(properties) {
                return new Car(properties);
            };

            /**
             * Encodes the specified Car message. Does not implicitly {@link v388.protobuf.Car.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.Car
             * @static
             * @param {v388.protobuf.ICar} message Car message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Car.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.regionId != null && Object.hasOwnProperty.call(message, "regionId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.regionId);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.searchCode != null && Object.hasOwnProperty.call(message, "searchCode"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.searchCode);
                if (message.manufacturer != null && Object.hasOwnProperty.call(message, "manufacturer"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.manufacturer);
                if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.model);
                if (message.visualModel != null && Object.hasOwnProperty.call(message, "visualModel"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.visualModel);
                if (message.defaultColor != null && Object.hasOwnProperty.call(message, "defaultColor"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.defaultColor);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.customColor);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.wheel);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.wheelColor);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.aero);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.bonnet);
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.wing);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.mirror);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.sticker);
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.stickerColor);
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.neon);
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.trunk);
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.plate);
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.plateColor);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.specialSticker);
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.specialStickerColor);
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.tunePower);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.tuneHandling);
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.title);
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.level);
                if (message.teamSticker != null && Object.hasOwnProperty.call(message, "teamSticker"))
                    writer.uint32(/* id 28, wireType 0 =*/224).bool(message.teamSticker);
                if (message.teamId != null && Object.hasOwnProperty.call(message, "teamId"))
                    writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.teamId);
                if (message.teamName != null && Object.hasOwnProperty.call(message, "teamName"))
                    writer.uint32(/* id 30, wireType 2 =*/242).string(message.teamName);
                if (message.teamStickerFont != null && Object.hasOwnProperty.call(message, "teamStickerFont"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.teamStickerFont);
                if (message.lastPlayedAt != null && Object.hasOwnProperty.call(message, "lastPlayedAt"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.lastPlayedAt);
                if (message.lastPlayedPlace != null && Object.hasOwnProperty.call(message, "lastPlayedPlace"))
                    $root.v388.protobuf.Place.encode(message.lastPlayedPlace, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
                if (message.aura != null && Object.hasOwnProperty.call(message, "aura"))
                    writer.uint32(/* id 34, wireType 0 =*/272).uint32(message.aura);
                if (message.ghostLevel != null && Object.hasOwnProperty.call(message, "ghostLevel"))
                    writer.uint32(/* id 35, wireType 0 =*/280).uint32(message.ghostLevel);
                if (message.country != null && Object.hasOwnProperty.call(message, "country"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.country);
                return writer;
            };

            /**
             * Encodes the specified Car message, length delimited. Does not implicitly {@link v388.protobuf.Car.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.Car
             * @static
             * @param {v388.protobuf.ICar} message Car message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Car.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Car message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.Car
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.Car} Car
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Car.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.Car();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.name = reader.string();
                            break;
                        }
                    case 4: {
                            message.searchCode = reader.string();
                            break;
                        }
                    case 5: {
                            message.manufacturer = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.model = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.visualModel = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.defaultColor = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.customColor = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.wheel = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.wheelColor = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.aero = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.bonnet = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.wing = reader.uint32();
                            break;
                        }
                    case 15: {
                            message.mirror = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.sticker = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.stickerColor = reader.uint32();
                            break;
                        }
                    case 18: {
                            message.neon = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.trunk = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.plate = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.plateColor = reader.uint32();
                            break;
                        }
                    case 22: {
                            message.specialSticker = reader.uint32();
                            break;
                        }
                    case 23: {
                            message.specialStickerColor = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.tunePower = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.tuneHandling = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.title = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.level = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.teamSticker = reader.bool();
                            break;
                        }
                    case 29: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    case 30: {
                            message.teamName = reader.string();
                            break;
                        }
                    case 31: {
                            message.teamStickerFont = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.lastPlayedAt = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.lastPlayedPlace = $root.v388.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    case 34: {
                            message.aura = reader.uint32();
                            break;
                        }
                    case 35: {
                            message.ghostLevel = reader.uint32();
                            break;
                        }
                    case 36: {
                            message.country = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("customColor"))
                    throw $util.ProtocolError("missing required 'customColor'", { instance: message });
                if (!message.hasOwnProperty("wheel"))
                    throw $util.ProtocolError("missing required 'wheel'", { instance: message });
                if (!message.hasOwnProperty("wheelColor"))
                    throw $util.ProtocolError("missing required 'wheelColor'", { instance: message });
                if (!message.hasOwnProperty("aero"))
                    throw $util.ProtocolError("missing required 'aero'", { instance: message });
                if (!message.hasOwnProperty("bonnet"))
                    throw $util.ProtocolError("missing required 'bonnet'", { instance: message });
                if (!message.hasOwnProperty("wing"))
                    throw $util.ProtocolError("missing required 'wing'", { instance: message });
                if (!message.hasOwnProperty("mirror"))
                    throw $util.ProtocolError("missing required 'mirror'", { instance: message });
                if (!message.hasOwnProperty("sticker"))
                    throw $util.ProtocolError("missing required 'sticker'", { instance: message });
                if (!message.hasOwnProperty("stickerColor"))
                    throw $util.ProtocolError("missing required 'stickerColor'", { instance: message });
                if (!message.hasOwnProperty("neon"))
                    throw $util.ProtocolError("missing required 'neon'", { instance: message });
                if (!message.hasOwnProperty("trunk"))
                    throw $util.ProtocolError("missing required 'trunk'", { instance: message });
                if (!message.hasOwnProperty("plate"))
                    throw $util.ProtocolError("missing required 'plate'", { instance: message });
                if (!message.hasOwnProperty("plateColor"))
                    throw $util.ProtocolError("missing required 'plateColor'", { instance: message });
                if (!message.hasOwnProperty("specialSticker"))
                    throw $util.ProtocolError("missing required 'specialSticker'", { instance: message });
                if (!message.hasOwnProperty("specialStickerColor"))
                    throw $util.ProtocolError("missing required 'specialStickerColor'", { instance: message });
                if (!message.hasOwnProperty("tunePower"))
                    throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                if (!message.hasOwnProperty("tuneHandling"))
                    throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                if (!message.hasOwnProperty("title"))
                    throw $util.ProtocolError("missing required 'title'", { instance: message });
                if (!message.hasOwnProperty("level"))
                    throw $util.ProtocolError("missing required 'level'", { instance: message });
                return message;
            };

            /**
             * Decodes a Car message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.Car
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.Car} Car
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Car.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Car message.
             * @function verify
             * @memberof v388.protobuf.Car
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Car.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    if (!$util.isString(message.searchCode))
                        return "searchCode: string expected";
                if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                    if (!$util.isInteger(message.manufacturer))
                        return "manufacturer: integer expected";
                if (message.model != null && message.hasOwnProperty("model"))
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                if (!$util.isInteger(message.customColor))
                    return "customColor: integer expected";
                if (!$util.isInteger(message.wheel))
                    return "wheel: integer expected";
                if (!$util.isInteger(message.wheelColor))
                    return "wheelColor: integer expected";
                if (!$util.isInteger(message.aero))
                    return "aero: integer expected";
                if (!$util.isInteger(message.bonnet))
                    return "bonnet: integer expected";
                if (!$util.isInteger(message.wing))
                    return "wing: integer expected";
                if (!$util.isInteger(message.mirror))
                    return "mirror: integer expected";
                if (!$util.isInteger(message.sticker))
                    return "sticker: integer expected";
                if (!$util.isInteger(message.stickerColor))
                    return "stickerColor: integer expected";
                if (!$util.isInteger(message.neon))
                    return "neon: integer expected";
                if (!$util.isInteger(message.trunk))
                    return "trunk: integer expected";
                if (!$util.isInteger(message.plate))
                    return "plate: integer expected";
                if (!$util.isInteger(message.plateColor))
                    return "plateColor: integer expected";
                if (!$util.isInteger(message.specialSticker))
                    return "specialSticker: integer expected";
                if (!$util.isInteger(message.specialStickerColor))
                    return "specialStickerColor: integer expected";
                if (!$util.isInteger(message.tunePower))
                    return "tunePower: integer expected";
                if (!$util.isInteger(message.tuneHandling))
                    return "tuneHandling: integer expected";
                if (!$util.isInteger(message.title))
                    return "title: integer expected";
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
                if (message.teamSticker != null && message.hasOwnProperty("teamSticker"))
                    if (typeof message.teamSticker !== "boolean")
                        return "teamSticker: boolean expected";
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    if (!$util.isInteger(message.teamId))
                        return "teamId: integer expected";
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    if (!$util.isString(message.teamName))
                        return "teamName: string expected";
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    if (!$util.isInteger(message.teamStickerFont))
                        return "teamStickerFont: integer expected";
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    if (!$util.isInteger(message.lastPlayedAt))
                        return "lastPlayedAt: integer expected";
                if (message.lastPlayedPlace != null && message.hasOwnProperty("lastPlayedPlace")) {
                    let error = $root.v388.protobuf.Place.verify(message.lastPlayedPlace);
                    if (error)
                        return "lastPlayedPlace." + error;
                }
                if (message.aura != null && message.hasOwnProperty("aura"))
                    if (!$util.isInteger(message.aura))
                        return "aura: integer expected";
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    if (!$util.isInteger(message.ghostLevel))
                        return "ghostLevel: integer expected";
                if (message.country != null && message.hasOwnProperty("country"))
                    if (!$util.isString(message.country))
                        return "country: string expected";
                return null;
            };

            /**
             * Creates a Car message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.Car
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.Car} Car
             */
            Car.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.Car)
                    return object;
                let message = new $root.v388.protobuf.Car();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.searchCode != null)
                    message.searchCode = String(object.searchCode);
                if (object.manufacturer != null)
                    message.manufacturer = object.manufacturer >>> 0;
                if (object.model != null)
                    message.model = object.model >>> 0;
                if (object.visualModel != null)
                    message.visualModel = object.visualModel >>> 0;
                if (object.defaultColor != null)
                    message.defaultColor = object.defaultColor >>> 0;
                if (object.customColor != null)
                    message.customColor = object.customColor >>> 0;
                if (object.wheel != null)
                    message.wheel = object.wheel >>> 0;
                if (object.wheelColor != null)
                    message.wheelColor = object.wheelColor >>> 0;
                if (object.aero != null)
                    message.aero = object.aero >>> 0;
                if (object.bonnet != null)
                    message.bonnet = object.bonnet >>> 0;
                if (object.wing != null)
                    message.wing = object.wing >>> 0;
                if (object.mirror != null)
                    message.mirror = object.mirror >>> 0;
                if (object.sticker != null)
                    message.sticker = object.sticker >>> 0;
                if (object.stickerColor != null)
                    message.stickerColor = object.stickerColor >>> 0;
                if (object.neon != null)
                    message.neon = object.neon >>> 0;
                if (object.trunk != null)
                    message.trunk = object.trunk >>> 0;
                if (object.plate != null)
                    message.plate = object.plate >>> 0;
                if (object.plateColor != null)
                    message.plateColor = object.plateColor >>> 0;
                if (object.specialSticker != null)
                    message.specialSticker = object.specialSticker >>> 0;
                if (object.specialStickerColor != null)
                    message.specialStickerColor = object.specialStickerColor >>> 0;
                if (object.tunePower != null)
                    message.tunePower = object.tunePower >>> 0;
                if (object.tuneHandling != null)
                    message.tuneHandling = object.tuneHandling >>> 0;
                if (object.title != null)
                    message.title = object.title >>> 0;
                if (object.level != null)
                    message.level = object.level >>> 0;
                if (object.teamSticker != null)
                    message.teamSticker = Boolean(object.teamSticker);
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                if (object.teamStickerFont != null)
                    message.teamStickerFont = object.teamStickerFont >>> 0;
                if (object.lastPlayedAt != null)
                    message.lastPlayedAt = object.lastPlayedAt >>> 0;
                if (object.lastPlayedPlace != null) {
                    if (typeof object.lastPlayedPlace !== "object")
                        throw TypeError(".v388.protobuf.Car.lastPlayedPlace: object expected");
                    message.lastPlayedPlace = $root.v388.protobuf.Place.fromObject(object.lastPlayedPlace);
                }
                if (object.aura != null)
                    message.aura = object.aura >>> 0;
                if (object.ghostLevel != null)
                    message.ghostLevel = object.ghostLevel >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                return message;
            };

            /**
             * Creates a plain object from a Car message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.Car
             * @static
             * @param {v388.protobuf.Car} message Car
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Car.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.regionId = 0;
                    object.name = "";
                    object.searchCode = "";
                    object.manufacturer = 0;
                    object.model = 0;
                    object.visualModel = 0;
                    object.defaultColor = 0;
                    object.customColor = 0;
                    object.wheel = 0;
                    object.wheelColor = 0;
                    object.aero = 0;
                    object.bonnet = 0;
                    object.wing = 0;
                    object.mirror = 0;
                    object.sticker = 0;
                    object.stickerColor = 0;
                    object.neon = 0;
                    object.trunk = 0;
                    object.plate = 0;
                    object.plateColor = 0;
                    object.specialSticker = 0;
                    object.specialStickerColor = 0;
                    object.tunePower = 0;
                    object.tuneHandling = 0;
                    object.title = 0;
                    object.level = 0;
                    object.teamSticker = false;
                    object.teamId = 0;
                    object.teamName = "";
                    object.teamStickerFont = 0;
                    object.lastPlayedAt = 0;
                    object.lastPlayedPlace = null;
                    object.aura = 0;
                    object.ghostLevel = 0;
                    object.country = "";
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    object.searchCode = message.searchCode;
                if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                    object.manufacturer = message.manufacturer;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                    object.visualModel = message.visualModel;
                if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                    object.defaultColor = message.defaultColor;
                if (message.customColor != null && message.hasOwnProperty("customColor"))
                    object.customColor = message.customColor;
                if (message.wheel != null && message.hasOwnProperty("wheel"))
                    object.wheel = message.wheel;
                if (message.wheelColor != null && message.hasOwnProperty("wheelColor"))
                    object.wheelColor = message.wheelColor;
                if (message.aero != null && message.hasOwnProperty("aero"))
                    object.aero = message.aero;
                if (message.bonnet != null && message.hasOwnProperty("bonnet"))
                    object.bonnet = message.bonnet;
                if (message.wing != null && message.hasOwnProperty("wing"))
                    object.wing = message.wing;
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.sticker != null && message.hasOwnProperty("sticker"))
                    object.sticker = message.sticker;
                if (message.stickerColor != null && message.hasOwnProperty("stickerColor"))
                    object.stickerColor = message.stickerColor;
                if (message.neon != null && message.hasOwnProperty("neon"))
                    object.neon = message.neon;
                if (message.trunk != null && message.hasOwnProperty("trunk"))
                    object.trunk = message.trunk;
                if (message.plate != null && message.hasOwnProperty("plate"))
                    object.plate = message.plate;
                if (message.plateColor != null && message.hasOwnProperty("plateColor"))
                    object.plateColor = message.plateColor;
                if (message.specialSticker != null && message.hasOwnProperty("specialSticker"))
                    object.specialSticker = message.specialSticker;
                if (message.specialStickerColor != null && message.hasOwnProperty("specialStickerColor"))
                    object.specialStickerColor = message.specialStickerColor;
                if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                    object.tunePower = message.tunePower;
                if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                    object.tuneHandling = message.tuneHandling;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.teamSticker != null && message.hasOwnProperty("teamSticker"))
                    object.teamSticker = message.teamSticker;
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                if (message.teamStickerFont != null && message.hasOwnProperty("teamStickerFont"))
                    object.teamStickerFont = message.teamStickerFont;
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    object.lastPlayedAt = message.lastPlayedAt;
                if (message.lastPlayedPlace != null && message.hasOwnProperty("lastPlayedPlace"))
                    object.lastPlayedPlace = $root.v388.protobuf.Place.toObject(message.lastPlayedPlace, options);
                if (message.aura != null && message.hasOwnProperty("aura"))
                    object.aura = message.aura;
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    object.ghostLevel = message.ghostLevel;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                return object;
            };

            /**
             * Converts this Car to JSON.
             * @function toJSON
             * @memberof v388.protobuf.Car
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Car.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Car
             * @function getTypeUrl
             * @memberof v388.protobuf.Car
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Car.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.Car";
            };

            return Car;
        })();

        protobuf.CarSetting = (function() {

            /**
             * Properties of a CarSetting.
             * @memberof v388.protobuf
             * @interface ICarSetting
             * @property {number|null} [carId] CarSetting carId
             * @property {boolean} view CarSetting view
             * @property {boolean} transmission CarSetting transmission
             * @property {boolean} retire CarSetting retire
             * @property {number} meter CarSetting meter
             * @property {number} volume CarSetting volume
             * @property {number} bgm CarSetting bgm
             * @property {number} nameplate CarSetting nameplate
             * @property {number} nameplateColor CarSetting nameplateColor
             */

            /**
             * Constructs a new CarSetting.
             * @memberof v388.protobuf
             * @classdesc Represents a CarSetting.
             * @implements ICarSetting
             * @constructor
             * @param {v388.protobuf.ICarSetting=} [properties] Properties to set
             */
            function CarSetting(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarSetting carId.
             * @member {number} carId
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.carId = 0;

            /**
             * CarSetting view.
             * @member {boolean} view
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.view = false;

            /**
             * CarSetting transmission.
             * @member {boolean} transmission
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.transmission = false;

            /**
             * CarSetting retire.
             * @member {boolean} retire
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.retire = false;

            /**
             * CarSetting meter.
             * @member {number} meter
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.meter = 0;

            /**
             * CarSetting volume.
             * @member {number} volume
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.volume = 0;

            /**
             * CarSetting bgm.
             * @member {number} bgm
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.bgm = 0;

            /**
             * CarSetting nameplate.
             * @member {number} nameplate
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.nameplate = 0;

            /**
             * CarSetting nameplateColor.
             * @member {number} nameplateColor
             * @memberof v388.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.nameplateColor = 0;

            /**
             * Creates a new CarSetting instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {v388.protobuf.ICarSetting=} [properties] Properties to set
             * @returns {v388.protobuf.CarSetting} CarSetting instance
             */
            CarSetting.create = function create(properties) {
                return new CarSetting(properties);
            };

            /**
             * Encodes the specified CarSetting message. Does not implicitly {@link v388.protobuf.CarSetting.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {v388.protobuf.ICarSetting} message CarSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSetting.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.view);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.transmission);
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.retire);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.meter);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.volume);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.bgm);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.nameplate);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.nameplateColor);
                return writer;
            };

            /**
             * Encodes the specified CarSetting message, length delimited. Does not implicitly {@link v388.protobuf.CarSetting.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {v388.protobuf.ICarSetting} message CarSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSetting.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarSetting message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CarSetting} CarSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSetting.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CarSetting();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.view = reader.bool();
                            break;
                        }
                    case 3: {
                            message.transmission = reader.bool();
                            break;
                        }
                    case 4: {
                            message.retire = reader.bool();
                            break;
                        }
                    case 5: {
                            message.meter = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.volume = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.bgm = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.nameplate = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.nameplateColor = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("view"))
                    throw $util.ProtocolError("missing required 'view'", { instance: message });
                if (!message.hasOwnProperty("transmission"))
                    throw $util.ProtocolError("missing required 'transmission'", { instance: message });
                if (!message.hasOwnProperty("retire"))
                    throw $util.ProtocolError("missing required 'retire'", { instance: message });
                if (!message.hasOwnProperty("meter"))
                    throw $util.ProtocolError("missing required 'meter'", { instance: message });
                if (!message.hasOwnProperty("volume"))
                    throw $util.ProtocolError("missing required 'volume'", { instance: message });
                if (!message.hasOwnProperty("bgm"))
                    throw $util.ProtocolError("missing required 'bgm'", { instance: message });
                if (!message.hasOwnProperty("nameplate"))
                    throw $util.ProtocolError("missing required 'nameplate'", { instance: message });
                if (!message.hasOwnProperty("nameplateColor"))
                    throw $util.ProtocolError("missing required 'nameplateColor'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarSetting message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CarSetting} CarSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSetting.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarSetting message.
             * @function verify
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarSetting.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (typeof message.view !== "boolean")
                    return "view: boolean expected";
                if (typeof message.transmission !== "boolean")
                    return "transmission: boolean expected";
                if (typeof message.retire !== "boolean")
                    return "retire: boolean expected";
                if (!$util.isInteger(message.meter))
                    return "meter: integer expected";
                if (!$util.isInteger(message.volume))
                    return "volume: integer expected";
                if (!$util.isInteger(message.bgm))
                    return "bgm: integer expected";
                if (!$util.isInteger(message.nameplate))
                    return "nameplate: integer expected";
                if (!$util.isInteger(message.nameplateColor))
                    return "nameplateColor: integer expected";
                return null;
            };

            /**
             * Creates a CarSetting message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CarSetting} CarSetting
             */
            CarSetting.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CarSetting)
                    return object;
                let message = new $root.v388.protobuf.CarSetting();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.view != null)
                    message.view = Boolean(object.view);
                if (object.transmission != null)
                    message.transmission = Boolean(object.transmission);
                if (object.retire != null)
                    message.retire = Boolean(object.retire);
                if (object.meter != null)
                    message.meter = object.meter >>> 0;
                if (object.volume != null)
                    message.volume = object.volume >>> 0;
                if (object.bgm != null)
                    message.bgm = object.bgm >>> 0;
                if (object.nameplate != null)
                    message.nameplate = object.nameplate >>> 0;
                if (object.nameplateColor != null)
                    message.nameplateColor = object.nameplateColor >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CarSetting message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {v388.protobuf.CarSetting} message CarSetting
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarSetting.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.view = false;
                    object.transmission = false;
                    object.retire = false;
                    object.meter = 0;
                    object.volume = 0;
                    object.bgm = 0;
                    object.nameplate = 0;
                    object.nameplateColor = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.view != null && message.hasOwnProperty("view"))
                    object.view = message.view;
                if (message.transmission != null && message.hasOwnProperty("transmission"))
                    object.transmission = message.transmission;
                if (message.retire != null && message.hasOwnProperty("retire"))
                    object.retire = message.retire;
                if (message.meter != null && message.hasOwnProperty("meter"))
                    object.meter = message.meter;
                if (message.volume != null && message.hasOwnProperty("volume"))
                    object.volume = message.volume;
                if (message.bgm != null && message.hasOwnProperty("bgm"))
                    object.bgm = message.bgm;
                if (message.nameplate != null && message.hasOwnProperty("nameplate"))
                    object.nameplate = message.nameplate;
                if (message.nameplateColor != null && message.hasOwnProperty("nameplateColor"))
                    object.nameplateColor = message.nameplateColor;
                return object;
            };

            /**
             * Converts this CarSetting to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CarSetting
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarSetting.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarSetting
             * @function getTypeUrl
             * @memberof v388.protobuf.CarSetting
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CarSetting";
            };

            return CarSetting;
        })();

        protobuf.FriendCar = (function() {

            /**
             * Properties of a FriendCar.
             * @memberof v388.protobuf
             * @interface IFriendCar
             * @property {v388.protobuf.ICar} car FriendCar car
             * @property {number} friendshipLevel FriendCar friendshipLevel
             * @property {number} revengeLevel FriendCar revengeLevel
             * @property {boolean} nonhuman FriendCar nonhuman
             */

            /**
             * Constructs a new FriendCar.
             * @memberof v388.protobuf
             * @classdesc Represents a FriendCar.
             * @implements IFriendCar
             * @constructor
             * @param {v388.protobuf.IFriendCar=} [properties] Properties to set
             */
            function FriendCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FriendCar car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.car = null;

            /**
             * FriendCar friendshipLevel.
             * @member {number} friendshipLevel
             * @memberof v388.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.friendshipLevel = 0;

            /**
             * FriendCar revengeLevel.
             * @member {number} revengeLevel
             * @memberof v388.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.revengeLevel = 0;

            /**
             * FriendCar nonhuman.
             * @member {boolean} nonhuman
             * @memberof v388.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.nonhuman = false;

            /**
             * Creates a new FriendCar instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {v388.protobuf.IFriendCar=} [properties] Properties to set
             * @returns {v388.protobuf.FriendCar} FriendCar instance
             */
            FriendCar.create = function create(properties) {
                return new FriendCar(properties);
            };

            /**
             * Encodes the specified FriendCar message. Does not implicitly {@link v388.protobuf.FriendCar.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {v388.protobuf.IFriendCar} message FriendCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendshipLevel);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.revengeLevel);
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.nonhuman);
                return writer;
            };

            /**
             * Encodes the specified FriendCar message, length delimited. Does not implicitly {@link v388.protobuf.FriendCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {v388.protobuf.IFriendCar} message FriendCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FriendCar message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.FriendCar} FriendCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.FriendCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.friendshipLevel = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.revengeLevel = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.nonhuman = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("friendshipLevel"))
                    throw $util.ProtocolError("missing required 'friendshipLevel'", { instance: message });
                if (!message.hasOwnProperty("revengeLevel"))
                    throw $util.ProtocolError("missing required 'revengeLevel'", { instance: message });
                if (!message.hasOwnProperty("nonhuman"))
                    throw $util.ProtocolError("missing required 'nonhuman'", { instance: message });
                return message;
            };

            /**
             * Decodes a FriendCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.FriendCar} FriendCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FriendCar message.
             * @function verify
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.friendshipLevel))
                    return "friendshipLevel: integer expected";
                if (!$util.isInteger(message.revengeLevel))
                    return "revengeLevel: integer expected";
                if (typeof message.nonhuman !== "boolean")
                    return "nonhuman: boolean expected";
                return null;
            };

            /**
             * Creates a FriendCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.FriendCar} FriendCar
             */
            FriendCar.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.FriendCar)
                    return object;
                let message = new $root.v388.protobuf.FriendCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.FriendCar.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.friendshipLevel != null)
                    message.friendshipLevel = object.friendshipLevel >>> 0;
                if (object.revengeLevel != null)
                    message.revengeLevel = object.revengeLevel >>> 0;
                if (object.nonhuman != null)
                    message.nonhuman = Boolean(object.nonhuman);
                return message;
            };

            /**
             * Creates a plain object from a FriendCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {v388.protobuf.FriendCar} message FriendCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.friendshipLevel = 0;
                    object.revengeLevel = 0;
                    object.nonhuman = false;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.friendshipLevel != null && message.hasOwnProperty("friendshipLevel"))
                    object.friendshipLevel = message.friendshipLevel;
                if (message.revengeLevel != null && message.hasOwnProperty("revengeLevel"))
                    object.revengeLevel = message.revengeLevel;
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    object.nonhuman = message.nonhuman;
                return object;
            };

            /**
             * Converts this FriendCar to JSON.
             * @function toJSON
             * @memberof v388.protobuf.FriendCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FriendCar
             * @function getTypeUrl
             * @memberof v388.protobuf.FriendCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FriendCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.FriendCar";
            };

            return FriendCar;
        })();

        protobuf.GhostCar = (function() {

            /**
             * Properties of a GhostCar.
             * @memberof v388.protobuf
             * @interface IGhostCar
             * @property {v388.protobuf.ICar} car GhostCar car
             * @property {number|null} [area] GhostCar area
             * @property {number|null} [ramp] GhostCar ramp
             * @property {number|null} [revengeLevel] GhostCar revengeLevel
             * @property {boolean|null} [nonhuman] GhostCar nonhuman
             * @property {number|null} [ghostLevel] GhostCar ghostLevel
             */

            /**
             * Constructs a new GhostCar.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostCar.
             * @implements IGhostCar
             * @constructor
             * @param {v388.protobuf.IGhostCar=} [properties] Properties to set
             */
            function GhostCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCar car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.car = null;

            /**
             * GhostCar area.
             * @member {number} area
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.area = 0;

            /**
             * GhostCar ramp.
             * @member {number} ramp
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.ramp = 0;

            /**
             * GhostCar revengeLevel.
             * @member {number} revengeLevel
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.revengeLevel = 0;

            /**
             * GhostCar nonhuman.
             * @member {boolean} nonhuman
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.nonhuman = false;

            /**
             * GhostCar ghostLevel.
             * @member {number} ghostLevel
             * @memberof v388.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.ghostLevel = 0;

            /**
             * Creates a new GhostCar instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {v388.protobuf.IGhostCar=} [properties] Properties to set
             * @returns {v388.protobuf.GhostCar} GhostCar instance
             */
            GhostCar.create = function create(properties) {
                return new GhostCar(properties);
            };

            /**
             * Encodes the specified GhostCar message. Does not implicitly {@link v388.protobuf.GhostCar.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {v388.protobuf.IGhostCar} message GhostCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.area);
                if (message.ramp != null && Object.hasOwnProperty.call(message, "ramp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ramp);
                if (message.revengeLevel != null && Object.hasOwnProperty.call(message, "revengeLevel"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.revengeLevel);
                if (message.nonhuman != null && Object.hasOwnProperty.call(message, "nonhuman"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.nonhuman);
                if (message.ghostLevel != null && Object.hasOwnProperty.call(message, "ghostLevel"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ghostLevel);
                return writer;
            };

            /**
             * Encodes the specified GhostCar message, length delimited. Does not implicitly {@link v388.protobuf.GhostCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {v388.protobuf.IGhostCar} message GhostCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCar message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostCar} GhostCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.revengeLevel = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.nonhuman = reader.bool();
                            break;
                        }
                    case 6: {
                            message.ghostLevel = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostCar} GhostCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCar message.
             * @function verify
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.area != null && message.hasOwnProperty("area"))
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    if (!$util.isInteger(message.ramp))
                        return "ramp: integer expected";
                if (message.revengeLevel != null && message.hasOwnProperty("revengeLevel"))
                    if (!$util.isInteger(message.revengeLevel))
                        return "revengeLevel: integer expected";
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    if (typeof message.nonhuman !== "boolean")
                        return "nonhuman: boolean expected";
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    if (!$util.isInteger(message.ghostLevel))
                        return "ghostLevel: integer expected";
                return null;
            };

            /**
             * Creates a GhostCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostCar} GhostCar
             */
            GhostCar.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostCar)
                    return object;
                let message = new $root.v388.protobuf.GhostCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.GhostCar.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.revengeLevel != null)
                    message.revengeLevel = object.revengeLevel >>> 0;
                if (object.nonhuman != null)
                    message.nonhuman = Boolean(object.nonhuman);
                if (object.ghostLevel != null)
                    message.ghostLevel = object.ghostLevel >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {v388.protobuf.GhostCar} message GhostCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.area = 0;
                    object.ramp = 0;
                    object.revengeLevel = 0;
                    object.nonhuman = false;
                    object.ghostLevel = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.revengeLevel != null && message.hasOwnProperty("revengeLevel"))
                    object.revengeLevel = message.revengeLevel;
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    object.nonhuman = message.nonhuman;
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    object.ghostLevel = message.ghostLevel;
                return object;
            };

            /**
             * Converts this GhostCar to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCar
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostCar";
            };

            return GhostCar;
        })();

        protobuf.GhostTrail = (function() {

            /**
             * Properties of a GhostTrail.
             * @memberof v388.protobuf
             * @interface IGhostTrail
             * @property {number} carId GhostTrail carId
             * @property {number} area GhostTrail area
             * @property {number} ramp GhostTrail ramp
             * @property {number} playedAt GhostTrail playedAt
             * @property {v388.protobuf.IPlace|null} [playedPlace] GhostTrail playedPlace
             * @property {Uint8Array} trail GhostTrail trail
             */

            /**
             * Constructs a new GhostTrail.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostTrail.
             * @implements IGhostTrail
             * @constructor
             * @param {v388.protobuf.IGhostTrail=} [properties] Properties to set
             */
            function GhostTrail(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostTrail carId.
             * @member {number} carId
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.carId = 0;

            /**
             * GhostTrail area.
             * @member {number} area
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.area = 0;

            /**
             * GhostTrail ramp.
             * @member {number} ramp
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.ramp = 0;

            /**
             * GhostTrail playedAt.
             * @member {number} playedAt
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.playedAt = 0;

            /**
             * GhostTrail playedPlace.
             * @member {v388.protobuf.IPlace|null|undefined} playedPlace
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.playedPlace = null;

            /**
             * GhostTrail trail.
             * @member {Uint8Array} trail
             * @memberof v388.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.trail = $util.newBuffer([]);

            /**
             * Creates a new GhostTrail instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {v388.protobuf.IGhostTrail=} [properties] Properties to set
             * @returns {v388.protobuf.GhostTrail} GhostTrail instance
             */
            GhostTrail.create = function create(properties) {
                return new GhostTrail(properties);
            };

            /**
             * Encodes the specified GhostTrail message. Does not implicitly {@link v388.protobuf.GhostTrail.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {v388.protobuf.IGhostTrail} message GhostTrail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostTrail.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.area);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ramp);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playedAt);
                if (message.playedPlace != null && Object.hasOwnProperty.call(message, "playedPlace"))
                    $root.v388.protobuf.Place.encode(message.playedPlace, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.trail);
                return writer;
            };

            /**
             * Encodes the specified GhostTrail message, length delimited. Does not implicitly {@link v388.protobuf.GhostTrail.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {v388.protobuf.IGhostTrail} message GhostTrail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostTrail.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostTrail message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostTrail} GhostTrail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostTrail.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostTrail();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.playedPlace = $root.v388.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.trail = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("ramp"))
                    throw $util.ProtocolError("missing required 'ramp'", { instance: message });
                if (!message.hasOwnProperty("playedAt"))
                    throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                if (!message.hasOwnProperty("trail"))
                    throw $util.ProtocolError("missing required 'trail'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostTrail message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostTrail} GhostTrail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostTrail.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostTrail message.
             * @function verify
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostTrail.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isInteger(message.ramp))
                    return "ramp: integer expected";
                if (!$util.isInteger(message.playedAt))
                    return "playedAt: integer expected";
                if (message.playedPlace != null && message.hasOwnProperty("playedPlace")) {
                    let error = $root.v388.protobuf.Place.verify(message.playedPlace);
                    if (error)
                        return "playedPlace." + error;
                }
                if (!(message.trail && typeof message.trail.length === "number" || $util.isString(message.trail)))
                    return "trail: buffer expected";
                return null;
            };

            /**
             * Creates a GhostTrail message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostTrail} GhostTrail
             */
            GhostTrail.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostTrail)
                    return object;
                let message = new $root.v388.protobuf.GhostTrail();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.playedPlace != null) {
                    if (typeof object.playedPlace !== "object")
                        throw TypeError(".v388.protobuf.GhostTrail.playedPlace: object expected");
                    message.playedPlace = $root.v388.protobuf.Place.fromObject(object.playedPlace);
                }
                if (object.trail != null)
                    if (typeof object.trail === "string")
                        $util.base64.decode(object.trail, message.trail = $util.newBuffer($util.base64.length(object.trail)), 0);
                    else if (object.trail.length >= 0)
                        message.trail = object.trail;
                return message;
            };

            /**
             * Creates a plain object from a GhostTrail message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {v388.protobuf.GhostTrail} message GhostTrail
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostTrail.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.area = 0;
                    object.ramp = 0;
                    object.playedAt = 0;
                    object.playedPlace = null;
                    if (options.bytes === String)
                        object.trail = "";
                    else {
                        object.trail = [];
                        if (options.bytes !== Array)
                            object.trail = $util.newBuffer(object.trail);
                    }
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.playedPlace != null && message.hasOwnProperty("playedPlace"))
                    object.playedPlace = $root.v388.protobuf.Place.toObject(message.playedPlace, options);
                if (message.trail != null && message.hasOwnProperty("trail"))
                    object.trail = options.bytes === String ? $util.base64.encode(message.trail, 0, message.trail.length) : options.bytes === Array ? Array.prototype.slice.call(message.trail) : message.trail;
                return object;
            };

            /**
             * Converts this GhostTrail to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostTrail
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostTrail.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostTrail
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostTrail
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostTrail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostTrail";
            };

            return GhostTrail;
        })();

        protobuf.Team = (function() {

            /**
             * Properties of a Team.
             * @memberof v388.protobuf
             * @interface ITeam
             * @property {number} teamId Team teamId
             * @property {string} name Team name
             * @property {number} numOfMembers Team numOfMembers
             * @property {number} numOfMemberCars Team numOfMemberCars
             * @property {number} leaderUserId Team leaderUserId
             * @property {string} leaderCarName Team leaderCarName
             * @property {number} leaderRegionId Team leaderRegionId
             * @property {number} stickerFont Team stickerFont
             * @property {boolean} fullfilled Team fullfilled
             * @property {boolean} closed Team closed
             * @property {boolean} recruitmentSuspended Team recruitmentSuspended
             * @property {number} createdAt Team createdAt
             * @property {v388.protobuf.IPlace} homePlace Team homePlace
             */

            /**
             * Constructs a new Team.
             * @memberof v388.protobuf
             * @classdesc Represents a Team.
             * @implements ITeam
             * @constructor
             * @param {v388.protobuf.ITeam=} [properties] Properties to set
             */
            function Team(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Team teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.teamId = 0;

            /**
             * Team name.
             * @member {string} name
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.name = "";

            /**
             * Team numOfMembers.
             * @member {number} numOfMembers
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.numOfMembers = 0;

            /**
             * Team numOfMemberCars.
             * @member {number} numOfMemberCars
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.numOfMemberCars = 0;

            /**
             * Team leaderUserId.
             * @member {number} leaderUserId
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.leaderUserId = 0;

            /**
             * Team leaderCarName.
             * @member {string} leaderCarName
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.leaderCarName = "";

            /**
             * Team leaderRegionId.
             * @member {number} leaderRegionId
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.leaderRegionId = 0;

            /**
             * Team stickerFont.
             * @member {number} stickerFont
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.stickerFont = 0;

            /**
             * Team fullfilled.
             * @member {boolean} fullfilled
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.fullfilled = false;

            /**
             * Team closed.
             * @member {boolean} closed
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.closed = false;

            /**
             * Team recruitmentSuspended.
             * @member {boolean} recruitmentSuspended
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.recruitmentSuspended = false;

            /**
             * Team createdAt.
             * @member {number} createdAt
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.createdAt = 0;

            /**
             * Team homePlace.
             * @member {v388.protobuf.IPlace} homePlace
             * @memberof v388.protobuf.Team
             * @instance
             */
            Team.prototype.homePlace = null;

            /**
             * Creates a new Team instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.Team
             * @static
             * @param {v388.protobuf.ITeam=} [properties] Properties to set
             * @returns {v388.protobuf.Team} Team instance
             */
            Team.create = function create(properties) {
                return new Team(properties);
            };

            /**
             * Encodes the specified Team message. Does not implicitly {@link v388.protobuf.Team.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.Team
             * @static
             * @param {v388.protobuf.ITeam} message Team message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Team.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfMembers);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfMemberCars);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.leaderUserId);
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leaderCarName);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.leaderRegionId);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stickerFont);
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fullfilled);
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.closed);
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.recruitmentSuspended);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.createdAt);
                $root.v388.protobuf.Place.encode(message.homePlace, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Team message, length delimited. Does not implicitly {@link v388.protobuf.Team.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.Team
             * @static
             * @param {v388.protobuf.ITeam} message Team message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Team.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Team message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.Team
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.Team} Team
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Team.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.Team();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.name = reader.string();
                            break;
                        }
                    case 3: {
                            message.numOfMembers = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfMemberCars = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.leaderUserId = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.leaderCarName = reader.string();
                            break;
                        }
                    case 7: {
                            message.leaderRegionId = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.stickerFont = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.fullfilled = reader.bool();
                            break;
                        }
                    case 10: {
                            message.closed = reader.bool();
                            break;
                        }
                    case 11: {
                            message.recruitmentSuspended = reader.bool();
                            break;
                        }
                    case 12: {
                            message.createdAt = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.homePlace = $root.v388.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("teamId"))
                    throw $util.ProtocolError("missing required 'teamId'", { instance: message });
                if (!message.hasOwnProperty("name"))
                    throw $util.ProtocolError("missing required 'name'", { instance: message });
                if (!message.hasOwnProperty("numOfMembers"))
                    throw $util.ProtocolError("missing required 'numOfMembers'", { instance: message });
                if (!message.hasOwnProperty("numOfMemberCars"))
                    throw $util.ProtocolError("missing required 'numOfMemberCars'", { instance: message });
                if (!message.hasOwnProperty("leaderUserId"))
                    throw $util.ProtocolError("missing required 'leaderUserId'", { instance: message });
                if (!message.hasOwnProperty("leaderCarName"))
                    throw $util.ProtocolError("missing required 'leaderCarName'", { instance: message });
                if (!message.hasOwnProperty("leaderRegionId"))
                    throw $util.ProtocolError("missing required 'leaderRegionId'", { instance: message });
                if (!message.hasOwnProperty("stickerFont"))
                    throw $util.ProtocolError("missing required 'stickerFont'", { instance: message });
                if (!message.hasOwnProperty("fullfilled"))
                    throw $util.ProtocolError("missing required 'fullfilled'", { instance: message });
                if (!message.hasOwnProperty("closed"))
                    throw $util.ProtocolError("missing required 'closed'", { instance: message });
                if (!message.hasOwnProperty("recruitmentSuspended"))
                    throw $util.ProtocolError("missing required 'recruitmentSuspended'", { instance: message });
                if (!message.hasOwnProperty("createdAt"))
                    throw $util.ProtocolError("missing required 'createdAt'", { instance: message });
                if (!message.hasOwnProperty("homePlace"))
                    throw $util.ProtocolError("missing required 'homePlace'", { instance: message });
                return message;
            };

            /**
             * Decodes a Team message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.Team
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.Team} Team
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Team.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Team message.
             * @function verify
             * @memberof v388.protobuf.Team
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Team.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.teamId))
                    return "teamId: integer expected";
                if (!$util.isString(message.name))
                    return "name: string expected";
                if (!$util.isInteger(message.numOfMembers))
                    return "numOfMembers: integer expected";
                if (!$util.isInteger(message.numOfMemberCars))
                    return "numOfMemberCars: integer expected";
                if (!$util.isInteger(message.leaderUserId))
                    return "leaderUserId: integer expected";
                if (!$util.isString(message.leaderCarName))
                    return "leaderCarName: string expected";
                if (!$util.isInteger(message.leaderRegionId))
                    return "leaderRegionId: integer expected";
                if (!$util.isInteger(message.stickerFont))
                    return "stickerFont: integer expected";
                if (typeof message.fullfilled !== "boolean")
                    return "fullfilled: boolean expected";
                if (typeof message.closed !== "boolean")
                    return "closed: boolean expected";
                if (typeof message.recruitmentSuspended !== "boolean")
                    return "recruitmentSuspended: boolean expected";
                if (!$util.isInteger(message.createdAt))
                    return "createdAt: integer expected";
                {
                    let error = $root.v388.protobuf.Place.verify(message.homePlace);
                    if (error)
                        return "homePlace." + error;
                }
                return null;
            };

            /**
             * Creates a Team message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.Team
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.Team} Team
             */
            Team.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.Team)
                    return object;
                let message = new $root.v388.protobuf.Team();
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.numOfMembers != null)
                    message.numOfMembers = object.numOfMembers >>> 0;
                if (object.numOfMemberCars != null)
                    message.numOfMemberCars = object.numOfMemberCars >>> 0;
                if (object.leaderUserId != null)
                    message.leaderUserId = object.leaderUserId >>> 0;
                if (object.leaderCarName != null)
                    message.leaderCarName = String(object.leaderCarName);
                if (object.leaderRegionId != null)
                    message.leaderRegionId = object.leaderRegionId >>> 0;
                if (object.stickerFont != null)
                    message.stickerFont = object.stickerFont >>> 0;
                if (object.fullfilled != null)
                    message.fullfilled = Boolean(object.fullfilled);
                if (object.closed != null)
                    message.closed = Boolean(object.closed);
                if (object.recruitmentSuspended != null)
                    message.recruitmentSuspended = Boolean(object.recruitmentSuspended);
                if (object.createdAt != null)
                    message.createdAt = object.createdAt >>> 0;
                if (object.homePlace != null) {
                    if (typeof object.homePlace !== "object")
                        throw TypeError(".v388.protobuf.Team.homePlace: object expected");
                    message.homePlace = $root.v388.protobuf.Place.fromObject(object.homePlace);
                }
                return message;
            };

            /**
             * Creates a plain object from a Team message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.Team
             * @static
             * @param {v388.protobuf.Team} message Team
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Team.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.teamId = 0;
                    object.name = "";
                    object.numOfMembers = 0;
                    object.numOfMemberCars = 0;
                    object.leaderUserId = 0;
                    object.leaderCarName = "";
                    object.leaderRegionId = 0;
                    object.stickerFont = 0;
                    object.fullfilled = false;
                    object.closed = false;
                    object.recruitmentSuspended = false;
                    object.createdAt = 0;
                    object.homePlace = null;
                }
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.numOfMembers != null && message.hasOwnProperty("numOfMembers"))
                    object.numOfMembers = message.numOfMembers;
                if (message.numOfMemberCars != null && message.hasOwnProperty("numOfMemberCars"))
                    object.numOfMemberCars = message.numOfMemberCars;
                if (message.leaderUserId != null && message.hasOwnProperty("leaderUserId"))
                    object.leaderUserId = message.leaderUserId;
                if (message.leaderCarName != null && message.hasOwnProperty("leaderCarName"))
                    object.leaderCarName = message.leaderCarName;
                if (message.leaderRegionId != null && message.hasOwnProperty("leaderRegionId"))
                    object.leaderRegionId = message.leaderRegionId;
                if (message.stickerFont != null && message.hasOwnProperty("stickerFont"))
                    object.stickerFont = message.stickerFont;
                if (message.fullfilled != null && message.hasOwnProperty("fullfilled"))
                    object.fullfilled = message.fullfilled;
                if (message.closed != null && message.hasOwnProperty("closed"))
                    object.closed = message.closed;
                if (message.recruitmentSuspended != null && message.hasOwnProperty("recruitmentSuspended"))
                    object.recruitmentSuspended = message.recruitmentSuspended;
                if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                    object.createdAt = message.createdAt;
                if (message.homePlace != null && message.hasOwnProperty("homePlace"))
                    object.homePlace = $root.v388.protobuf.Place.toObject(message.homePlace, options);
                return object;
            };

            /**
             * Converts this Team to JSON.
             * @function toJSON
             * @memberof v388.protobuf.Team
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Team.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Team
             * @function getTypeUrl
             * @memberof v388.protobuf.Team
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Team.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.Team";
            };

            return Team;
        })();

        protobuf.TeamMember = (function() {

            /**
             * Properties of a TeamMember.
             * @memberof v388.protobuf
             * @interface ITeamMember
             * @property {number} userId TeamMember userId
             * @property {v388.protobuf.ICar} car TeamMember car
             * @property {number} numOfOwnedCars TeamMember numOfOwnedCars
             */

            /**
             * Constructs a new TeamMember.
             * @memberof v388.protobuf
             * @classdesc Represents a TeamMember.
             * @implements ITeamMember
             * @constructor
             * @param {v388.protobuf.ITeamMember=} [properties] Properties to set
             */
            function TeamMember(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TeamMember userId.
             * @member {number} userId
             * @memberof v388.protobuf.TeamMember
             * @instance
             */
            TeamMember.prototype.userId = 0;

            /**
             * TeamMember car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.TeamMember
             * @instance
             */
            TeamMember.prototype.car = null;

            /**
             * TeamMember numOfOwnedCars.
             * @member {number} numOfOwnedCars
             * @memberof v388.protobuf.TeamMember
             * @instance
             */
            TeamMember.prototype.numOfOwnedCars = 0;

            /**
             * Creates a new TeamMember instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {v388.protobuf.ITeamMember=} [properties] Properties to set
             * @returns {v388.protobuf.TeamMember} TeamMember instance
             */
            TeamMember.create = function create(properties) {
                return new TeamMember(properties);
            };

            /**
             * Encodes the specified TeamMember message. Does not implicitly {@link v388.protobuf.TeamMember.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {v388.protobuf.ITeamMember} message TeamMember message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamMember.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfOwnedCars);
                return writer;
            };

            /**
             * Encodes the specified TeamMember message, length delimited. Does not implicitly {@link v388.protobuf.TeamMember.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {v388.protobuf.ITeamMember} message TeamMember message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamMember.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TeamMember message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.TeamMember} TeamMember
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamMember.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.TeamMember();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.numOfOwnedCars = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("numOfOwnedCars"))
                    throw $util.ProtocolError("missing required 'numOfOwnedCars'", { instance: message });
                return message;
            };

            /**
             * Decodes a TeamMember message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.TeamMember} TeamMember
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamMember.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TeamMember message.
             * @function verify
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TeamMember.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.numOfOwnedCars))
                    return "numOfOwnedCars: integer expected";
                return null;
            };

            /**
             * Creates a TeamMember message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.TeamMember} TeamMember
             */
            TeamMember.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.TeamMember)
                    return object;
                let message = new $root.v388.protobuf.TeamMember();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.TeamMember.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.numOfOwnedCars != null)
                    message.numOfOwnedCars = object.numOfOwnedCars >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TeamMember message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {v388.protobuf.TeamMember} message TeamMember
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TeamMember.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.car = null;
                    object.numOfOwnedCars = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.numOfOwnedCars != null && message.hasOwnProperty("numOfOwnedCars"))
                    object.numOfOwnedCars = message.numOfOwnedCars;
                return object;
            };

            /**
             * Converts this TeamMember to JSON.
             * @function toJSON
             * @memberof v388.protobuf.TeamMember
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TeamMember.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TeamMember
             * @function getTypeUrl
             * @memberof v388.protobuf.TeamMember
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TeamMember.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.TeamMember";
            };

            return TeamMember;
        })();

        protobuf.TeamApplicant = (function() {

            /**
             * Properties of a TeamApplicant.
             * @memberof v388.protobuf
             * @interface ITeamApplicant
             * @property {number} userId TeamApplicant userId
             * @property {v388.protobuf.ICar} car TeamApplicant car
             * @property {number} numOfOwnedCars TeamApplicant numOfOwnedCars
             * @property {number} expiresAt TeamApplicant expiresAt
             */

            /**
             * Constructs a new TeamApplicant.
             * @memberof v388.protobuf
             * @classdesc Represents a TeamApplicant.
             * @implements ITeamApplicant
             * @constructor
             * @param {v388.protobuf.ITeamApplicant=} [properties] Properties to set
             */
            function TeamApplicant(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TeamApplicant userId.
             * @member {number} userId
             * @memberof v388.protobuf.TeamApplicant
             * @instance
             */
            TeamApplicant.prototype.userId = 0;

            /**
             * TeamApplicant car.
             * @member {v388.protobuf.ICar} car
             * @memberof v388.protobuf.TeamApplicant
             * @instance
             */
            TeamApplicant.prototype.car = null;

            /**
             * TeamApplicant numOfOwnedCars.
             * @member {number} numOfOwnedCars
             * @memberof v388.protobuf.TeamApplicant
             * @instance
             */
            TeamApplicant.prototype.numOfOwnedCars = 0;

            /**
             * TeamApplicant expiresAt.
             * @member {number} expiresAt
             * @memberof v388.protobuf.TeamApplicant
             * @instance
             */
            TeamApplicant.prototype.expiresAt = 0;

            /**
             * Creates a new TeamApplicant instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {v388.protobuf.ITeamApplicant=} [properties] Properties to set
             * @returns {v388.protobuf.TeamApplicant} TeamApplicant instance
             */
            TeamApplicant.create = function create(properties) {
                return new TeamApplicant(properties);
            };

            /**
             * Encodes the specified TeamApplicant message. Does not implicitly {@link v388.protobuf.TeamApplicant.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {v388.protobuf.ITeamApplicant} message TeamApplicant message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamApplicant.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                $root.v388.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfOwnedCars);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.expiresAt);
                return writer;
            };

            /**
             * Encodes the specified TeamApplicant message, length delimited. Does not implicitly {@link v388.protobuf.TeamApplicant.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {v388.protobuf.ITeamApplicant} message TeamApplicant message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamApplicant.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TeamApplicant message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.TeamApplicant} TeamApplicant
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamApplicant.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.TeamApplicant();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.car = $root.v388.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.numOfOwnedCars = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.expiresAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("numOfOwnedCars"))
                    throw $util.ProtocolError("missing required 'numOfOwnedCars'", { instance: message });
                if (!message.hasOwnProperty("expiresAt"))
                    throw $util.ProtocolError("missing required 'expiresAt'", { instance: message });
                return message;
            };

            /**
             * Decodes a TeamApplicant message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.TeamApplicant} TeamApplicant
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamApplicant.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TeamApplicant message.
             * @function verify
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TeamApplicant.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                {
                    let error = $root.v388.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.numOfOwnedCars))
                    return "numOfOwnedCars: integer expected";
                if (!$util.isInteger(message.expiresAt))
                    return "expiresAt: integer expected";
                return null;
            };

            /**
             * Creates a TeamApplicant message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.TeamApplicant} TeamApplicant
             */
            TeamApplicant.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.TeamApplicant)
                    return object;
                let message = new $root.v388.protobuf.TeamApplicant();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".v388.protobuf.TeamApplicant.car: object expected");
                    message.car = $root.v388.protobuf.Car.fromObject(object.car);
                }
                if (object.numOfOwnedCars != null)
                    message.numOfOwnedCars = object.numOfOwnedCars >>> 0;
                if (object.expiresAt != null)
                    message.expiresAt = object.expiresAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TeamApplicant message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {v388.protobuf.TeamApplicant} message TeamApplicant
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TeamApplicant.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.car = null;
                    object.numOfOwnedCars = 0;
                    object.expiresAt = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.v388.protobuf.Car.toObject(message.car, options);
                if (message.numOfOwnedCars != null && message.hasOwnProperty("numOfOwnedCars"))
                    object.numOfOwnedCars = message.numOfOwnedCars;
                if (message.expiresAt != null && message.hasOwnProperty("expiresAt"))
                    object.expiresAt = message.expiresAt;
                return object;
            };

            /**
             * Converts this TeamApplicant to JSON.
             * @function toJSON
             * @memberof v388.protobuf.TeamApplicant
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TeamApplicant.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TeamApplicant
             * @function getTypeUrl
             * @memberof v388.protobuf.TeamApplicant
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TeamApplicant.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.TeamApplicant";
            };

            return TeamApplicant;
        })();

        protobuf.TeamSticker = (function() {

            /**
             * Properties of a TeamSticker.
             * @memberof v388.protobuf
             * @interface ITeamSticker
             * @property {number|null} [teamId] TeamSticker teamId
             * @property {string|null} [teamName] TeamSticker teamName
             * @property {number} count TeamSticker count
             */

            /**
             * Constructs a new TeamSticker.
             * @memberof v388.protobuf
             * @classdesc Represents a TeamSticker.
             * @implements ITeamSticker
             * @constructor
             * @param {v388.protobuf.ITeamSticker=} [properties] Properties to set
             */
            function TeamSticker(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TeamSticker teamId.
             * @member {number} teamId
             * @memberof v388.protobuf.TeamSticker
             * @instance
             */
            TeamSticker.prototype.teamId = 0;

            /**
             * TeamSticker teamName.
             * @member {string} teamName
             * @memberof v388.protobuf.TeamSticker
             * @instance
             */
            TeamSticker.prototype.teamName = "";

            /**
             * TeamSticker count.
             * @member {number} count
             * @memberof v388.protobuf.TeamSticker
             * @instance
             */
            TeamSticker.prototype.count = 0;

            /**
             * Creates a new TeamSticker instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {v388.protobuf.ITeamSticker=} [properties] Properties to set
             * @returns {v388.protobuf.TeamSticker} TeamSticker instance
             */
            TeamSticker.create = function create(properties) {
                return new TeamSticker(properties);
            };

            /**
             * Encodes the specified TeamSticker message. Does not implicitly {@link v388.protobuf.TeamSticker.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {v388.protobuf.ITeamSticker} message TeamSticker message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamSticker.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.teamId != null && Object.hasOwnProperty.call(message, "teamId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.teamId);
                if (message.teamName != null && Object.hasOwnProperty.call(message, "teamName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.teamName);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.count);
                return writer;
            };

            /**
             * Encodes the specified TeamSticker message, length delimited. Does not implicitly {@link v388.protobuf.TeamSticker.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {v388.protobuf.ITeamSticker} message TeamSticker message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamSticker.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TeamSticker message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.TeamSticker} TeamSticker
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamSticker.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.TeamSticker();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.teamId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.teamName = reader.string();
                            break;
                        }
                    case 3: {
                            message.count = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("count"))
                    throw $util.ProtocolError("missing required 'count'", { instance: message });
                return message;
            };

            /**
             * Decodes a TeamSticker message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.TeamSticker} TeamSticker
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamSticker.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TeamSticker message.
             * @function verify
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TeamSticker.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    if (!$util.isInteger(message.teamId))
                        return "teamId: integer expected";
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    if (!$util.isString(message.teamName))
                        return "teamName: string expected";
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
                return null;
            };

            /**
             * Creates a TeamSticker message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.TeamSticker} TeamSticker
             */
            TeamSticker.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.TeamSticker)
                    return object;
                let message = new $root.v388.protobuf.TeamSticker();
                if (object.teamId != null)
                    message.teamId = object.teamId >>> 0;
                if (object.teamName != null)
                    message.teamName = String(object.teamName);
                if (object.count != null)
                    message.count = object.count >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TeamSticker message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {v388.protobuf.TeamSticker} message TeamSticker
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TeamSticker.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.teamId = 0;
                    object.teamName = "";
                    object.count = 0;
                }
                if (message.teamId != null && message.hasOwnProperty("teamId"))
                    object.teamId = message.teamId;
                if (message.teamName != null && message.hasOwnProperty("teamName"))
                    object.teamName = message.teamName;
                if (message.count != null && message.hasOwnProperty("count"))
                    object.count = message.count;
                return object;
            };

            /**
             * Converts this TeamSticker to JSON.
             * @function toJSON
             * @memberof v388.protobuf.TeamSticker
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TeamSticker.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TeamSticker
             * @function getTypeUrl
             * @memberof v388.protobuf.TeamSticker
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TeamSticker.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.TeamSticker";
            };

            return TeamSticker;
        })();

        protobuf.Place = (function() {

            /**
             * Properties of a Place.
             * @memberof v388.protobuf
             * @interface IPlace
             * @property {string} placeId Place placeId
             * @property {string} shopName Place shopName
             * @property {number} regionId Place regionId
             * @property {string} country Place country
             */

            /**
             * Constructs a new Place.
             * @memberof v388.protobuf
             * @classdesc Represents a Place.
             * @implements IPlace
             * @constructor
             * @param {v388.protobuf.IPlace=} [properties] Properties to set
             */
            function Place(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Place placeId.
             * @member {string} placeId
             * @memberof v388.protobuf.Place
             * @instance
             */
            Place.prototype.placeId = "";

            /**
             * Place shopName.
             * @member {string} shopName
             * @memberof v388.protobuf.Place
             * @instance
             */
            Place.prototype.shopName = "";

            /**
             * Place regionId.
             * @member {number} regionId
             * @memberof v388.protobuf.Place
             * @instance
             */
            Place.prototype.regionId = 0;

            /**
             * Place country.
             * @member {string} country
             * @memberof v388.protobuf.Place
             * @instance
             */
            Place.prototype.country = "";

            /**
             * Creates a new Place instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.Place
             * @static
             * @param {v388.protobuf.IPlace=} [properties] Properties to set
             * @returns {v388.protobuf.Place} Place instance
             */
            Place.create = function create(properties) {
                return new Place(properties);
            };

            /**
             * Encodes the specified Place message. Does not implicitly {@link v388.protobuf.Place.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.Place
             * @static
             * @param {v388.protobuf.IPlace} message Place message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Place.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.placeId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.shopName);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.regionId);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.country);
                return writer;
            };

            /**
             * Encodes the specified Place message, length delimited. Does not implicitly {@link v388.protobuf.Place.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.Place
             * @static
             * @param {v388.protobuf.IPlace} message Place message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Place.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Place message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.Place
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.Place} Place
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Place.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.Place();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 2: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 3: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.country = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("regionId"))
                    throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                if (!message.hasOwnProperty("country"))
                    throw $util.ProtocolError("missing required 'country'", { instance: message });
                return message;
            };

            /**
             * Decodes a Place message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.Place
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.Place} Place
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Place.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Place message.
             * @function verify
             * @memberof v388.protobuf.Place
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Place.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                if (!$util.isInteger(message.regionId))
                    return "regionId: integer expected";
                if (!$util.isString(message.country))
                    return "country: string expected";
                return null;
            };

            /**
             * Creates a Place message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.Place
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.Place} Place
             */
            Place.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.Place)
                    return object;
                let message = new $root.v388.protobuf.Place();
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                return message;
            };

            /**
             * Creates a plain object from a Place message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.Place
             * @static
             * @param {v388.protobuf.Place} message Place
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Place.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.placeId = "";
                    object.shopName = "";
                    object.regionId = 0;
                    object.country = "";
                }
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                return object;
            };

            /**
             * Converts this Place to JSON.
             * @function toJSON
             * @memberof v388.protobuf.Place
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Place.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Place
             * @function getTypeUrl
             * @memberof v388.protobuf.Place
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Place.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.Place";
            };

            return Place;
        })();

        protobuf.SystemSetting = (function() {

            /**
             * Properties of a SystemSetting.
             * @memberof v388.protobuf
             * @interface ISystemSetting
             * @property {number} mCoinChute SystemSetting mCoinChute
             * @property {number} mBuyCardCost SystemSetting mBuyCardCost
             * @property {number} mGameCost SystemSetting mGameCost
             * @property {number} mContinueCost SystemSetting mContinueCost
             * @property {number} mFullCourseCost SystemSetting mFullCourseCost
             * @property {boolean} mFreePlay SystemSetting mFreePlay
             * @property {number|null} [mPcbId] SystemSetting mPcbId
             * @property {boolean} mIcCardRw SystemSetting mIcCardRw
             * @property {boolean} mIcCardVender SystemSetting mIcCardVender
             * @property {boolean|null} [mMgCardRw] SystemSetting mMgCardRw
             * @property {boolean|null} [mForceFeedback] SystemSetting mForceFeedback
             * @property {boolean} mWinsAndRemains SystemSetting mWinsAndRemains
             * @property {number} mEventMode SystemSetting mEventMode
             * @property {boolean} mEventModeDist SystemSetting mEventModeDist
             * @property {number} mCloseType SystemSetting mCloseType
             * @property {number} mCloseSun SystemSetting mCloseSun
             * @property {number} mCloseMon SystemSetting mCloseMon
             * @property {number} mCloseTue SystemSetting mCloseTue
             * @property {number} mCloseWed SystemSetting mCloseWed
             * @property {number} mCloseThu SystemSetting mCloseThu
             * @property {number} mCloseFri SystemSetting mCloseFri
             * @property {number} mCloseSat SystemSetting mCloseSat
             * @property {number} mCloseDay SystemSetting mCloseDay
             * @property {boolean|null} [mTouchPanel] SystemSetting mTouchPanel
             * @property {number} mGameVol SystemSetting mGameVol
             * @property {number} mAttractVol SystemSetting mAttractVol
             * @property {number|null} [mCalibHandleCenter] SystemSetting mCalibHandleCenter
             * @property {number|null} [mCalibAccelCenter] SystemSetting mCalibAccelCenter
             * @property {number|null} [mCalibBrakeCenter] SystemSetting mCalibBrakeCenter
             * @property {number|null} [mCalibTouchLeft] SystemSetting mCalibTouchLeft
             * @property {number|null} [mCalibTouchRight] SystemSetting mCalibTouchRight
             * @property {number|null} [mCalibTouchTop] SystemSetting mCalibTouchTop
             * @property {number|null} [mCalibTouchBottom] SystemSetting mCalibTouchBottom
             */

            /**
             * Constructs a new SystemSetting.
             * @memberof v388.protobuf
             * @classdesc Represents a SystemSetting.
             * @implements ISystemSetting
             * @constructor
             * @param {v388.protobuf.ISystemSetting=} [properties] Properties to set
             */
            function SystemSetting(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SystemSetting mCoinChute.
             * @member {number} mCoinChute
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCoinChute = 0;

            /**
             * SystemSetting mBuyCardCost.
             * @member {number} mBuyCardCost
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mBuyCardCost = 0;

            /**
             * SystemSetting mGameCost.
             * @member {number} mGameCost
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mGameCost = 0;

            /**
             * SystemSetting mContinueCost.
             * @member {number} mContinueCost
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mContinueCost = 0;

            /**
             * SystemSetting mFullCourseCost.
             * @member {number} mFullCourseCost
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mFullCourseCost = 0;

            /**
             * SystemSetting mFreePlay.
             * @member {boolean} mFreePlay
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mFreePlay = false;

            /**
             * SystemSetting mPcbId.
             * @member {number} mPcbId
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mPcbId = 0;

            /**
             * SystemSetting mIcCardRw.
             * @member {boolean} mIcCardRw
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mIcCardRw = false;

            /**
             * SystemSetting mIcCardVender.
             * @member {boolean} mIcCardVender
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mIcCardVender = false;

            /**
             * SystemSetting mMgCardRw.
             * @member {boolean} mMgCardRw
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mMgCardRw = false;

            /**
             * SystemSetting mForceFeedback.
             * @member {boolean} mForceFeedback
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mForceFeedback = false;

            /**
             * SystemSetting mWinsAndRemains.
             * @member {boolean} mWinsAndRemains
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mWinsAndRemains = false;

            /**
             * SystemSetting mEventMode.
             * @member {number} mEventMode
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mEventMode = 0;

            /**
             * SystemSetting mEventModeDist.
             * @member {boolean} mEventModeDist
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mEventModeDist = false;

            /**
             * SystemSetting mCloseType.
             * @member {number} mCloseType
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseType = 0;

            /**
             * SystemSetting mCloseSun.
             * @member {number} mCloseSun
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseSun = 0;

            /**
             * SystemSetting mCloseMon.
             * @member {number} mCloseMon
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseMon = 0;

            /**
             * SystemSetting mCloseTue.
             * @member {number} mCloseTue
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseTue = 0;

            /**
             * SystemSetting mCloseWed.
             * @member {number} mCloseWed
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseWed = 0;

            /**
             * SystemSetting mCloseThu.
             * @member {number} mCloseThu
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseThu = 0;

            /**
             * SystemSetting mCloseFri.
             * @member {number} mCloseFri
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseFri = 0;

            /**
             * SystemSetting mCloseSat.
             * @member {number} mCloseSat
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseSat = 0;

            /**
             * SystemSetting mCloseDay.
             * @member {number} mCloseDay
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseDay = 0;

            /**
             * SystemSetting mTouchPanel.
             * @member {boolean} mTouchPanel
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mTouchPanel = false;

            /**
             * SystemSetting mGameVol.
             * @member {number} mGameVol
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mGameVol = 0;

            /**
             * SystemSetting mAttractVol.
             * @member {number} mAttractVol
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mAttractVol = 0;

            /**
             * SystemSetting mCalibHandleCenter.
             * @member {number} mCalibHandleCenter
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibHandleCenter = 0;

            /**
             * SystemSetting mCalibAccelCenter.
             * @member {number} mCalibAccelCenter
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibAccelCenter = 0;

            /**
             * SystemSetting mCalibBrakeCenter.
             * @member {number} mCalibBrakeCenter
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibBrakeCenter = 0;

            /**
             * SystemSetting mCalibTouchLeft.
             * @member {number} mCalibTouchLeft
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchLeft = 0;

            /**
             * SystemSetting mCalibTouchRight.
             * @member {number} mCalibTouchRight
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchRight = 0;

            /**
             * SystemSetting mCalibTouchTop.
             * @member {number} mCalibTouchTop
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchTop = 0;

            /**
             * SystemSetting mCalibTouchBottom.
             * @member {number} mCalibTouchBottom
             * @memberof v388.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchBottom = 0;

            /**
             * Creates a new SystemSetting instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {v388.protobuf.ISystemSetting=} [properties] Properties to set
             * @returns {v388.protobuf.SystemSetting} SystemSetting instance
             */
            SystemSetting.create = function create(properties) {
                return new SystemSetting(properties);
            };

            /**
             * Encodes the specified SystemSetting message. Does not implicitly {@link v388.protobuf.SystemSetting.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {v388.protobuf.ISystemSetting} message SystemSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemSetting.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mCoinChute);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mBuyCardCost);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mGameCost);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mContinueCost);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.mFullCourseCost);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.mFreePlay);
                if (message.mPcbId != null && Object.hasOwnProperty.call(message, "mPcbId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.mPcbId);
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.mIcCardRw);
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.mIcCardVender);
                if (message.mMgCardRw != null && Object.hasOwnProperty.call(message, "mMgCardRw"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.mMgCardRw);
                if (message.mForceFeedback != null && Object.hasOwnProperty.call(message, "mForceFeedback"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.mForceFeedback);
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.mWinsAndRemains);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.mEventMode);
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.mEventModeDist);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.mCloseType);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.mCloseSun);
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.mCloseMon);
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.mCloseTue);
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.mCloseWed);
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.mCloseThu);
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.mCloseFri);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.mCloseSat);
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.mCloseDay);
                if (message.mTouchPanel != null && Object.hasOwnProperty.call(message, "mTouchPanel"))
                    writer.uint32(/* id 24, wireType 0 =*/192).bool(message.mTouchPanel);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.mGameVol);
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.mAttractVol);
                if (message.mCalibHandleCenter != null && Object.hasOwnProperty.call(message, "mCalibHandleCenter"))
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.mCalibHandleCenter);
                if (message.mCalibAccelCenter != null && Object.hasOwnProperty.call(message, "mCalibAccelCenter"))
                    writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.mCalibAccelCenter);
                if (message.mCalibBrakeCenter != null && Object.hasOwnProperty.call(message, "mCalibBrakeCenter"))
                    writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.mCalibBrakeCenter);
                if (message.mCalibTouchLeft != null && Object.hasOwnProperty.call(message, "mCalibTouchLeft"))
                    writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.mCalibTouchLeft);
                if (message.mCalibTouchRight != null && Object.hasOwnProperty.call(message, "mCalibTouchRight"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.mCalibTouchRight);
                if (message.mCalibTouchTop != null && Object.hasOwnProperty.call(message, "mCalibTouchTop"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.mCalibTouchTop);
                if (message.mCalibTouchBottom != null && Object.hasOwnProperty.call(message, "mCalibTouchBottom"))
                    writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.mCalibTouchBottom);
                return writer;
            };

            /**
             * Encodes the specified SystemSetting message, length delimited. Does not implicitly {@link v388.protobuf.SystemSetting.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {v388.protobuf.ISystemSetting} message SystemSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemSetting.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SystemSetting message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.SystemSetting} SystemSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemSetting.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.SystemSetting();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mCoinChute = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.mBuyCardCost = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.mGameCost = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.mContinueCost = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.mFullCourseCost = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.mFreePlay = reader.bool();
                            break;
                        }
                    case 7: {
                            message.mPcbId = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.mIcCardRw = reader.bool();
                            break;
                        }
                    case 9: {
                            message.mIcCardVender = reader.bool();
                            break;
                        }
                    case 10: {
                            message.mMgCardRw = reader.bool();
                            break;
                        }
                    case 11: {
                            message.mForceFeedback = reader.bool();
                            break;
                        }
                    case 12: {
                            message.mWinsAndRemains = reader.bool();
                            break;
                        }
                    case 13: {
                            message.mEventMode = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.mEventModeDist = reader.bool();
                            break;
                        }
                    case 15: {
                            message.mCloseType = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.mCloseSun = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.mCloseMon = reader.uint32();
                            break;
                        }
                    case 18: {
                            message.mCloseTue = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.mCloseWed = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.mCloseThu = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.mCloseFri = reader.uint32();
                            break;
                        }
                    case 22: {
                            message.mCloseSat = reader.uint32();
                            break;
                        }
                    case 23: {
                            message.mCloseDay = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.mTouchPanel = reader.bool();
                            break;
                        }
                    case 25: {
                            message.mGameVol = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.mAttractVol = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.mCalibHandleCenter = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.mCalibAccelCenter = reader.uint32();
                            break;
                        }
                    case 29: {
                            message.mCalibBrakeCenter = reader.uint32();
                            break;
                        }
                    case 30: {
                            message.mCalibTouchLeft = reader.uint32();
                            break;
                        }
                    case 31: {
                            message.mCalibTouchRight = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.mCalibTouchTop = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.mCalibTouchBottom = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("mCoinChute"))
                    throw $util.ProtocolError("missing required 'mCoinChute'", { instance: message });
                if (!message.hasOwnProperty("mBuyCardCost"))
                    throw $util.ProtocolError("missing required 'mBuyCardCost'", { instance: message });
                if (!message.hasOwnProperty("mGameCost"))
                    throw $util.ProtocolError("missing required 'mGameCost'", { instance: message });
                if (!message.hasOwnProperty("mContinueCost"))
                    throw $util.ProtocolError("missing required 'mContinueCost'", { instance: message });
                if (!message.hasOwnProperty("mFullCourseCost"))
                    throw $util.ProtocolError("missing required 'mFullCourseCost'", { instance: message });
                if (!message.hasOwnProperty("mFreePlay"))
                    throw $util.ProtocolError("missing required 'mFreePlay'", { instance: message });
                if (!message.hasOwnProperty("mIcCardRw"))
                    throw $util.ProtocolError("missing required 'mIcCardRw'", { instance: message });
                if (!message.hasOwnProperty("mIcCardVender"))
                    throw $util.ProtocolError("missing required 'mIcCardVender'", { instance: message });
                if (!message.hasOwnProperty("mWinsAndRemains"))
                    throw $util.ProtocolError("missing required 'mWinsAndRemains'", { instance: message });
                if (!message.hasOwnProperty("mEventMode"))
                    throw $util.ProtocolError("missing required 'mEventMode'", { instance: message });
                if (!message.hasOwnProperty("mEventModeDist"))
                    throw $util.ProtocolError("missing required 'mEventModeDist'", { instance: message });
                if (!message.hasOwnProperty("mCloseType"))
                    throw $util.ProtocolError("missing required 'mCloseType'", { instance: message });
                if (!message.hasOwnProperty("mCloseSun"))
                    throw $util.ProtocolError("missing required 'mCloseSun'", { instance: message });
                if (!message.hasOwnProperty("mCloseMon"))
                    throw $util.ProtocolError("missing required 'mCloseMon'", { instance: message });
                if (!message.hasOwnProperty("mCloseTue"))
                    throw $util.ProtocolError("missing required 'mCloseTue'", { instance: message });
                if (!message.hasOwnProperty("mCloseWed"))
                    throw $util.ProtocolError("missing required 'mCloseWed'", { instance: message });
                if (!message.hasOwnProperty("mCloseThu"))
                    throw $util.ProtocolError("missing required 'mCloseThu'", { instance: message });
                if (!message.hasOwnProperty("mCloseFri"))
                    throw $util.ProtocolError("missing required 'mCloseFri'", { instance: message });
                if (!message.hasOwnProperty("mCloseSat"))
                    throw $util.ProtocolError("missing required 'mCloseSat'", { instance: message });
                if (!message.hasOwnProperty("mCloseDay"))
                    throw $util.ProtocolError("missing required 'mCloseDay'", { instance: message });
                if (!message.hasOwnProperty("mGameVol"))
                    throw $util.ProtocolError("missing required 'mGameVol'", { instance: message });
                if (!message.hasOwnProperty("mAttractVol"))
                    throw $util.ProtocolError("missing required 'mAttractVol'", { instance: message });
                return message;
            };

            /**
             * Decodes a SystemSetting message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.SystemSetting} SystemSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemSetting.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SystemSetting message.
             * @function verify
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SystemSetting.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.mCoinChute))
                    return "mCoinChute: integer expected";
                if (!$util.isInteger(message.mBuyCardCost))
                    return "mBuyCardCost: integer expected";
                if (!$util.isInteger(message.mGameCost))
                    return "mGameCost: integer expected";
                if (!$util.isInteger(message.mContinueCost))
                    return "mContinueCost: integer expected";
                if (!$util.isInteger(message.mFullCourseCost))
                    return "mFullCourseCost: integer expected";
                if (typeof message.mFreePlay !== "boolean")
                    return "mFreePlay: boolean expected";
                if (message.mPcbId != null && message.hasOwnProperty("mPcbId"))
                    if (!$util.isInteger(message.mPcbId))
                        return "mPcbId: integer expected";
                if (typeof message.mIcCardRw !== "boolean")
                    return "mIcCardRw: boolean expected";
                if (typeof message.mIcCardVender !== "boolean")
                    return "mIcCardVender: boolean expected";
                if (message.mMgCardRw != null && message.hasOwnProperty("mMgCardRw"))
                    if (typeof message.mMgCardRw !== "boolean")
                        return "mMgCardRw: boolean expected";
                if (message.mForceFeedback != null && message.hasOwnProperty("mForceFeedback"))
                    if (typeof message.mForceFeedback !== "boolean")
                        return "mForceFeedback: boolean expected";
                if (typeof message.mWinsAndRemains !== "boolean")
                    return "mWinsAndRemains: boolean expected";
                if (!$util.isInteger(message.mEventMode))
                    return "mEventMode: integer expected";
                if (typeof message.mEventModeDist !== "boolean")
                    return "mEventModeDist: boolean expected";
                if (!$util.isInteger(message.mCloseType))
                    return "mCloseType: integer expected";
                if (!$util.isInteger(message.mCloseSun))
                    return "mCloseSun: integer expected";
                if (!$util.isInteger(message.mCloseMon))
                    return "mCloseMon: integer expected";
                if (!$util.isInteger(message.mCloseTue))
                    return "mCloseTue: integer expected";
                if (!$util.isInteger(message.mCloseWed))
                    return "mCloseWed: integer expected";
                if (!$util.isInteger(message.mCloseThu))
                    return "mCloseThu: integer expected";
                if (!$util.isInteger(message.mCloseFri))
                    return "mCloseFri: integer expected";
                if (!$util.isInteger(message.mCloseSat))
                    return "mCloseSat: integer expected";
                if (!$util.isInteger(message.mCloseDay))
                    return "mCloseDay: integer expected";
                if (message.mTouchPanel != null && message.hasOwnProperty("mTouchPanel"))
                    if (typeof message.mTouchPanel !== "boolean")
                        return "mTouchPanel: boolean expected";
                if (!$util.isInteger(message.mGameVol))
                    return "mGameVol: integer expected";
                if (!$util.isInteger(message.mAttractVol))
                    return "mAttractVol: integer expected";
                if (message.mCalibHandleCenter != null && message.hasOwnProperty("mCalibHandleCenter"))
                    if (!$util.isInteger(message.mCalibHandleCenter))
                        return "mCalibHandleCenter: integer expected";
                if (message.mCalibAccelCenter != null && message.hasOwnProperty("mCalibAccelCenter"))
                    if (!$util.isInteger(message.mCalibAccelCenter))
                        return "mCalibAccelCenter: integer expected";
                if (message.mCalibBrakeCenter != null && message.hasOwnProperty("mCalibBrakeCenter"))
                    if (!$util.isInteger(message.mCalibBrakeCenter))
                        return "mCalibBrakeCenter: integer expected";
                if (message.mCalibTouchLeft != null && message.hasOwnProperty("mCalibTouchLeft"))
                    if (!$util.isInteger(message.mCalibTouchLeft))
                        return "mCalibTouchLeft: integer expected";
                if (message.mCalibTouchRight != null && message.hasOwnProperty("mCalibTouchRight"))
                    if (!$util.isInteger(message.mCalibTouchRight))
                        return "mCalibTouchRight: integer expected";
                if (message.mCalibTouchTop != null && message.hasOwnProperty("mCalibTouchTop"))
                    if (!$util.isInteger(message.mCalibTouchTop))
                        return "mCalibTouchTop: integer expected";
                if (message.mCalibTouchBottom != null && message.hasOwnProperty("mCalibTouchBottom"))
                    if (!$util.isInteger(message.mCalibTouchBottom))
                        return "mCalibTouchBottom: integer expected";
                return null;
            };

            /**
             * Creates a SystemSetting message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.SystemSetting} SystemSetting
             */
            SystemSetting.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.SystemSetting)
                    return object;
                let message = new $root.v388.protobuf.SystemSetting();
                if (object.mCoinChute != null)
                    message.mCoinChute = object.mCoinChute >>> 0;
                if (object.mBuyCardCost != null)
                    message.mBuyCardCost = object.mBuyCardCost >>> 0;
                if (object.mGameCost != null)
                    message.mGameCost = object.mGameCost >>> 0;
                if (object.mContinueCost != null)
                    message.mContinueCost = object.mContinueCost >>> 0;
                if (object.mFullCourseCost != null)
                    message.mFullCourseCost = object.mFullCourseCost >>> 0;
                if (object.mFreePlay != null)
                    message.mFreePlay = Boolean(object.mFreePlay);
                if (object.mPcbId != null)
                    message.mPcbId = object.mPcbId >>> 0;
                if (object.mIcCardRw != null)
                    message.mIcCardRw = Boolean(object.mIcCardRw);
                if (object.mIcCardVender != null)
                    message.mIcCardVender = Boolean(object.mIcCardVender);
                if (object.mMgCardRw != null)
                    message.mMgCardRw = Boolean(object.mMgCardRw);
                if (object.mForceFeedback != null)
                    message.mForceFeedback = Boolean(object.mForceFeedback);
                if (object.mWinsAndRemains != null)
                    message.mWinsAndRemains = Boolean(object.mWinsAndRemains);
                if (object.mEventMode != null)
                    message.mEventMode = object.mEventMode >>> 0;
                if (object.mEventModeDist != null)
                    message.mEventModeDist = Boolean(object.mEventModeDist);
                if (object.mCloseType != null)
                    message.mCloseType = object.mCloseType >>> 0;
                if (object.mCloseSun != null)
                    message.mCloseSun = object.mCloseSun >>> 0;
                if (object.mCloseMon != null)
                    message.mCloseMon = object.mCloseMon >>> 0;
                if (object.mCloseTue != null)
                    message.mCloseTue = object.mCloseTue >>> 0;
                if (object.mCloseWed != null)
                    message.mCloseWed = object.mCloseWed >>> 0;
                if (object.mCloseThu != null)
                    message.mCloseThu = object.mCloseThu >>> 0;
                if (object.mCloseFri != null)
                    message.mCloseFri = object.mCloseFri >>> 0;
                if (object.mCloseSat != null)
                    message.mCloseSat = object.mCloseSat >>> 0;
                if (object.mCloseDay != null)
                    message.mCloseDay = object.mCloseDay >>> 0;
                if (object.mTouchPanel != null)
                    message.mTouchPanel = Boolean(object.mTouchPanel);
                if (object.mGameVol != null)
                    message.mGameVol = object.mGameVol >>> 0;
                if (object.mAttractVol != null)
                    message.mAttractVol = object.mAttractVol >>> 0;
                if (object.mCalibHandleCenter != null)
                    message.mCalibHandleCenter = object.mCalibHandleCenter >>> 0;
                if (object.mCalibAccelCenter != null)
                    message.mCalibAccelCenter = object.mCalibAccelCenter >>> 0;
                if (object.mCalibBrakeCenter != null)
                    message.mCalibBrakeCenter = object.mCalibBrakeCenter >>> 0;
                if (object.mCalibTouchLeft != null)
                    message.mCalibTouchLeft = object.mCalibTouchLeft >>> 0;
                if (object.mCalibTouchRight != null)
                    message.mCalibTouchRight = object.mCalibTouchRight >>> 0;
                if (object.mCalibTouchTop != null)
                    message.mCalibTouchTop = object.mCalibTouchTop >>> 0;
                if (object.mCalibTouchBottom != null)
                    message.mCalibTouchBottom = object.mCalibTouchBottom >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SystemSetting message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {v388.protobuf.SystemSetting} message SystemSetting
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SystemSetting.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.mCoinChute = 0;
                    object.mBuyCardCost = 0;
                    object.mGameCost = 0;
                    object.mContinueCost = 0;
                    object.mFullCourseCost = 0;
                    object.mFreePlay = false;
                    object.mPcbId = 0;
                    object.mIcCardRw = false;
                    object.mIcCardVender = false;
                    object.mMgCardRw = false;
                    object.mForceFeedback = false;
                    object.mWinsAndRemains = false;
                    object.mEventMode = 0;
                    object.mEventModeDist = false;
                    object.mCloseType = 0;
                    object.mCloseSun = 0;
                    object.mCloseMon = 0;
                    object.mCloseTue = 0;
                    object.mCloseWed = 0;
                    object.mCloseThu = 0;
                    object.mCloseFri = 0;
                    object.mCloseSat = 0;
                    object.mCloseDay = 0;
                    object.mTouchPanel = false;
                    object.mGameVol = 0;
                    object.mAttractVol = 0;
                    object.mCalibHandleCenter = 0;
                    object.mCalibAccelCenter = 0;
                    object.mCalibBrakeCenter = 0;
                    object.mCalibTouchLeft = 0;
                    object.mCalibTouchRight = 0;
                    object.mCalibTouchTop = 0;
                    object.mCalibTouchBottom = 0;
                }
                if (message.mCoinChute != null && message.hasOwnProperty("mCoinChute"))
                    object.mCoinChute = message.mCoinChute;
                if (message.mBuyCardCost != null && message.hasOwnProperty("mBuyCardCost"))
                    object.mBuyCardCost = message.mBuyCardCost;
                if (message.mGameCost != null && message.hasOwnProperty("mGameCost"))
                    object.mGameCost = message.mGameCost;
                if (message.mContinueCost != null && message.hasOwnProperty("mContinueCost"))
                    object.mContinueCost = message.mContinueCost;
                if (message.mFullCourseCost != null && message.hasOwnProperty("mFullCourseCost"))
                    object.mFullCourseCost = message.mFullCourseCost;
                if (message.mFreePlay != null && message.hasOwnProperty("mFreePlay"))
                    object.mFreePlay = message.mFreePlay;
                if (message.mPcbId != null && message.hasOwnProperty("mPcbId"))
                    object.mPcbId = message.mPcbId;
                if (message.mIcCardRw != null && message.hasOwnProperty("mIcCardRw"))
                    object.mIcCardRw = message.mIcCardRw;
                if (message.mIcCardVender != null && message.hasOwnProperty("mIcCardVender"))
                    object.mIcCardVender = message.mIcCardVender;
                if (message.mMgCardRw != null && message.hasOwnProperty("mMgCardRw"))
                    object.mMgCardRw = message.mMgCardRw;
                if (message.mForceFeedback != null && message.hasOwnProperty("mForceFeedback"))
                    object.mForceFeedback = message.mForceFeedback;
                if (message.mWinsAndRemains != null && message.hasOwnProperty("mWinsAndRemains"))
                    object.mWinsAndRemains = message.mWinsAndRemains;
                if (message.mEventMode != null && message.hasOwnProperty("mEventMode"))
                    object.mEventMode = message.mEventMode;
                if (message.mEventModeDist != null && message.hasOwnProperty("mEventModeDist"))
                    object.mEventModeDist = message.mEventModeDist;
                if (message.mCloseType != null && message.hasOwnProperty("mCloseType"))
                    object.mCloseType = message.mCloseType;
                if (message.mCloseSun != null && message.hasOwnProperty("mCloseSun"))
                    object.mCloseSun = message.mCloseSun;
                if (message.mCloseMon != null && message.hasOwnProperty("mCloseMon"))
                    object.mCloseMon = message.mCloseMon;
                if (message.mCloseTue != null && message.hasOwnProperty("mCloseTue"))
                    object.mCloseTue = message.mCloseTue;
                if (message.mCloseWed != null && message.hasOwnProperty("mCloseWed"))
                    object.mCloseWed = message.mCloseWed;
                if (message.mCloseThu != null && message.hasOwnProperty("mCloseThu"))
                    object.mCloseThu = message.mCloseThu;
                if (message.mCloseFri != null && message.hasOwnProperty("mCloseFri"))
                    object.mCloseFri = message.mCloseFri;
                if (message.mCloseSat != null && message.hasOwnProperty("mCloseSat"))
                    object.mCloseSat = message.mCloseSat;
                if (message.mCloseDay != null && message.hasOwnProperty("mCloseDay"))
                    object.mCloseDay = message.mCloseDay;
                if (message.mTouchPanel != null && message.hasOwnProperty("mTouchPanel"))
                    object.mTouchPanel = message.mTouchPanel;
                if (message.mGameVol != null && message.hasOwnProperty("mGameVol"))
                    object.mGameVol = message.mGameVol;
                if (message.mAttractVol != null && message.hasOwnProperty("mAttractVol"))
                    object.mAttractVol = message.mAttractVol;
                if (message.mCalibHandleCenter != null && message.hasOwnProperty("mCalibHandleCenter"))
                    object.mCalibHandleCenter = message.mCalibHandleCenter;
                if (message.mCalibAccelCenter != null && message.hasOwnProperty("mCalibAccelCenter"))
                    object.mCalibAccelCenter = message.mCalibAccelCenter;
                if (message.mCalibBrakeCenter != null && message.hasOwnProperty("mCalibBrakeCenter"))
                    object.mCalibBrakeCenter = message.mCalibBrakeCenter;
                if (message.mCalibTouchLeft != null && message.hasOwnProperty("mCalibTouchLeft"))
                    object.mCalibTouchLeft = message.mCalibTouchLeft;
                if (message.mCalibTouchRight != null && message.hasOwnProperty("mCalibTouchRight"))
                    object.mCalibTouchRight = message.mCalibTouchRight;
                if (message.mCalibTouchTop != null && message.hasOwnProperty("mCalibTouchTop"))
                    object.mCalibTouchTop = message.mCalibTouchTop;
                if (message.mCalibTouchBottom != null && message.hasOwnProperty("mCalibTouchBottom"))
                    object.mCalibTouchBottom = message.mCalibTouchBottom;
                return object;
            };

            /**
             * Converts this SystemSetting to JSON.
             * @function toJSON
             * @memberof v388.protobuf.SystemSetting
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SystemSetting.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SystemSetting
             * @function getTypeUrl
             * @memberof v388.protobuf.SystemSetting
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SystemSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.SystemSetting";
            };

            return SystemSetting;
        })();

        protobuf.GhostCompetitionSchedule = (function() {

            /**
             * Properties of a GhostCompetitionSchedule.
             * @memberof v388.protobuf
             * @interface IGhostCompetitionSchedule
             * @property {number} competitionId GhostCompetitionSchedule competitionId
             * @property {number} qualifyingPeriodStartAt GhostCompetitionSchedule qualifyingPeriodStartAt
             * @property {number} qualifyingPeriodCloseAt GhostCompetitionSchedule qualifyingPeriodCloseAt
             * @property {number} competitionStartAt GhostCompetitionSchedule competitionStartAt
             * @property {number} competitionCloseAt GhostCompetitionSchedule competitionCloseAt
             * @property {number} competitionEndAt GhostCompetitionSchedule competitionEndAt
             * @property {number} lengthOfPeriod GhostCompetitionSchedule lengthOfPeriod
             * @property {number} lengthOfInterval GhostCompetitionSchedule lengthOfInterval
             * @property {number} area GhostCompetitionSchedule area
             * @property {number} minigamePatternId GhostCompetitionSchedule minigamePatternId
             */

            /**
             * Constructs a new GhostCompetitionSchedule.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostCompetitionSchedule.
             * @implements IGhostCompetitionSchedule
             * @constructor
             * @param {v388.protobuf.IGhostCompetitionSchedule=} [properties] Properties to set
             */
            function GhostCompetitionSchedule(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionSchedule competitionId.
             * @member {number} competitionId
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionId = 0;

            /**
             * GhostCompetitionSchedule qualifyingPeriodStartAt.
             * @member {number} qualifyingPeriodStartAt
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.qualifyingPeriodStartAt = 0;

            /**
             * GhostCompetitionSchedule qualifyingPeriodCloseAt.
             * @member {number} qualifyingPeriodCloseAt
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.qualifyingPeriodCloseAt = 0;

            /**
             * GhostCompetitionSchedule competitionStartAt.
             * @member {number} competitionStartAt
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionStartAt = 0;

            /**
             * GhostCompetitionSchedule competitionCloseAt.
             * @member {number} competitionCloseAt
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionCloseAt = 0;

            /**
             * GhostCompetitionSchedule competitionEndAt.
             * @member {number} competitionEndAt
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionEndAt = 0;

            /**
             * GhostCompetitionSchedule lengthOfPeriod.
             * @member {number} lengthOfPeriod
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.lengthOfPeriod = 0;

            /**
             * GhostCompetitionSchedule lengthOfInterval.
             * @member {number} lengthOfInterval
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.lengthOfInterval = 0;

            /**
             * GhostCompetitionSchedule area.
             * @member {number} area
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.area = 0;

            /**
             * GhostCompetitionSchedule minigamePatternId.
             * @member {number} minigamePatternId
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.minigamePatternId = 0;

            /**
             * Creates a new GhostCompetitionSchedule instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {v388.protobuf.IGhostCompetitionSchedule=} [properties] Properties to set
             * @returns {v388.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule instance
             */
            GhostCompetitionSchedule.create = function create(properties) {
                return new GhostCompetitionSchedule(properties);
            };

            /**
             * Encodes the specified GhostCompetitionSchedule message. Does not implicitly {@link v388.protobuf.GhostCompetitionSchedule.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {v388.protobuf.IGhostCompetitionSchedule} message GhostCompetitionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionSchedule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.competitionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.qualifyingPeriodStartAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.qualifyingPeriodCloseAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.competitionStartAt);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.competitionCloseAt);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.competitionEndAt);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.lengthOfPeriod);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.lengthOfInterval);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.area);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.minigamePatternId);
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionSchedule message, length delimited. Does not implicitly {@link v388.protobuf.GhostCompetitionSchedule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {v388.protobuf.IGhostCompetitionSchedule} message GhostCompetitionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionSchedule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionSchedule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostCompetitionSchedule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.qualifyingPeriodStartAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.qualifyingPeriodCloseAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.competitionStartAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.competitionCloseAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.competitionEndAt = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.lengthOfPeriod = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.lengthOfInterval = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.minigamePatternId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                if (!message.hasOwnProperty("qualifyingPeriodStartAt"))
                    throw $util.ProtocolError("missing required 'qualifyingPeriodStartAt'", { instance: message });
                if (!message.hasOwnProperty("qualifyingPeriodCloseAt"))
                    throw $util.ProtocolError("missing required 'qualifyingPeriodCloseAt'", { instance: message });
                if (!message.hasOwnProperty("competitionStartAt"))
                    throw $util.ProtocolError("missing required 'competitionStartAt'", { instance: message });
                if (!message.hasOwnProperty("competitionCloseAt"))
                    throw $util.ProtocolError("missing required 'competitionCloseAt'", { instance: message });
                if (!message.hasOwnProperty("competitionEndAt"))
                    throw $util.ProtocolError("missing required 'competitionEndAt'", { instance: message });
                if (!message.hasOwnProperty("lengthOfPeriod"))
                    throw $util.ProtocolError("missing required 'lengthOfPeriod'", { instance: message });
                if (!message.hasOwnProperty("lengthOfInterval"))
                    throw $util.ProtocolError("missing required 'lengthOfInterval'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("minigamePatternId"))
                    throw $util.ProtocolError("missing required 'minigamePatternId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionSchedule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionSchedule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionSchedule message.
             * @function verify
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionSchedule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                if (!$util.isInteger(message.qualifyingPeriodStartAt))
                    return "qualifyingPeriodStartAt: integer expected";
                if (!$util.isInteger(message.qualifyingPeriodCloseAt))
                    return "qualifyingPeriodCloseAt: integer expected";
                if (!$util.isInteger(message.competitionStartAt))
                    return "competitionStartAt: integer expected";
                if (!$util.isInteger(message.competitionCloseAt))
                    return "competitionCloseAt: integer expected";
                if (!$util.isInteger(message.competitionEndAt))
                    return "competitionEndAt: integer expected";
                if (!$util.isInteger(message.lengthOfPeriod))
                    return "lengthOfPeriod: integer expected";
                if (!$util.isInteger(message.lengthOfInterval))
                    return "lengthOfInterval: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isInteger(message.minigamePatternId))
                    return "minigamePatternId: integer expected";
                return null;
            };

            /**
             * Creates a GhostCompetitionSchedule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             */
            GhostCompetitionSchedule.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostCompetitionSchedule)
                    return object;
                let message = new $root.v388.protobuf.GhostCompetitionSchedule();
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                if (object.qualifyingPeriodStartAt != null)
                    message.qualifyingPeriodStartAt = object.qualifyingPeriodStartAt >>> 0;
                if (object.qualifyingPeriodCloseAt != null)
                    message.qualifyingPeriodCloseAt = object.qualifyingPeriodCloseAt >>> 0;
                if (object.competitionStartAt != null)
                    message.competitionStartAt = object.competitionStartAt >>> 0;
                if (object.competitionCloseAt != null)
                    message.competitionCloseAt = object.competitionCloseAt >>> 0;
                if (object.competitionEndAt != null)
                    message.competitionEndAt = object.competitionEndAt >>> 0;
                if (object.lengthOfPeriod != null)
                    message.lengthOfPeriod = object.lengthOfPeriod >>> 0;
                if (object.lengthOfInterval != null)
                    message.lengthOfInterval = object.lengthOfInterval >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.minigamePatternId != null)
                    message.minigamePatternId = object.minigamePatternId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionSchedule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {v388.protobuf.GhostCompetitionSchedule} message GhostCompetitionSchedule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionSchedule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.competitionId = 0;
                    object.qualifyingPeriodStartAt = 0;
                    object.qualifyingPeriodCloseAt = 0;
                    object.competitionStartAt = 0;
                    object.competitionCloseAt = 0;
                    object.competitionEndAt = 0;
                    object.lengthOfPeriod = 0;
                    object.lengthOfInterval = 0;
                    object.area = 0;
                    object.minigamePatternId = 0;
                }
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                if (message.qualifyingPeriodStartAt != null && message.hasOwnProperty("qualifyingPeriodStartAt"))
                    object.qualifyingPeriodStartAt = message.qualifyingPeriodStartAt;
                if (message.qualifyingPeriodCloseAt != null && message.hasOwnProperty("qualifyingPeriodCloseAt"))
                    object.qualifyingPeriodCloseAt = message.qualifyingPeriodCloseAt;
                if (message.competitionStartAt != null && message.hasOwnProperty("competitionStartAt"))
                    object.competitionStartAt = message.competitionStartAt;
                if (message.competitionCloseAt != null && message.hasOwnProperty("competitionCloseAt"))
                    object.competitionCloseAt = message.competitionCloseAt;
                if (message.competitionEndAt != null && message.hasOwnProperty("competitionEndAt"))
                    object.competitionEndAt = message.competitionEndAt;
                if (message.lengthOfPeriod != null && message.hasOwnProperty("lengthOfPeriod"))
                    object.lengthOfPeriod = message.lengthOfPeriod;
                if (message.lengthOfInterval != null && message.hasOwnProperty("lengthOfInterval"))
                    object.lengthOfInterval = message.lengthOfInterval;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.minigamePatternId != null && message.hasOwnProperty("minigamePatternId"))
                    object.minigamePatternId = message.minigamePatternId;
                return object;
            };

            /**
             * Converts this GhostCompetitionSchedule to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionSchedule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionSchedule
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostCompetitionSchedule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionSchedule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostCompetitionSchedule";
            };

            return GhostCompetitionSchedule;
        })();

        protobuf.GhostCompetitionParameter = (function() {

            /**
             * Properties of a GhostCompetitionParameter.
             * @memberof v388.protobuf
             * @interface IGhostCompetitionParameter
             * @property {Array.<number>|null} [parameters1] GhostCompetitionParameter parameters1
             * @property {boolean} parameters2 GhostCompetitionParameter parameters2
             */

            /**
             * Constructs a new GhostCompetitionParameter.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostCompetitionParameter.
             * @implements IGhostCompetitionParameter
             * @constructor
             * @param {v388.protobuf.IGhostCompetitionParameter=} [properties] Properties to set
             */
            function GhostCompetitionParameter(properties) {
                this.parameters1 = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionParameter parameters1.
             * @member {Array.<number>} parameters1
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @instance
             */
            GhostCompetitionParameter.prototype.parameters1 = $util.emptyArray;

            /**
             * GhostCompetitionParameter parameters2.
             * @member {boolean} parameters2
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @instance
             */
            GhostCompetitionParameter.prototype.parameters2 = false;

            /**
             * Creates a new GhostCompetitionParameter instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {v388.protobuf.IGhostCompetitionParameter=} [properties] Properties to set
             * @returns {v388.protobuf.GhostCompetitionParameter} GhostCompetitionParameter instance
             */
            GhostCompetitionParameter.create = function create(properties) {
                return new GhostCompetitionParameter(properties);
            };

            /**
             * Encodes the specified GhostCompetitionParameter message. Does not implicitly {@link v388.protobuf.GhostCompetitionParameter.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {v388.protobuf.IGhostCompetitionParameter} message GhostCompetitionParameter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionParameter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.parameters1 != null && message.parameters1.length)
                    for (let i = 0; i < message.parameters1.length; ++i)
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.parameters1[i]);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.parameters2);
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionParameter message, length delimited. Does not implicitly {@link v388.protobuf.GhostCompetitionParameter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {v388.protobuf.IGhostCompetitionParameter} message GhostCompetitionParameter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionParameter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionParameter message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostCompetitionParameter();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.parameters1 && message.parameters1.length))
                                message.parameters1 = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.parameters1.push(reader.float());
                            } else
                                message.parameters1.push(reader.float());
                            break;
                        }
                    case 2: {
                            message.parameters2 = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("parameters2"))
                    throw $util.ProtocolError("missing required 'parameters2'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionParameter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionParameter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionParameter message.
             * @function verify
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.parameters1 != null && message.hasOwnProperty("parameters1")) {
                    if (!Array.isArray(message.parameters1))
                        return "parameters1: array expected";
                    for (let i = 0; i < message.parameters1.length; ++i)
                        if (typeof message.parameters1[i] !== "number")
                            return "parameters1: number[] expected";
                }
                if (typeof message.parameters2 !== "boolean")
                    return "parameters2: boolean expected";
                return null;
            };

            /**
             * Creates a GhostCompetitionParameter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             */
            GhostCompetitionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostCompetitionParameter)
                    return object;
                let message = new $root.v388.protobuf.GhostCompetitionParameter();
                if (object.parameters1) {
                    if (!Array.isArray(object.parameters1))
                        throw TypeError(".v388.protobuf.GhostCompetitionParameter.parameters1: array expected");
                    message.parameters1 = [];
                    for (let i = 0; i < object.parameters1.length; ++i)
                        message.parameters1[i] = Number(object.parameters1[i]);
                }
                if (object.parameters2 != null)
                    message.parameters2 = Boolean(object.parameters2);
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionParameter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {v388.protobuf.GhostCompetitionParameter} message GhostCompetitionParameter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.parameters1 = [];
                if (options.defaults)
                    object.parameters2 = false;
                if (message.parameters1 && message.parameters1.length) {
                    object.parameters1 = [];
                    for (let j = 0; j < message.parameters1.length; ++j)
                        object.parameters1[j] = options.json && !isFinite(message.parameters1[j]) ? String(message.parameters1[j]) : message.parameters1[j];
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    object.parameters2 = message.parameters2;
                return object;
            };

            /**
             * Converts this GhostCompetitionParameter to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionParameter
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostCompetitionParameter
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionParameter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostCompetitionParameter";
            };

            return GhostCompetitionParameter;
        })();

        protobuf.PlaceList = (function() {

            /**
             * Properties of a PlaceList.
             * @memberof v388.protobuf
             * @interface IPlaceList
             * @property {Array.<v388.protobuf.IPlace>|null} [places] PlaceList places
             */

            /**
             * Constructs a new PlaceList.
             * @memberof v388.protobuf
             * @classdesc Represents a PlaceList.
             * @implements IPlaceList
             * @constructor
             * @param {v388.protobuf.IPlaceList=} [properties] Properties to set
             */
            function PlaceList(properties) {
                this.places = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlaceList places.
             * @member {Array.<v388.protobuf.IPlace>} places
             * @memberof v388.protobuf.PlaceList
             * @instance
             */
            PlaceList.prototype.places = $util.emptyArray;

            /**
             * Creates a new PlaceList instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {v388.protobuf.IPlaceList=} [properties] Properties to set
             * @returns {v388.protobuf.PlaceList} PlaceList instance
             */
            PlaceList.create = function create(properties) {
                return new PlaceList(properties);
            };

            /**
             * Encodes the specified PlaceList message. Does not implicitly {@link v388.protobuf.PlaceList.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {v388.protobuf.IPlaceList} message PlaceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.places != null && message.places.length)
                    for (let i = 0; i < message.places.length; ++i)
                        $root.v388.protobuf.Place.encode(message.places[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlaceList message, length delimited. Does not implicitly {@link v388.protobuf.PlaceList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {v388.protobuf.IPlaceList} message PlaceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlaceList message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.PlaceList} PlaceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.PlaceList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.places && message.places.length))
                                message.places = [];
                            message.places.push($root.v388.protobuf.Place.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlaceList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.PlaceList} PlaceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlaceList message.
             * @function verify
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaceList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.places != null && message.hasOwnProperty("places")) {
                    if (!Array.isArray(message.places))
                        return "places: array expected";
                    for (let i = 0; i < message.places.length; ++i) {
                        let error = $root.v388.protobuf.Place.verify(message.places[i]);
                        if (error)
                            return "places." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PlaceList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.PlaceList} PlaceList
             */
            PlaceList.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.PlaceList)
                    return object;
                let message = new $root.v388.protobuf.PlaceList();
                if (object.places) {
                    if (!Array.isArray(object.places))
                        throw TypeError(".v388.protobuf.PlaceList.places: array expected");
                    message.places = [];
                    for (let i = 0; i < object.places.length; ++i) {
                        if (typeof object.places[i] !== "object")
                            throw TypeError(".v388.protobuf.PlaceList.places: object expected");
                        message.places[i] = $root.v388.protobuf.Place.fromObject(object.places[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PlaceList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {v388.protobuf.PlaceList} message PlaceList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaceList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.places = [];
                if (message.places && message.places.length) {
                    object.places = [];
                    for (let j = 0; j < message.places.length; ++j)
                        object.places[j] = $root.v388.protobuf.Place.toObject(message.places[j], options);
                }
                return object;
            };

            /**
             * Converts this PlaceList to JSON.
             * @function toJSON
             * @memberof v388.protobuf.PlaceList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaceList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PlaceList
             * @function getTypeUrl
             * @memberof v388.protobuf.PlaceList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PlaceList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.PlaceList";
            };

            return PlaceList;
        })();

        protobuf.GhostList = (function() {

            /**
             * Properties of a GhostList.
             * @memberof v388.protobuf
             * @interface IGhostList
             * @property {Array.<v388.protobuf.IGhostCar>|null} [ghosts] GhostList ghosts
             */

            /**
             * Constructs a new GhostList.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostList.
             * @implements IGhostList
             * @constructor
             * @param {v388.protobuf.IGhostList=} [properties] Properties to set
             */
            function GhostList(properties) {
                this.ghosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostList ghosts.
             * @member {Array.<v388.protobuf.IGhostCar>} ghosts
             * @memberof v388.protobuf.GhostList
             * @instance
             */
            GhostList.prototype.ghosts = $util.emptyArray;

            /**
             * Creates a new GhostList instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {v388.protobuf.IGhostList=} [properties] Properties to set
             * @returns {v388.protobuf.GhostList} GhostList instance
             */
            GhostList.create = function create(properties) {
                return new GhostList(properties);
            };

            /**
             * Encodes the specified GhostList message. Does not implicitly {@link v388.protobuf.GhostList.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {v388.protobuf.IGhostList} message GhostList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.v388.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostList message, length delimited. Does not implicitly {@link v388.protobuf.GhostList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {v388.protobuf.IGhostList} message GhostList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostList message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostList} GhostList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.v388.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GhostList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostList} GhostList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostList message.
             * @function verify
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.v388.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GhostList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostList} GhostList
             */
            GhostList.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostList)
                    return object;
                let message = new $root.v388.protobuf.GhostList();
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".v388.protobuf.GhostList.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".v388.protobuf.GhostList.ghosts: object expected");
                        message.ghosts[i] = $root.v388.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {v388.protobuf.GhostList} message GhostList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ghosts = [];
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.v388.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                return object;
            };

            /**
             * Converts this GhostList to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostList
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostList";
            };

            return GhostList;
        })();

        protobuf.CarSummary = (function() {

            /**
             * Properties of a CarSummary.
             * @memberof v388.protobuf
             * @interface ICarSummary
             * @property {number} hitCount CarSummary hitCount
             * @property {Array.<v388.protobuf.ICar>|null} [cars] CarSummary cars
             */

            /**
             * Constructs a new CarSummary.
             * @memberof v388.protobuf
             * @classdesc Represents a CarSummary.
             * @implements ICarSummary
             * @constructor
             * @param {v388.protobuf.ICarSummary=} [properties] Properties to set
             */
            function CarSummary(properties) {
                this.cars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarSummary hitCount.
             * @member {number} hitCount
             * @memberof v388.protobuf.CarSummary
             * @instance
             */
            CarSummary.prototype.hitCount = 0;

            /**
             * CarSummary cars.
             * @member {Array.<v388.protobuf.ICar>} cars
             * @memberof v388.protobuf.CarSummary
             * @instance
             */
            CarSummary.prototype.cars = $util.emptyArray;

            /**
             * Creates a new CarSummary instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {v388.protobuf.ICarSummary=} [properties] Properties to set
             * @returns {v388.protobuf.CarSummary} CarSummary instance
             */
            CarSummary.create = function create(properties) {
                return new CarSummary(properties);
            };

            /**
             * Encodes the specified CarSummary message. Does not implicitly {@link v388.protobuf.CarSummary.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {v388.protobuf.ICarSummary} message CarSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummary.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.hitCount);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.v388.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CarSummary message, length delimited. Does not implicitly {@link v388.protobuf.CarSummary.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {v388.protobuf.ICarSummary} message CarSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummary.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarSummary message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CarSummary} CarSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummary.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CarSummary();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.hitCount = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.v388.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("hitCount"))
                    throw $util.ProtocolError("missing required 'hitCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarSummary message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CarSummary} CarSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummary.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarSummary message.
             * @function verify
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarSummary.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.hitCount))
                    return "hitCount: integer expected";
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.v388.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CarSummary message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CarSummary} CarSummary
             */
            CarSummary.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CarSummary)
                    return object;
                let message = new $root.v388.protobuf.CarSummary();
                if (object.hitCount != null)
                    message.hitCount = object.hitCount >>> 0;
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".v388.protobuf.CarSummary.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".v388.protobuf.CarSummary.cars: object expected");
                        message.cars[i] = $root.v388.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CarSummary message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {v388.protobuf.CarSummary} message CarSummary
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarSummary.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cars = [];
                if (options.defaults)
                    object.hitCount = 0;
                if (message.hitCount != null && message.hasOwnProperty("hitCount"))
                    object.hitCount = message.hitCount;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.v388.protobuf.Car.toObject(message.cars[j], options);
                }
                return object;
            };

            /**
             * Converts this CarSummary to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CarSummary
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarSummary.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarSummary
             * @function getTypeUrl
             * @memberof v388.protobuf.CarSummary
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CarSummary";
            };

            return CarSummary;
        })();

        protobuf.CarSummaryCount = (function() {

            /**
             * Properties of a CarSummaryCount.
             * @memberof v388.protobuf
             * @interface ICarSummaryCount
             * @property {Array.<v388.protobuf.CarSummaryCount.ISearchCount>|null} [summary] CarSummaryCount summary
             */

            /**
             * Constructs a new CarSummaryCount.
             * @memberof v388.protobuf
             * @classdesc Represents a CarSummaryCount.
             * @implements ICarSummaryCount
             * @constructor
             * @param {v388.protobuf.ICarSummaryCount=} [properties] Properties to set
             */
            function CarSummaryCount(properties) {
                this.summary = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarSummaryCount summary.
             * @member {Array.<v388.protobuf.CarSummaryCount.ISearchCount>} summary
             * @memberof v388.protobuf.CarSummaryCount
             * @instance
             */
            CarSummaryCount.prototype.summary = $util.emptyArray;

            /**
             * Creates a new CarSummaryCount instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {v388.protobuf.ICarSummaryCount=} [properties] Properties to set
             * @returns {v388.protobuf.CarSummaryCount} CarSummaryCount instance
             */
            CarSummaryCount.create = function create(properties) {
                return new CarSummaryCount(properties);
            };

            /**
             * Encodes the specified CarSummaryCount message. Does not implicitly {@link v388.protobuf.CarSummaryCount.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {v388.protobuf.ICarSummaryCount} message CarSummaryCount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummaryCount.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.summary != null && message.summary.length)
                    for (let i = 0; i < message.summary.length; ++i)
                        $root.v388.protobuf.CarSummaryCount.SearchCount.encode(message.summary[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CarSummaryCount message, length delimited. Does not implicitly {@link v388.protobuf.CarSummaryCount.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {v388.protobuf.ICarSummaryCount} message CarSummaryCount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummaryCount.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarSummaryCount message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.CarSummaryCount} CarSummaryCount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummaryCount.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CarSummaryCount();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.summary && message.summary.length))
                                message.summary = [];
                            message.summary.push($root.v388.protobuf.CarSummaryCount.SearchCount.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CarSummaryCount message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.CarSummaryCount} CarSummaryCount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummaryCount.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarSummaryCount message.
             * @function verify
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarSummaryCount.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.summary != null && message.hasOwnProperty("summary")) {
                    if (!Array.isArray(message.summary))
                        return "summary: array expected";
                    for (let i = 0; i < message.summary.length; ++i) {
                        let error = $root.v388.protobuf.CarSummaryCount.SearchCount.verify(message.summary[i]);
                        if (error)
                            return "summary." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CarSummaryCount message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.CarSummaryCount} CarSummaryCount
             */
            CarSummaryCount.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.CarSummaryCount)
                    return object;
                let message = new $root.v388.protobuf.CarSummaryCount();
                if (object.summary) {
                    if (!Array.isArray(object.summary))
                        throw TypeError(".v388.protobuf.CarSummaryCount.summary: array expected");
                    message.summary = [];
                    for (let i = 0; i < object.summary.length; ++i) {
                        if (typeof object.summary[i] !== "object")
                            throw TypeError(".v388.protobuf.CarSummaryCount.summary: object expected");
                        message.summary[i] = $root.v388.protobuf.CarSummaryCount.SearchCount.fromObject(object.summary[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CarSummaryCount message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {v388.protobuf.CarSummaryCount} message CarSummaryCount
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarSummaryCount.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.summary = [];
                if (message.summary && message.summary.length) {
                    object.summary = [];
                    for (let j = 0; j < message.summary.length; ++j)
                        object.summary[j] = $root.v388.protobuf.CarSummaryCount.SearchCount.toObject(message.summary[j], options);
                }
                return object;
            };

            /**
             * Converts this CarSummaryCount to JSON.
             * @function toJSON
             * @memberof v388.protobuf.CarSummaryCount
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarSummaryCount.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarSummaryCount
             * @function getTypeUrl
             * @memberof v388.protobuf.CarSummaryCount
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarSummaryCount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.CarSummaryCount";
            };

            CarSummaryCount.SearchCount = (function() {

                /**
                 * Properties of a SearchCount.
                 * @memberof v388.protobuf.CarSummaryCount
                 * @interface ISearchCount
                 * @property {number} regionId SearchCount regionId
                 * @property {number} ghostLevel SearchCount ghostLevel
                 * @property {number} manufacturer SearchCount manufacturer
                 * @property {number} model SearchCount model
                 * @property {number} hitCount SearchCount hitCount
                 */

                /**
                 * Constructs a new SearchCount.
                 * @memberof v388.protobuf.CarSummaryCount
                 * @classdesc Represents a SearchCount.
                 * @implements ISearchCount
                 * @constructor
                 * @param {v388.protobuf.CarSummaryCount.ISearchCount=} [properties] Properties to set
                 */
                function SearchCount(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SearchCount regionId.
                 * @member {number} regionId
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 */
                SearchCount.prototype.regionId = 0;

                /**
                 * SearchCount ghostLevel.
                 * @member {number} ghostLevel
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 */
                SearchCount.prototype.ghostLevel = 0;

                /**
                 * SearchCount manufacturer.
                 * @member {number} manufacturer
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 */
                SearchCount.prototype.manufacturer = 0;

                /**
                 * SearchCount model.
                 * @member {number} model
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 */
                SearchCount.prototype.model = 0;

                /**
                 * SearchCount hitCount.
                 * @member {number} hitCount
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 */
                SearchCount.prototype.hitCount = 0;

                /**
                 * Creates a new SearchCount instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {v388.protobuf.CarSummaryCount.ISearchCount=} [properties] Properties to set
                 * @returns {v388.protobuf.CarSummaryCount.SearchCount} SearchCount instance
                 */
                SearchCount.create = function create(properties) {
                    return new SearchCount(properties);
                };

                /**
                 * Encodes the specified SearchCount message. Does not implicitly {@link v388.protobuf.CarSummaryCount.SearchCount.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {v388.protobuf.CarSummaryCount.ISearchCount} message SearchCount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SearchCount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.regionId);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ghostLevel);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.manufacturer);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.model);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.hitCount);
                    return writer;
                };

                /**
                 * Encodes the specified SearchCount message, length delimited. Does not implicitly {@link v388.protobuf.CarSummaryCount.SearchCount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {v388.protobuf.CarSummaryCount.ISearchCount} message SearchCount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SearchCount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SearchCount message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.CarSummaryCount.SearchCount} SearchCount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SearchCount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.CarSummaryCount.SearchCount();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.ghostLevel = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.manufacturer = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.model = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.hitCount = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    if (!message.hasOwnProperty("ghostLevel"))
                        throw $util.ProtocolError("missing required 'ghostLevel'", { instance: message });
                    if (!message.hasOwnProperty("manufacturer"))
                        throw $util.ProtocolError("missing required 'manufacturer'", { instance: message });
                    if (!message.hasOwnProperty("model"))
                        throw $util.ProtocolError("missing required 'model'", { instance: message });
                    if (!message.hasOwnProperty("hitCount"))
                        throw $util.ProtocolError("missing required 'hitCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a SearchCount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.CarSummaryCount.SearchCount} SearchCount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SearchCount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SearchCount message.
                 * @function verify
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SearchCount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    if (!$util.isInteger(message.ghostLevel))
                        return "ghostLevel: integer expected";
                    if (!$util.isInteger(message.manufacturer))
                        return "manufacturer: integer expected";
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                    if (!$util.isInteger(message.hitCount))
                        return "hitCount: integer expected";
                    return null;
                };

                /**
                 * Creates a SearchCount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.CarSummaryCount.SearchCount} SearchCount
                 */
                SearchCount.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.CarSummaryCount.SearchCount)
                        return object;
                    let message = new $root.v388.protobuf.CarSummaryCount.SearchCount();
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    if (object.ghostLevel != null)
                        message.ghostLevel = object.ghostLevel >>> 0;
                    if (object.manufacturer != null)
                        message.manufacturer = object.manufacturer >>> 0;
                    if (object.model != null)
                        message.model = object.model >>> 0;
                    if (object.hitCount != null)
                        message.hitCount = object.hitCount >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a SearchCount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {v388.protobuf.CarSummaryCount.SearchCount} message SearchCount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SearchCount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.regionId = 0;
                        object.ghostLevel = 0;
                        object.manufacturer = 0;
                        object.model = 0;
                        object.hitCount = 0;
                    }
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                        object.ghostLevel = message.ghostLevel;
                    if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                        object.manufacturer = message.manufacturer;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.hitCount != null && message.hasOwnProperty("hitCount"))
                        object.hitCount = message.hitCount;
                    return object;
                };

                /**
                 * Converts this SearchCount to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SearchCount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for SearchCount
                 * @function getTypeUrl
                 * @memberof v388.protobuf.CarSummaryCount.SearchCount
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SearchCount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.CarSummaryCount.SearchCount";
                };

                return SearchCount;
            })();

            return CarSummaryCount;
        })();

        protobuf.GhostSummary = (function() {

            /**
             * Properties of a GhostSummary.
             * @memberof v388.protobuf
             * @interface IGhostSummary
             * @property {Array.<v388.protobuf.IGhostCar>|null} [ghosts] GhostSummary ghosts
             */

            /**
             * Constructs a new GhostSummary.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostSummary.
             * @implements IGhostSummary
             * @constructor
             * @param {v388.protobuf.IGhostSummary=} [properties] Properties to set
             */
            function GhostSummary(properties) {
                this.ghosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostSummary ghosts.
             * @member {Array.<v388.protobuf.IGhostCar>} ghosts
             * @memberof v388.protobuf.GhostSummary
             * @instance
             */
            GhostSummary.prototype.ghosts = $util.emptyArray;

            /**
             * Creates a new GhostSummary instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {v388.protobuf.IGhostSummary=} [properties] Properties to set
             * @returns {v388.protobuf.GhostSummary} GhostSummary instance
             */
            GhostSummary.create = function create(properties) {
                return new GhostSummary(properties);
            };

            /**
             * Encodes the specified GhostSummary message. Does not implicitly {@link v388.protobuf.GhostSummary.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {v388.protobuf.IGhostSummary} message GhostSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostSummary.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.v388.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostSummary message, length delimited. Does not implicitly {@link v388.protobuf.GhostSummary.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {v388.protobuf.IGhostSummary} message GhostSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostSummary.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostSummary message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostSummary} GhostSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostSummary.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostSummary();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.v388.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GhostSummary message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostSummary} GhostSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostSummary.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostSummary message.
             * @function verify
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostSummary.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.v388.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GhostSummary message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostSummary} GhostSummary
             */
            GhostSummary.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostSummary)
                    return object;
                let message = new $root.v388.protobuf.GhostSummary();
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".v388.protobuf.GhostSummary.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".v388.protobuf.GhostSummary.ghosts: object expected");
                        message.ghosts[i] = $root.v388.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostSummary message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {v388.protobuf.GhostSummary} message GhostSummary
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostSummary.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ghosts = [];
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.v388.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                return object;
            };

            /**
             * Converts this GhostSummary to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostSummary
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostSummary.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostSummary
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostSummary
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostSummary";
            };

            return GhostSummary;
        })();

        protobuf.FileList = (function() {

            /**
             * Properties of a FileList.
             * @memberof v388.protobuf
             * @interface IFileList
             * @property {Array.<v388.protobuf.FileList.IFileInfo>|null} [files] FileList files
             * @property {number|null} [interval] FileList interval
             */

            /**
             * Constructs a new FileList.
             * @memberof v388.protobuf
             * @classdesc Represents a FileList.
             * @implements IFileList
             * @constructor
             * @param {v388.protobuf.IFileList=} [properties] Properties to set
             */
            function FileList(properties) {
                this.files = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileList files.
             * @member {Array.<v388.protobuf.FileList.IFileInfo>} files
             * @memberof v388.protobuf.FileList
             * @instance
             */
            FileList.prototype.files = $util.emptyArray;

            /**
             * FileList interval.
             * @member {number} interval
             * @memberof v388.protobuf.FileList
             * @instance
             */
            FileList.prototype.interval = 0;

            /**
             * Creates a new FileList instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.FileList
             * @static
             * @param {v388.protobuf.IFileList=} [properties] Properties to set
             * @returns {v388.protobuf.FileList} FileList instance
             */
            FileList.create = function create(properties) {
                return new FileList(properties);
            };

            /**
             * Encodes the specified FileList message. Does not implicitly {@link v388.protobuf.FileList.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.FileList
             * @static
             * @param {v388.protobuf.IFileList} message FileList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.files != null && message.files.length)
                    for (let i = 0; i < message.files.length; ++i)
                        $root.v388.protobuf.FileList.FileInfo.encode(message.files[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.interval != null && Object.hasOwnProperty.call(message, "interval"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.interval);
                return writer;
            };

            /**
             * Encodes the specified FileList message, length delimited. Does not implicitly {@link v388.protobuf.FileList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.FileList
             * @static
             * @param {v388.protobuf.IFileList} message FileList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileList message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.FileList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.FileList} FileList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.FileList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.files && message.files.length))
                                message.files = [];
                            message.files.push($root.v388.protobuf.FileList.FileInfo.decode(reader, reader.uint32()));
                            break;
                        }
                    case 2: {
                            message.interval = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.FileList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.FileList} FileList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileList message.
             * @function verify
             * @memberof v388.protobuf.FileList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.files != null && message.hasOwnProperty("files")) {
                    if (!Array.isArray(message.files))
                        return "files: array expected";
                    for (let i = 0; i < message.files.length; ++i) {
                        let error = $root.v388.protobuf.FileList.FileInfo.verify(message.files[i]);
                        if (error)
                            return "files." + error;
                    }
                }
                if (message.interval != null && message.hasOwnProperty("interval"))
                    if (!$util.isInteger(message.interval))
                        return "interval: integer expected";
                return null;
            };

            /**
             * Creates a FileList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.FileList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.FileList} FileList
             */
            FileList.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.FileList)
                    return object;
                let message = new $root.v388.protobuf.FileList();
                if (object.files) {
                    if (!Array.isArray(object.files))
                        throw TypeError(".v388.protobuf.FileList.files: array expected");
                    message.files = [];
                    for (let i = 0; i < object.files.length; ++i) {
                        if (typeof object.files[i] !== "object")
                            throw TypeError(".v388.protobuf.FileList.files: object expected");
                        message.files[i] = $root.v388.protobuf.FileList.FileInfo.fromObject(object.files[i]);
                    }
                }
                if (object.interval != null)
                    message.interval = object.interval >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a FileList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.FileList
             * @static
             * @param {v388.protobuf.FileList} message FileList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.files = [];
                if (options.defaults)
                    object.interval = 0;
                if (message.files && message.files.length) {
                    object.files = [];
                    for (let j = 0; j < message.files.length; ++j)
                        object.files[j] = $root.v388.protobuf.FileList.FileInfo.toObject(message.files[j], options);
                }
                if (message.interval != null && message.hasOwnProperty("interval"))
                    object.interval = message.interval;
                return object;
            };

            /**
             * Converts this FileList to JSON.
             * @function toJSON
             * @memberof v388.protobuf.FileList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileList
             * @function getTypeUrl
             * @memberof v388.protobuf.FileList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.FileList";
            };

            FileList.FileInfo = (function() {

                /**
                 * Properties of a FileInfo.
                 * @memberof v388.protobuf.FileList
                 * @interface IFileInfo
                 * @property {number} fileId FileInfo fileId
                 * @property {v388.protobuf.FileType} fileType FileInfo fileType
                 * @property {number} fileSize FileInfo fileSize
                 * @property {string} url FileInfo url
                 * @property {Uint8Array} sha1sum FileInfo sha1sum
                 * @property {number} notBefore FileInfo notBefore
                 * @property {number} notAfter FileInfo notAfter
                 */

                /**
                 * Constructs a new FileInfo.
                 * @memberof v388.protobuf.FileList
                 * @classdesc Represents a FileInfo.
                 * @implements IFileInfo
                 * @constructor
                 * @param {v388.protobuf.FileList.IFileInfo=} [properties] Properties to set
                 */
                function FileInfo(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FileInfo fileId.
                 * @member {number} fileId
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileId = 0;

                /**
                 * FileInfo fileType.
                 * @member {v388.protobuf.FileType} fileType
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileType = 1;

                /**
                 * FileInfo fileSize.
                 * @member {number} fileSize
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileSize = 0;

                /**
                 * FileInfo url.
                 * @member {string} url
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.url = "";

                /**
                 * FileInfo sha1sum.
                 * @member {Uint8Array} sha1sum
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.sha1sum = $util.newBuffer([]);

                /**
                 * FileInfo notBefore.
                 * @member {number} notBefore
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.notBefore = 0;

                /**
                 * FileInfo notAfter.
                 * @member {number} notAfter
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.notAfter = 0;

                /**
                 * Creates a new FileInfo instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {v388.protobuf.FileList.IFileInfo=} [properties] Properties to set
                 * @returns {v388.protobuf.FileList.FileInfo} FileInfo instance
                 */
                FileInfo.create = function create(properties) {
                    return new FileInfo(properties);
                };

                /**
                 * Encodes the specified FileInfo message. Does not implicitly {@link v388.protobuf.FileList.FileInfo.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {v388.protobuf.FileList.IFileInfo} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fileId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.fileType);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.fileSize);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.url);
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.sha1sum);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.notBefore);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.notAfter);
                    return writer;
                };

                /**
                 * Encodes the specified FileInfo message, length delimited. Does not implicitly {@link v388.protobuf.FileList.FileInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {v388.protobuf.FileList.IFileInfo} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FileInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.FileList.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.FileList.FileInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fileId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.fileType = reader.int32();
                                break;
                            }
                        case 3: {
                                message.fileSize = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.url = reader.string();
                                break;
                            }
                        case 5: {
                                message.sha1sum = reader.bytes();
                                break;
                            }
                        case 6: {
                                message.notBefore = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.notAfter = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("fileId"))
                        throw $util.ProtocolError("missing required 'fileId'", { instance: message });
                    if (!message.hasOwnProperty("fileType"))
                        throw $util.ProtocolError("missing required 'fileType'", { instance: message });
                    if (!message.hasOwnProperty("fileSize"))
                        throw $util.ProtocolError("missing required 'fileSize'", { instance: message });
                    if (!message.hasOwnProperty("url"))
                        throw $util.ProtocolError("missing required 'url'", { instance: message });
                    if (!message.hasOwnProperty("sha1sum"))
                        throw $util.ProtocolError("missing required 'sha1sum'", { instance: message });
                    if (!message.hasOwnProperty("notBefore"))
                        throw $util.ProtocolError("missing required 'notBefore'", { instance: message });
                    if (!message.hasOwnProperty("notAfter"))
                        throw $util.ProtocolError("missing required 'notAfter'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a FileInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.FileList.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FileInfo message.
                 * @function verify
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.fileId))
                        return "fileId: integer expected";
                    switch (message.fileType) {
                    default:
                        return "fileType: enum value expected";
                    case 1:
                        break;
                    }
                    if (!$util.isInteger(message.fileSize))
                        return "fileSize: integer expected";
                    if (!$util.isString(message.url))
                        return "url: string expected";
                    if (!(message.sha1sum && typeof message.sha1sum.length === "number" || $util.isString(message.sha1sum)))
                        return "sha1sum: buffer expected";
                    if (!$util.isInteger(message.notBefore))
                        return "notBefore: integer expected";
                    if (!$util.isInteger(message.notAfter))
                        return "notAfter: integer expected";
                    return null;
                };

                /**
                 * Creates a FileInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.FileList.FileInfo} FileInfo
                 */
                FileInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.FileList.FileInfo)
                        return object;
                    let message = new $root.v388.protobuf.FileList.FileInfo();
                    if (object.fileId != null)
                        message.fileId = object.fileId >>> 0;
                    switch (object.fileType) {
                    default:
                        if (typeof object.fileType === "number") {
                            message.fileType = object.fileType;
                            break;
                        }
                        break;
                    case "FILE_PROMOTION_ANNOUNCEMENT":
                    case 1:
                        message.fileType = 1;
                        break;
                    }
                    if (object.fileSize != null)
                        message.fileSize = object.fileSize >>> 0;
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.sha1sum != null)
                        if (typeof object.sha1sum === "string")
                            $util.base64.decode(object.sha1sum, message.sha1sum = $util.newBuffer($util.base64.length(object.sha1sum)), 0);
                        else if (object.sha1sum.length >= 0)
                            message.sha1sum = object.sha1sum;
                    if (object.notBefore != null)
                        message.notBefore = object.notBefore >>> 0;
                    if (object.notAfter != null)
                        message.notAfter = object.notAfter >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a FileInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {v388.protobuf.FileList.FileInfo} message FileInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.fileId = 0;
                        object.fileType = options.enums === String ? "FILE_PROMOTION_ANNOUNCEMENT" : 1;
                        object.fileSize = 0;
                        object.url = "";
                        if (options.bytes === String)
                            object.sha1sum = "";
                        else {
                            object.sha1sum = [];
                            if (options.bytes !== Array)
                                object.sha1sum = $util.newBuffer(object.sha1sum);
                        }
                        object.notBefore = 0;
                        object.notAfter = 0;
                    }
                    if (message.fileId != null && message.hasOwnProperty("fileId"))
                        object.fileId = message.fileId;
                    if (message.fileType != null && message.hasOwnProperty("fileType"))
                        object.fileType = options.enums === String ? $root.v388.protobuf.FileType[message.fileType] === undefined ? message.fileType : $root.v388.protobuf.FileType[message.fileType] : message.fileType;
                    if (message.fileSize != null && message.hasOwnProperty("fileSize"))
                        object.fileSize = message.fileSize;
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.sha1sum != null && message.hasOwnProperty("sha1sum"))
                        object.sha1sum = options.bytes === String ? $util.base64.encode(message.sha1sum, 0, message.sha1sum.length) : options.bytes === Array ? Array.prototype.slice.call(message.sha1sum) : message.sha1sum;
                    if (message.notBefore != null && message.hasOwnProperty("notBefore"))
                        object.notBefore = message.notBefore;
                    if (message.notAfter != null && message.hasOwnProperty("notAfter"))
                        object.notAfter = message.notAfter;
                    return object;
                };

                /**
                 * Converts this FileInfo to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FileInfo
                 * @function getTypeUrl
                 * @memberof v388.protobuf.FileList.FileInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.FileList.FileInfo";
                };

                return FileInfo;
            })();

            return FileList;
        })();

        protobuf.GhostCompetitionTarget = (function() {

            /**
             * Properties of a GhostCompetitionTarget.
             * @memberof v388.protobuf
             * @interface IGhostCompetitionTarget
             * @property {number} competitionId GhostCompetitionTarget competitionId
             * @property {number|null} [specialGhostId] GhostCompetitionTarget specialGhostId
             * @property {v388.protobuf.IGhostCar} ghostCar GhostCompetitionTarget ghostCar
             * @property {number|Long} trailId GhostCompetitionTarget trailId
             * @property {number} updatedAt GhostCompetitionTarget updatedAt
             * @property {v388.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] GhostCompetitionTarget competitionSchedule
             */

            /**
             * Constructs a new GhostCompetitionTarget.
             * @memberof v388.protobuf
             * @classdesc Represents a GhostCompetitionTarget.
             * @implements IGhostCompetitionTarget
             * @constructor
             * @param {v388.protobuf.IGhostCompetitionTarget=} [properties] Properties to set
             */
            function GhostCompetitionTarget(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionTarget competitionId.
             * @member {number} competitionId
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.competitionId = 0;

            /**
             * GhostCompetitionTarget specialGhostId.
             * @member {number} specialGhostId
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.specialGhostId = 0;

            /**
             * GhostCompetitionTarget ghostCar.
             * @member {v388.protobuf.IGhostCar} ghostCar
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.ghostCar = null;

            /**
             * GhostCompetitionTarget trailId.
             * @member {number|Long} trailId
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.trailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GhostCompetitionTarget updatedAt.
             * @member {number} updatedAt
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.updatedAt = 0;

            /**
             * GhostCompetitionTarget competitionSchedule.
             * @member {v388.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.competitionSchedule = null;

            /**
             * Creates a new GhostCompetitionTarget instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {v388.protobuf.IGhostCompetitionTarget=} [properties] Properties to set
             * @returns {v388.protobuf.GhostCompetitionTarget} GhostCompetitionTarget instance
             */
            GhostCompetitionTarget.create = function create(properties) {
                return new GhostCompetitionTarget(properties);
            };

            /**
             * Encodes the specified GhostCompetitionTarget message. Does not implicitly {@link v388.protobuf.GhostCompetitionTarget.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {v388.protobuf.IGhostCompetitionTarget} message GhostCompetitionTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionTarget.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.competitionId);
                if (message.specialGhostId != null && Object.hasOwnProperty.call(message, "specialGhostId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.specialGhostId);
                $root.v388.protobuf.GhostCar.encode(message.ghostCar, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.trailId);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.updatedAt);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.v388.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionTarget message, length delimited. Does not implicitly {@link v388.protobuf.GhostCompetitionTarget.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {v388.protobuf.IGhostCompetitionTarget} message GhostCompetitionTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionTarget.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionTarget message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionTarget.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.GhostCompetitionTarget();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.specialGhostId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ghostCar = $root.v388.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.trailId = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.updatedAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                if (!message.hasOwnProperty("ghostCar"))
                    throw $util.ProtocolError("missing required 'ghostCar'", { instance: message });
                if (!message.hasOwnProperty("trailId"))
                    throw $util.ProtocolError("missing required 'trailId'", { instance: message });
                if (!message.hasOwnProperty("updatedAt"))
                    throw $util.ProtocolError("missing required 'updatedAt'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionTarget message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionTarget.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionTarget message.
             * @function verify
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionTarget.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    if (!$util.isInteger(message.specialGhostId))
                        return "specialGhostId: integer expected";
                {
                    let error = $root.v388.protobuf.GhostCar.verify(message.ghostCar);
                    if (error)
                        return "ghostCar." + error;
                }
                if (!$util.isInteger(message.trailId) && !(message.trailId && $util.isInteger(message.trailId.low) && $util.isInteger(message.trailId.high)))
                    return "trailId: integer|Long expected";
                if (!$util.isInteger(message.updatedAt))
                    return "updatedAt: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.v388.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                return null;
            };

            /**
             * Creates a GhostCompetitionTarget message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             */
            GhostCompetitionTarget.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.GhostCompetitionTarget)
                    return object;
                let message = new $root.v388.protobuf.GhostCompetitionTarget();
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                if (object.specialGhostId != null)
                    message.specialGhostId = object.specialGhostId >>> 0;
                if (object.ghostCar != null) {
                    if (typeof object.ghostCar !== "object")
                        throw TypeError(".v388.protobuf.GhostCompetitionTarget.ghostCar: object expected");
                    message.ghostCar = $root.v388.protobuf.GhostCar.fromObject(object.ghostCar);
                }
                if (object.trailId != null)
                    if ($util.Long)
                        (message.trailId = $util.Long.fromValue(object.trailId)).unsigned = true;
                    else if (typeof object.trailId === "string")
                        message.trailId = parseInt(object.trailId, 10);
                    else if (typeof object.trailId === "number")
                        message.trailId = object.trailId;
                    else if (typeof object.trailId === "object")
                        message.trailId = new $util.LongBits(object.trailId.low >>> 0, object.trailId.high >>> 0).toNumber(true);
                if (object.updatedAt != null)
                    message.updatedAt = object.updatedAt >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".v388.protobuf.GhostCompetitionTarget.competitionSchedule: object expected");
                    message.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionTarget message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {v388.protobuf.GhostCompetitionTarget} message GhostCompetitionTarget
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionTarget.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.competitionId = 0;
                    object.specialGhostId = 0;
                    object.ghostCar = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.trailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.trailId = options.longs === String ? "0" : 0;
                    object.updatedAt = 0;
                    object.competitionSchedule = null;
                }
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    object.specialGhostId = message.specialGhostId;
                if (message.ghostCar != null && message.hasOwnProperty("ghostCar"))
                    object.ghostCar = $root.v388.protobuf.GhostCar.toObject(message.ghostCar, options);
                if (message.trailId != null && message.hasOwnProperty("trailId"))
                    if (typeof message.trailId === "number")
                        object.trailId = options.longs === String ? String(message.trailId) : message.trailId;
                    else
                        object.trailId = options.longs === String ? $util.Long.prototype.toString.call(message.trailId) : options.longs === Number ? new $util.LongBits(message.trailId.low >>> 0, message.trailId.high >>> 0).toNumber(true) : message.trailId;
                if (message.updatedAt != null && message.hasOwnProperty("updatedAt"))
                    object.updatedAt = message.updatedAt;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.v388.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                return object;
            };

            /**
             * Converts this GhostCompetitionTarget to JSON.
             * @function toJSON
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionTarget.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionTarget
             * @function getTypeUrl
             * @memberof v388.protobuf.GhostCompetitionTarget
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionTarget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.GhostCompetitionTarget";
            };

            return GhostCompetitionTarget;
        })();

        protobuf.ActiveTeamList = (function() {

            /**
             * Properties of an ActiveTeamList.
             * @memberof v388.protobuf
             * @interface IActiveTeamList
             * @property {Array.<v388.protobuf.ActiveTeamList.IActiveTeam>|null} [teams] ActiveTeamList teams
             */

            /**
             * Constructs a new ActiveTeamList.
             * @memberof v388.protobuf
             * @classdesc Represents an ActiveTeamList.
             * @implements IActiveTeamList
             * @constructor
             * @param {v388.protobuf.IActiveTeamList=} [properties] Properties to set
             */
            function ActiveTeamList(properties) {
                this.teams = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ActiveTeamList teams.
             * @member {Array.<v388.protobuf.ActiveTeamList.IActiveTeam>} teams
             * @memberof v388.protobuf.ActiveTeamList
             * @instance
             */
            ActiveTeamList.prototype.teams = $util.emptyArray;

            /**
             * Creates a new ActiveTeamList instance using the specified properties.
             * @function create
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {v388.protobuf.IActiveTeamList=} [properties] Properties to set
             * @returns {v388.protobuf.ActiveTeamList} ActiveTeamList instance
             */
            ActiveTeamList.create = function create(properties) {
                return new ActiveTeamList(properties);
            };

            /**
             * Encodes the specified ActiveTeamList message. Does not implicitly {@link v388.protobuf.ActiveTeamList.verify|verify} messages.
             * @function encode
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {v388.protobuf.IActiveTeamList} message ActiveTeamList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveTeamList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.teams != null && message.teams.length)
                    for (let i = 0; i < message.teams.length; ++i)
                        $root.v388.protobuf.ActiveTeamList.ActiveTeam.encode(message.teams[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ActiveTeamList message, length delimited. Does not implicitly {@link v388.protobuf.ActiveTeamList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {v388.protobuf.IActiveTeamList} message ActiveTeamList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActiveTeamList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ActiveTeamList message from the specified reader or buffer.
             * @function decode
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {v388.protobuf.ActiveTeamList} ActiveTeamList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveTeamList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ActiveTeamList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.teams && message.teams.length))
                                message.teams = [];
                            message.teams.push($root.v388.protobuf.ActiveTeamList.ActiveTeam.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ActiveTeamList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {v388.protobuf.ActiveTeamList} ActiveTeamList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActiveTeamList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ActiveTeamList message.
             * @function verify
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActiveTeamList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.teams != null && message.hasOwnProperty("teams")) {
                    if (!Array.isArray(message.teams))
                        return "teams: array expected";
                    for (let i = 0; i < message.teams.length; ++i) {
                        let error = $root.v388.protobuf.ActiveTeamList.ActiveTeam.verify(message.teams[i]);
                        if (error)
                            return "teams." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ActiveTeamList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {v388.protobuf.ActiveTeamList} ActiveTeamList
             */
            ActiveTeamList.fromObject = function fromObject(object) {
                if (object instanceof $root.v388.protobuf.ActiveTeamList)
                    return object;
                let message = new $root.v388.protobuf.ActiveTeamList();
                if (object.teams) {
                    if (!Array.isArray(object.teams))
                        throw TypeError(".v388.protobuf.ActiveTeamList.teams: array expected");
                    message.teams = [];
                    for (let i = 0; i < object.teams.length; ++i) {
                        if (typeof object.teams[i] !== "object")
                            throw TypeError(".v388.protobuf.ActiveTeamList.teams: object expected");
                        message.teams[i] = $root.v388.protobuf.ActiveTeamList.ActiveTeam.fromObject(object.teams[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ActiveTeamList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {v388.protobuf.ActiveTeamList} message ActiveTeamList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActiveTeamList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.teams = [];
                if (message.teams && message.teams.length) {
                    object.teams = [];
                    for (let j = 0; j < message.teams.length; ++j)
                        object.teams[j] = $root.v388.protobuf.ActiveTeamList.ActiveTeam.toObject(message.teams[j], options);
                }
                return object;
            };

            /**
             * Converts this ActiveTeamList to JSON.
             * @function toJSON
             * @memberof v388.protobuf.ActiveTeamList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActiveTeamList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ActiveTeamList
             * @function getTypeUrl
             * @memberof v388.protobuf.ActiveTeamList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ActiveTeamList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/v388.protobuf.ActiveTeamList";
            };

            ActiveTeamList.ActiveTeam = (function() {

                /**
                 * Properties of an ActiveTeam.
                 * @memberof v388.protobuf.ActiveTeamList
                 * @interface IActiveTeam
                 * @property {v388.protobuf.ITeam} team ActiveTeam team
                 * @property {Array.<v388.protobuf.ITeamMember>|null} [members] ActiveTeam members
                 * @property {number} numOfStickers ActiveTeam numOfStickers
                 * @property {number} updatedAt ActiveTeam updatedAt
                 */

                /**
                 * Constructs a new ActiveTeam.
                 * @memberof v388.protobuf.ActiveTeamList
                 * @classdesc Represents an ActiveTeam.
                 * @implements IActiveTeam
                 * @constructor
                 * @param {v388.protobuf.ActiveTeamList.IActiveTeam=} [properties] Properties to set
                 */
                function ActiveTeam(properties) {
                    this.members = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ActiveTeam team.
                 * @member {v388.protobuf.ITeam} team
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @instance
                 */
                ActiveTeam.prototype.team = null;

                /**
                 * ActiveTeam members.
                 * @member {Array.<v388.protobuf.ITeamMember>} members
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @instance
                 */
                ActiveTeam.prototype.members = $util.emptyArray;

                /**
                 * ActiveTeam numOfStickers.
                 * @member {number} numOfStickers
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @instance
                 */
                ActiveTeam.prototype.numOfStickers = 0;

                /**
                 * ActiveTeam updatedAt.
                 * @member {number} updatedAt
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @instance
                 */
                ActiveTeam.prototype.updatedAt = 0;

                /**
                 * Creates a new ActiveTeam instance using the specified properties.
                 * @function create
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {v388.protobuf.ActiveTeamList.IActiveTeam=} [properties] Properties to set
                 * @returns {v388.protobuf.ActiveTeamList.ActiveTeam} ActiveTeam instance
                 */
                ActiveTeam.create = function create(properties) {
                    return new ActiveTeam(properties);
                };

                /**
                 * Encodes the specified ActiveTeam message. Does not implicitly {@link v388.protobuf.ActiveTeamList.ActiveTeam.verify|verify} messages.
                 * @function encode
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {v388.protobuf.ActiveTeamList.IActiveTeam} message ActiveTeam message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActiveTeam.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.v388.protobuf.Team.encode(message.team, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.members != null && message.members.length)
                        for (let i = 0; i < message.members.length; ++i)
                            $root.v388.protobuf.TeamMember.encode(message.members[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfStickers);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.updatedAt);
                    return writer;
                };

                /**
                 * Encodes the specified ActiveTeam message, length delimited. Does not implicitly {@link v388.protobuf.ActiveTeamList.ActiveTeam.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {v388.protobuf.ActiveTeamList.IActiveTeam} message ActiveTeam message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ActiveTeam.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ActiveTeam message from the specified reader or buffer.
                 * @function decode
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {v388.protobuf.ActiveTeamList.ActiveTeam} ActiveTeam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActiveTeam.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.v388.protobuf.ActiveTeamList.ActiveTeam();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.team = $root.v388.protobuf.Team.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                if (!(message.members && message.members.length))
                                    message.members = [];
                                message.members.push($root.v388.protobuf.TeamMember.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.numOfStickers = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.updatedAt = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("team"))
                        throw $util.ProtocolError("missing required 'team'", { instance: message });
                    if (!message.hasOwnProperty("numOfStickers"))
                        throw $util.ProtocolError("missing required 'numOfStickers'", { instance: message });
                    if (!message.hasOwnProperty("updatedAt"))
                        throw $util.ProtocolError("missing required 'updatedAt'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an ActiveTeam message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {v388.protobuf.ActiveTeamList.ActiveTeam} ActiveTeam
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ActiveTeam.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ActiveTeam message.
                 * @function verify
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ActiveTeam.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        let error = $root.v388.protobuf.Team.verify(message.team);
                        if (error)
                            return "team." + error;
                    }
                    if (message.members != null && message.hasOwnProperty("members")) {
                        if (!Array.isArray(message.members))
                            return "members: array expected";
                        for (let i = 0; i < message.members.length; ++i) {
                            let error = $root.v388.protobuf.TeamMember.verify(message.members[i]);
                            if (error)
                                return "members." + error;
                        }
                    }
                    if (!$util.isInteger(message.numOfStickers))
                        return "numOfStickers: integer expected";
                    if (!$util.isInteger(message.updatedAt))
                        return "updatedAt: integer expected";
                    return null;
                };

                /**
                 * Creates an ActiveTeam message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {v388.protobuf.ActiveTeamList.ActiveTeam} ActiveTeam
                 */
                ActiveTeam.fromObject = function fromObject(object) {
                    if (object instanceof $root.v388.protobuf.ActiveTeamList.ActiveTeam)
                        return object;
                    let message = new $root.v388.protobuf.ActiveTeamList.ActiveTeam();
                    if (object.team != null) {
                        if (typeof object.team !== "object")
                            throw TypeError(".v388.protobuf.ActiveTeamList.ActiveTeam.team: object expected");
                        message.team = $root.v388.protobuf.Team.fromObject(object.team);
                    }
                    if (object.members) {
                        if (!Array.isArray(object.members))
                            throw TypeError(".v388.protobuf.ActiveTeamList.ActiveTeam.members: array expected");
                        message.members = [];
                        for (let i = 0; i < object.members.length; ++i) {
                            if (typeof object.members[i] !== "object")
                                throw TypeError(".v388.protobuf.ActiveTeamList.ActiveTeam.members: object expected");
                            message.members[i] = $root.v388.protobuf.TeamMember.fromObject(object.members[i]);
                        }
                    }
                    if (object.numOfStickers != null)
                        message.numOfStickers = object.numOfStickers >>> 0;
                    if (object.updatedAt != null)
                        message.updatedAt = object.updatedAt >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ActiveTeam message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {v388.protobuf.ActiveTeamList.ActiveTeam} message ActiveTeam
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ActiveTeam.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.members = [];
                    if (options.defaults) {
                        object.team = null;
                        object.numOfStickers = 0;
                        object.updatedAt = 0;
                    }
                    if (message.team != null && message.hasOwnProperty("team"))
                        object.team = $root.v388.protobuf.Team.toObject(message.team, options);
                    if (message.members && message.members.length) {
                        object.members = [];
                        for (let j = 0; j < message.members.length; ++j)
                            object.members[j] = $root.v388.protobuf.TeamMember.toObject(message.members[j], options);
                    }
                    if (message.numOfStickers != null && message.hasOwnProperty("numOfStickers"))
                        object.numOfStickers = message.numOfStickers;
                    if (message.updatedAt != null && message.hasOwnProperty("updatedAt"))
                        object.updatedAt = message.updatedAt;
                    return object;
                };

                /**
                 * Converts this ActiveTeam to JSON.
                 * @function toJSON
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ActiveTeam.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ActiveTeam
                 * @function getTypeUrl
                 * @memberof v388.protobuf.ActiveTeamList.ActiveTeam
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ActiveTeam.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/v388.protobuf.ActiveTeamList.ActiveTeam";
                };

                return ActiveTeam;
            })();

            return ActiveTeamList;
        })();

        /**
         * ErrorCode enum.
         * @name v388.protobuf.ErrorCode
         * @enum {number}
         * @property {number} ERR_SUCCESS=0 ERR_SUCCESS value
         * @property {number} ERR_REQUEST=1 ERR_REQUEST value
         * @property {number} ERR_NOT_FOUND=2 ERR_NOT_FOUND value
         * @property {number} ERR_ID_SERVER=3 ERR_ID_SERVER value
         * @property {number} ERR_ID_BANNED=4 ERR_ID_BANNED value
         * @property {number} ERR_USER_LOCKED=5 ERR_USER_LOCKED value
         * @property {number} ERR_USER_VERSION=6 ERR_USER_VERSION value
         * @property {number} ERR_NAME_CONFLICTED=7 ERR_NAME_CONFLICTED value
         * @property {number} ERR_TEAM_LOCKED=8 ERR_TEAM_LOCKED value
         * @property {number} ERR_FORBIDDEN=9 ERR_FORBIDDEN value
         * @property {number} ERR_TEAM_DISSOLVED=10 ERR_TEAM_DISSOLVED value
         * @property {number} ERR_USER_SUCCEEDED=11 ERR_USER_SUCCEEDED value
         */
        protobuf.ErrorCode = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ERR_SUCCESS"] = 0;
            values[valuesById[1] = "ERR_REQUEST"] = 1;
            values[valuesById[2] = "ERR_NOT_FOUND"] = 2;
            values[valuesById[3] = "ERR_ID_SERVER"] = 3;
            values[valuesById[4] = "ERR_ID_BANNED"] = 4;
            values[valuesById[5] = "ERR_USER_LOCKED"] = 5;
            values[valuesById[6] = "ERR_USER_VERSION"] = 6;
            values[valuesById[7] = "ERR_NAME_CONFLICTED"] = 7;
            values[valuesById[8] = "ERR_TEAM_LOCKED"] = 8;
            values[valuesById[9] = "ERR_FORBIDDEN"] = 9;
            values[valuesById[10] = "ERR_TEAM_DISSOLVED"] = 10;
            values[valuesById[11] = "ERR_USER_SUCCEEDED"] = 11;
            return values;
        })();

        /**
         * LineType enum.
         * @name v388.protobuf.LineType
         * @enum {number}
         * @property {number} L_UNKNOWN=0 L_UNKNOWN value
         * @property {number} L_MOBILE=1 L_MOBILE value
         * @property {number} L_ISDN=2 L_ISDN value
         * @property {number} L_BFLETS=3 L_BFLETS value
         * @property {number} L_WIRED=4 L_WIRED value
         */
        protobuf.LineType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "L_UNKNOWN"] = 0;
            values[valuesById[1] = "L_MOBILE"] = 1;
            values[valuesById[2] = "L_ISDN"] = 2;
            values[valuesById[3] = "L_BFLETS"] = 3;
            values[valuesById[4] = "L_WIRED"] = 4;
            return values;
        })();

        /**
         * TerminalType enum.
         * @name v388.protobuf.TerminalType
         * @enum {number}
         * @property {number} T_DRIVE=0 T_DRIVE value
         * @property {number} T_TERMINAL=1 T_TERMINAL value
         */
        protobuf.TerminalType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "T_DRIVE"] = 0;
            values[valuesById[1] = "T_TERMINAL"] = 1;
            return values;
        })();

        /**
         * DeviceType enum.
         * @name v388.protobuf.DeviceType
         * @enum {number}
         * @property {number} DEVICE_CARD=0 DEVICE_CARD value
         * @property {number} DEVICE_PHONE=1 DEVICE_PHONE value
         */
        protobuf.DeviceType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEVICE_CARD"] = 0;
            values[valuesById[1] = "DEVICE_PHONE"] = 1;
            return values;
        })();

        /**
         * TutorialType enum.
         * @name v388.protobuf.TutorialType
         * @enum {number}
         * @property {number} TUTORIAL_STORY=1 TUTORIAL_STORY value
         * @property {number} TUTORIAL_TIME_ATTACK=2 TUTORIAL_TIME_ATTACK value
         * @property {number} TUTORIAL_GHOST=4 TUTORIAL_GHOST value
         * @property {number} TUTORIAL_GHOST_CHALLENGE=8 TUTORIAL_GHOST_CHALLENGE value
         * @property {number} TUTORIAL_GHOST_LEVEL=16 TUTORIAL_GHOST_LEVEL value
         * @property {number} TUTORIAL_GHOST_REVENGE=32 TUTORIAL_GHOST_REVENGE value
         * @property {number} TUTORIAL_GHOST_SEARCH=64 TUTORIAL_GHOST_SEARCH value
         * @property {number} TUTORIAL_GHOST_COMPETITION=128 TUTORIAL_GHOST_COMPETITION value
         * @property {number} TUTORIAL_HP600_CARD=256 TUTORIAL_HP600_CARD value
         * @property {number} TUTORIAL_TEAM_CAMPAIGN=512 TUTORIAL_TEAM_CAMPAIGN value
         * @property {number} TUTORIAL_COMPETITION_QUALIFIED=1024 TUTORIAL_COMPETITION_QUALIFIED value
         * @property {number} TUTORIAL_COMPETITION_TERMINAL=2048 TUTORIAL_COMPETITION_TERMINAL value
         * @property {number} TUTORIAL_COMPETITION_NOTICE=4096 TUTORIAL_COMPETITION_NOTICE value
         * @property {number} TUTORIAL_COMPETITION_FINISHED=8192 TUTORIAL_COMPETITION_FINISHED value
         */
        protobuf.TutorialType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TUTORIAL_STORY"] = 1;
            values[valuesById[2] = "TUTORIAL_TIME_ATTACK"] = 2;
            values[valuesById[4] = "TUTORIAL_GHOST"] = 4;
            values[valuesById[8] = "TUTORIAL_GHOST_CHALLENGE"] = 8;
            values[valuesById[16] = "TUTORIAL_GHOST_LEVEL"] = 16;
            values[valuesById[32] = "TUTORIAL_GHOST_REVENGE"] = 32;
            values[valuesById[64] = "TUTORIAL_GHOST_SEARCH"] = 64;
            values[valuesById[128] = "TUTORIAL_GHOST_COMPETITION"] = 128;
            values[valuesById[256] = "TUTORIAL_HP600_CARD"] = 256;
            values[valuesById[512] = "TUTORIAL_TEAM_CAMPAIGN"] = 512;
            values[valuesById[1024] = "TUTORIAL_COMPETITION_QUALIFIED"] = 1024;
            values[valuesById[2048] = "TUTORIAL_COMPETITION_TERMINAL"] = 2048;
            values[valuesById[4096] = "TUTORIAL_COMPETITION_NOTICE"] = 4096;
            values[valuesById[8192] = "TUTORIAL_COMPETITION_FINISHED"] = 8192;
            return values;
        })();

        /**
         * CarCreationMethod enum.
         * @name v388.protobuf.CarCreationMethod
         * @enum {number}
         * @property {number} CAR_NEW=0 CAR_NEW value
         * @property {number} CAR_INHERITED=1 CAR_INHERITED value
         * @property {number} CAR_HP600=2 CAR_HP600 value
         * @property {number} CAR_PROMOTION=3 CAR_PROMOTION value
         * @property {number} CAR_CAMPAIGN=4 CAR_CAMPAIGN value
         */
        protobuf.CarCreationMethod = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CAR_NEW"] = 0;
            values[valuesById[1] = "CAR_INHERITED"] = 1;
            values[valuesById[2] = "CAR_HP600"] = 2;
            values[valuesById[3] = "CAR_PROMOTION"] = 3;
            values[valuesById[4] = "CAR_CAMPAIGN"] = 4;
            return values;
        })();

        /**
         * GameMode enum.
         * @name v388.protobuf.GameMode
         * @enum {number}
         * @property {number} MODE_STORY=1 MODE_STORY value
         * @property {number} MODE_TIME_ATTACK=2 MODE_TIME_ATTACK value
         * @property {number} MODE_VS_BATTLE=3 MODE_VS_BATTLE value
         * @property {number} MODE_GHOST_BATTLE=4 MODE_GHOST_BATTLE value
         * @property {number} MODE_EVENT=5 MODE_EVENT value
         */
        protobuf.GameMode = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MODE_STORY"] = 1;
            values[valuesById[2] = "MODE_TIME_ATTACK"] = 2;
            values[valuesById[3] = "MODE_VS_BATTLE"] = 3;
            values[valuesById[4] = "MODE_GHOST_BATTLE"] = 4;
            values[valuesById[5] = "MODE_EVENT"] = 5;
            return values;
        })();

        /**
         * GhostSelectionMethod enum.
         * @name v388.protobuf.GhostSelectionMethod
         * @enum {number}
         * @property {number} GHOST_CHALLENGE=1 GHOST_CHALLENGE value
         * @property {number} GHOST_SELECT_BY_LEVEL=2 GHOST_SELECT_BY_LEVEL value
         * @property {number} GHOST_SELECT_FROM_REVENGES=3 GHOST_SELECT_FROM_REVENGES value
         * @property {number} GHOST_SELECT_FROM_HISTORY=4 GHOST_SELECT_FROM_HISTORY value
         * @property {number} GHOST_SEARCH_BY_AREA=5 GHOST_SEARCH_BY_AREA value
         * @property {number} GHOST_SEARCH_BY_NAME=6 GHOST_SEARCH_BY_NAME value
         * @property {number} GHOST_SEARCH_BY_CODE=7 GHOST_SEARCH_BY_CODE value
         * @property {number} GHOST_ACCEPT_CHALLENGER=8 GHOST_ACCEPT_CHALLENGER value
         * @property {number} GHOST_APPOINTMENT=9 GHOST_APPOINTMENT value
         * @property {number} GHOST_DEFAULT_OPPONENT=10 GHOST_DEFAULT_OPPONENT value
         * @property {number} GHOST_COMPETITION=11 GHOST_COMPETITION value
         */
        protobuf.GhostSelectionMethod = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "GHOST_CHALLENGE"] = 1;
            values[valuesById[2] = "GHOST_SELECT_BY_LEVEL"] = 2;
            values[valuesById[3] = "GHOST_SELECT_FROM_REVENGES"] = 3;
            values[valuesById[4] = "GHOST_SELECT_FROM_HISTORY"] = 4;
            values[valuesById[5] = "GHOST_SEARCH_BY_AREA"] = 5;
            values[valuesById[6] = "GHOST_SEARCH_BY_NAME"] = 6;
            values[valuesById[7] = "GHOST_SEARCH_BY_CODE"] = 7;
            values[valuesById[8] = "GHOST_ACCEPT_CHALLENGER"] = 8;
            values[valuesById[9] = "GHOST_APPOINTMENT"] = 9;
            values[valuesById[10] = "GHOST_DEFAULT_OPPONENT"] = 10;
            values[valuesById[11] = "GHOST_COMPETITION"] = 11;
            return values;
        })();

        /**
         * TeamNewsEntry enum.
         * @name v388.protobuf.TeamNewsEntry
         * @enum {number}
         * @property {number} NEWS_STICKER_PRIZE=1 NEWS_STICKER_PRIZE value
         * @property {number} NEWS_JOINED=2 NEWS_JOINED value
         * @property {number} NEWS_LEADER_CHANGED=3 NEWS_LEADER_CHANGED value
         * @property {number} NEWS_STICKER_CHANGED=4 NEWS_STICKER_CHANGED value
         */
        protobuf.TeamNewsEntry = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NEWS_STICKER_PRIZE"] = 1;
            values[valuesById[2] = "NEWS_JOINED"] = 2;
            values[valuesById[3] = "NEWS_LEADER_CHANGED"] = 3;
            values[valuesById[4] = "NEWS_STICKER_CHANGED"] = 4;
            return values;
        })();

        /**
         * TeamNoticeEntry enum.
         * @name v388.protobuf.TeamNoticeEntry
         * @enum {number}
         * @property {number} NOTICE_TEAM_PRIZE=1 NOTICE_TEAM_PRIZE value
         * @property {number} NOTICE_JOINED=2 NOTICE_JOINED value
         * @property {number} NOTICE_DISSOLVED=3 NOTICE_DISSOLVED value
         * @property {number} NOTICE_LEADER_CHANGED=4 NOTICE_LEADER_CHANGED value
         * @property {number} NOTICE_FORCEDLY_DISSOLVED=5 NOTICE_FORCEDLY_DISSOLVED value
         */
        protobuf.TeamNoticeEntry = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NOTICE_TEAM_PRIZE"] = 1;
            values[valuesById[2] = "NOTICE_JOINED"] = 2;
            values[valuesById[3] = "NOTICE_DISSOLVED"] = 3;
            values[valuesById[4] = "NOTICE_LEADER_CHANGED"] = 4;
            values[valuesById[5] = "NOTICE_FORCEDLY_DISSOLVED"] = 5;
            return values;
        })();

        /**
         * FileType enum.
         * @name v388.protobuf.FileType
         * @enum {number}
         * @property {number} FILE_PROMOTION_ANNOUNCEMENT=1 FILE_PROMOTION_ANNOUNCEMENT value
         */
        protobuf.FileType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "FILE_PROMOTION_ANNOUNCEMENT"] = 1;
            return values;
        })();

        /**
         * CarCampaignUserState enum.
         * @name v388.protobuf.CarCampaignUserState
         * @enum {number}
         * @property {number} CAR_CAMPAIGN_NOT_ACCEPTED=1 CAR_CAMPAIGN_NOT_ACCEPTED value
         * @property {number} CAR_CAMPAIGN_ACCEPTED=2 CAR_CAMPAIGN_ACCEPTED value
         * @property {number} CAR_CAMPAIGN_FINISHED=3 CAR_CAMPAIGN_FINISHED value
         */
        protobuf.CarCampaignUserState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "CAR_CAMPAIGN_NOT_ACCEPTED"] = 1;
            values[valuesById[2] = "CAR_CAMPAIGN_ACCEPTED"] = 2;
            values[valuesById[3] = "CAR_CAMPAIGN_FINISHED"] = 3;
            return values;
        })();

        /**
         * GhostCompetitionParticipantState enum.
         * @name v388.protobuf.GhostCompetitionParticipantState
         * @enum {number}
         * @property {number} COMPETITION_NOT_PARTICIPATED=1 COMPETITION_NOT_PARTICIPATED value
         * @property {number} COMPETITION_QUALIFIED=2 COMPETITION_QUALIFIED value
         * @property {number} COMPETITION_PARTICIPATED=3 COMPETITION_PARTICIPATED value
         * @property {number} COMPETITION_WON=4 COMPETITION_WON value
         */
        protobuf.GhostCompetitionParticipantState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "COMPETITION_NOT_PARTICIPATED"] = 1;
            values[valuesById[2] = "COMPETITION_QUALIFIED"] = 2;
            values[valuesById[3] = "COMPETITION_PARTICIPATED"] = 3;
            values[valuesById[4] = "COMPETITION_WON"] = 4;
            return values;
        })();

        return protobuf;
    })();

    return v388;
})();

export { $root as default };
